Received: from Hermes.metastack.local (172.16.0.8) by Hermes.metastack.local
 (172.16.0.8) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.23 via Mailbox
 Transport; Wed, 10 May 2023 10:47:27 +0100
Received: from Hermes.metastack.local (172.16.0.8) by Hermes.metastack.local
 (172.16.0.8) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.23; Wed, 10 May
 2023 10:47:27 +0100
Received: from exchange.romulus.metastack.com (172.16.0.21) by
 Hermes.metastack.local (172.16.0.8) with Microsoft SMTP Server
 (version=TLS1_0, cipher=TLS_RSA_WITH_AES_256_CBC_SHA) id 15.1.2507.23 via
 Frontend Transport; Wed, 10 May 2023 10:47:27 +0100
Received: from romulus.metastack.com ([172.16.0.20])
	by exchange.romulus.metastack.com (8.14.2/8.14.2) with ESMTP id 34A9kfZU014648
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <dra@metastack.local>; Wed, 10 May 2023 10:46:41 +0100
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by romulus.metastack.com (8.14.2/8.14.2) with ESMTP id 34A9kYSV014632
	for <dra-news@metastack.com>; Wed, 10 May 2023 10:46:34 +0100
Received: from prod-listesu18.inria.fr (HELO sympa.inria.fr) ([128.93.162.160])
  by mail2-relais-roc.national.inria.fr with ESMTP; 10 May 2023 11:46:34 +0200
Received: by sympa.inria.fr (Postfix, from userid 20132)
	id 6D740E0D56; Wed, 10 May 2023 11:46:33 +0200 (CEST)
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id C06B7E0D44
	for <caml-list@sympa.inria.fr>; Wed, 10 May 2023 11:46:22 +0200 (CEST)
Received: from deinprogramm.de ([168.119.170.211])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 10 May 2023 11:46:21 +0200
Received: from valmont.local (ip-037-024-119-190.um08.pools.vodafone-ip.de [37.24.119.190])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
	(No client certificate requested)
	by deinprogramm.de (Postfix) with ESMTPSA id 47E00830887
	for <caml-list@inria.fr>; Wed, 10 May 2023 11:46:19 +0200 (CEST)
From: Michael Sperber <sperber@deinprogramm.de>
To: "caml-list@inria.fr" <caml-list@inria.fr>
Subject: [Caml-list] Final CfP: Functional Software Architecture - FP in the
 Large (deadline June 1)
Thread-Topic: [Caml-list] Final CfP: Functional Software Architecture - FP in
 the Large (deadline June 1)
Thread-Index: AQHZgyRuFGeKAEUEaEGaTnAscypqag==
Sender: "caml-list-request@inria.fr" <caml-list-request@inria.fr>
X-MS-Exchange-MessageSentRepresentingType: 2
Date: Wed, 10 May 2023 10:46:18 +0100
Message-ID: <y9lpm78jz85.fsf@deinprogramm.de>
Keywords: Sent to dra-news@metastack.com,Marked bulk,MetaStack -
 Lists,MetaStack
List-Help: <mailto:sympa_inria@inria.fr?subject=help>
List-Subscribe: <mailto:sympa_inria@inria.fr?subject=subscribe%20caml-list>
List-Unsubscribe:
	<mailto:sympa_inria@inria.fr?subject=unsubscribe%20caml-list>
Reply-To: Michael Sperber <sperber@deinprogramm.de>
Content-Language: en-GB
X-MS-Exchange-Organization-AuthAs: Anonymous
X-MS-Exchange-Organization-AuthSource: Hermes.metastack.local
X-MS-Has-Attach:
X-Auto-Response-Suppress: All
X-MS-Exchange-Organization-Network-Message-Id:
	6622da46-3943-4e2a-6435-08db513b90b0
X-MS-TNEF-Correlator:
X-MS-Exchange-Organization-RecordReviewCfmType: 0
x-scanned-by: MIMEDefang 2.65 on 62.31.23.242
received-spf: None (mail2-relais-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@sympa.inria.fr) identity=helo;  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="postmaster@sympa.inria.fr"; x-conformance=spf_only
x-ironport-av: E=Sophos;i="5.99,264,1677538800";    d="scan'208";a="55624175"
x-ironport-anti-spam-filtered: true
x-loop: caml-list@inria.fr
x-no-archive: yes
Content-Type: text/plain; charset="utf-8"
Content-ID: <6262974A1D330F469AD3C8599EC2BC72@metastack.local>
Content-Transfer-Encoding: base64
MIME-Version: 1.0

DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09DQoNCiAgICAgICAgICAgICAgICoqKiBGVU5BUkNIIDIwMjMgLS0gQ0FM
TCBGT1IgUEFQRVJTICoqKg0KDQogICAgICAgICAgICAgICAgICBUaGUgRmlyc3QgQUNNIFNJR1BM
QU4gV29ya3Nob3Agb24NCiAgICAgICAgIEZ1bmN0aW9uYWwgU29mdHdhcmUgQXJjaGl0ZWN0dXJl
IC0gRlAgaW4gdGhlIExhcmdlDQoNCiAgICAgICAgICAgIDh0aCBTZXB0ZW1iZXIgMjAyMywgU2Vh
dHRsZSwgV2FzaGluZ3RvbiwgVVNBDQogICAgICAgICAgICAgICAgICAgICAgQ28tbG9jYXRlZCB3
aXRoIElDRlAgMjAyMw0KDQogICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vdGlueXVybC5jb20v
RlVOQVJDSC0yMw0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09DQoNClRJTUVMSU5FOg0KDQpQYXBlciBzdWJtaXNz
aW9uCTFzdCBKdW5lIDIwMjMNCkF1dGhvciBub3RpZmljYXRpb24JMjh0aCBKdW5lIDIwMjMNCkNh
bWVyYSByZWFkeSBjb3B5CTE4dGggSnVseSAyMDIzDQpXb3Jrc2hvcAkJOHRoIFNlcHQgMjAyMw0K
DQpCQUNLR1JPVU5EOg0KDQoiRnVuY3Rpb25hbCBTb2Z0d2FyZSBBcmNoaXRlY3R1cmUiIHJlZmVy
cyB0byBtZXRob2RzIG9mIGNvbnN0cnVjdGlvbg0KYW5kIHN0cnVjdHVyZSBvZiBsYXJnZSBhbmQg
bG9uZy1saXZlZCBzb2Z0d2FyZSBwcm9qZWN0cyB0aGF0IGFyZQ0KaW1wbGVtZW50ZWQgaW4gZnVu
Y3Rpb25hbCBsYW5ndWFnZXMgYW5kIHJlbGVhc2VkIHRvIHJlYWwgdXNlcnMsDQp0eXBpY2FsbHkg
aW4gaW5kdXN0cnkuICBUaGUgZ29hbHMgZm9yIHRoZSB3b3Jrc2hvcCBhcmU6DQoNCi0gVG8gYXNz
ZW1ibGUgYSBjb21tdW5pdHkgaW50ZXJlc3RlZCBpbiBzb2Z0d2FyZSBhcmNoaXRlY3R1cmUNCiAg
dGVjaG5pcXVlcyBhbmQgdGVjaG5vbG9naWVzIHNwZWNpZmljIHRvIGZ1bmN0aW9uYWwgcHJvZ3Jh
bW1pbmc7DQoNCi0gVG8gaWRlbnRpZnksIGNhdGVnb3JpemUsIGFuZCBkb2N1bWVudCB0b3BpY3Mg
cmVsZXZhbnQgdG8NCiAgdGhlIGZpZWxkIG9mIGZ1bmN0aW9uYWwgc29mdHdhcmUgYXJjaGl0ZWN0
dXJlOw0KDQotIFRvIGNvbm5lY3QgdGhlIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgY29tbXVuaXR5
IHRvIHRoZSBzb2Z0d2FyZQ0KICBhcmNoaXRlY3R1cmUgY29tbXVuaXR5IHRvIGNyb3NzLXBvbGxp
bmF0ZSBiZXR3ZWVuIHRoZSB0d28uDQoNClRoZSB3b3Jrc2hvcCBmb2xsb3dzIG9uIGZyb20gdGhl
IEZ1bmN0aW9uYWwgU29mdHdhcmUgQXJjaGl0ZWN0dXJlDQpvcGVuIHNwYWNlIHRoYXQgd2FzIGhl
bGQgYXQgSUNGUCAyMDIyIGluIFNsb3ZlbmlhLg0KDQpTQ09QRToNCg0KVGhlIHdvcmtzaG9wIHNl
ZWtzIHN1Ym1pc3Npb25zIGluIGEgcmFuZ2Ugb2YgY2F0ZWdvcmllczoNCg0KLSBZb3UncmUgYSBt
ZW1iZXIgb2YgdGhlIEZQIGNvbW11bml0eSBhbmQgaGF2ZSB0aG91Z2h0IGFib3V0IGhvdw0KICB0
byBzdXBwb3J0IHByb2dyYW1taW5nIGluIHRoZSBsYXJnZSwgZm9yIGV4YW1wbGUgYnkgZnJhbWlu
Zw0KICBmdW5jdGlvbmFsIGlkZWFzIGluIGFyY2hpdGVjdHVyYWwgdGVybXMgb3IgdmljZSB2ZXJz
ZSwgY29tcGFyaW5nDQogIGRpZmZlcmVudCBsYW5ndWFnZXMgaW4gdGVybXMgb2YgdGhlaXIgYXJj
aGl0ZWN0dXJhbCBjYXBhYmlsaXRpZXMsDQogIGNsYXJpZnlpbmcgYXJjaGl0ZWN0dXJhbCByb2xl
cyBwbGF5ZWQgYnkgZm9ybWFsIG1ldGhvZHMsIHByb29mDQogIGFzc2lzdGFudHMgYW5kIERTTHMs
IG9yIG9ic2VydmluZyBob3cgZnVuY3Rpb25hbCBjb25jZXB0cyBhcmUNCiAgdXNlZCBpbiBvdGhl
ciBsYW5ndWFnZSBhbmQgYXJjaGl0ZWN0dXJlIGNvbW11bml0aWVzLg0KDQogIEdyZWF0LCBzdWJt
aXQgYSByZXNlYXJjaCBwYXBlciENCg0KLSBZb3UncmUgYSBtZW1iZXIgb2YgdGhlIGFyY2hpdGVj
dHVyZSBjb21tdW5pdHksIGFuZCBoYXZlIHRob3VnaHQNCiAgYWJvdXQgaG93IHlvdXIgZGlzY2lw
bGluZSBtaWdodCBoZWxwIGZ1bmN0aW9uYWwgcHJvZ3JhbW1lcnMsIGZvcg0KICBleGFtcGxlIGJ5
IGFwcGx5aW5nIGRvbWFpbi1kcml2ZW4gZGVzaWduLCBpbXBsZW1lbnRpbmcgaGV4YWdvbmFsDQog
IGFyY2hpdGVjdHVyZSwgb3IgZGVzaWduaW5nIHNlbGYtY29udGFpbmVkIHN5c3RlbXMuDQoNCiAg
RXhjZWxsZW50LCBzdWJtaXQgYSByZXNlYXJjaCBwYXBlciENCg0KLSBZb3UndmUgd29ya2VkIG9u
IGEgbGFyZ2UgcHJvamVjdCB1c2luZyBmdW5jdGlvbmFsIHByb2dyYW1taW5nLA0KICBhbmQgaXQn
cyB3b3JrZWQgb3V0IHdlbGwsIG9yIHRlcnJpYmx5LCBvciBhIG1peCBvZiBib3RoOyBib251cw0K
ICBwb2ludHMgZm9yIGRlcml2aW5nIGFyY2hpdGVjdHVyYWwgcHJpbmNpcGxlcyBmcm9tIHlvdXIg
ZXhwZXJpZW5jZS4NCg0KICBXb25kZXJmdWwsIHN1Ym1pdCBhbiBleHBlcmllbmNlIHJlcG9ydCEN
Cg0KLSBZb3Uga25vdyBhIG5lYXQgYXJjaGl0ZWN0dXJhbCBpZGlvbSBvciBwYXR0ZXJuIHRoYXQg
bWF5IGJlIHVzZWZ1bA0KICB0byBvdGhlcnMgZGV2ZWxvcGluZyBsYXJnZSBmdW5jdGlvbmFsIHNv
ZnR3YXJlIHN5c3RlbXMuDQoNCiAgRmFidWxvdXMsIHN1Ym1pdCBhbiBhcmNoaXRlY3R1cmFsIHBl
YXJsIQ0KDQotIFlvdSBoYXZlIHNvbWV0aGluZyB0aGF0IGRvZXNuJ3QgZml0IHRoZSBhYm92ZSBj
YXRlZ29yaWVzLCBidXQNCiAgdGhhdCBzdGlsbCByZWxhdGVzIHRvIGZ1bmN0aW9uYWwgc29mdHdh
cmUgYXJjaGl0ZWN0dXJlLCBzdWNoIA0KICBhcyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgd3JpdHRl
biB1cCwgb3IgdGhhdCBjb3VsZCBiZSBwYXJ0IG9mDQogIHRoZSB3b3Jrc2hvcCBmb3JtYXQgbGlr
ZSBhIHBhbmVsIGRlYmF0ZSBvciBhIGZpc2hib3dsLg0KDQogIFN1cGVyYiwgc3VibWl0IHRvIHRo
ZSBvcGVuIGNhdGVnb3J5IQ0KDQpSZXNlYXJjaCBwYXBlcnMgc2hvdWxkIGV4cGxhaW4gdGhlaXIg
cmVzZWFyY2ggY29udHJpYnV0aW9ucyBpbiBib3RoDQpnZW5lcmFsIGFuZCB0ZWNobmljYWwgdGVy
bXMsIGlkZW50aWZ5aW5nIHdoYXQgaGFzIGJlZW4gYWNjb21wbGlzaGVkLA0KZXhwbGFpbmluZyB3
aHkgaXQgaXMgc2lnbmlmaWNhbnQsIGFuZCByZWxhdGluZyBpdCB0byBwcmV2aW91cyB3b3JrLA0K
YW5kIHRvIG90aGVyIGxhbmd1YWdlcyB3aGVyZSBhcHByb3ByaWF0ZS4NCg0KRXhwZXJpZW5jZSBy
ZXBvcnRzIGFuZCBhcmNoaXRlY3R1cmFsIHBlYXJscyBuZWVkIG5vdCBuZWNlc3NhcmlseQ0KcmVw
b3J0IG9yaWdpbmFsIHJlc2VhcmNoIHJlc3VsdHMuICBUaGUga2V5IGNyaXRlcmlvbiBmb3Igc3Vj
aCBwYXBlcnMNCmlzIHRoYXQgdGhleSBtYWtlIGEgY29udHJpYnV0aW9uIGZyb20gd2hpY2ggb3Ro
ZXJzIGNhbiBiZW5lZml0Lg0KSXQgaXMgbm90IGVub3VnaCBzaW1wbHkgdG8gZGVzY3JpYmUgYSBs
YXJnZSBzb2Z0d2FyZSBzeXN0ZW0sIG9yDQp0byBwcmVzZW50IGlkZWFzIHRoYXQgYXJlIHNwZWNp
ZmljIHRvIGEgcGFydGljdWxhciBzeXN0ZW0uDQoNCk9wZW4gY2F0ZWdvcnkgc3VibWlzc2lvbnMg
dGhhdCBhcmUgbm90IGludGVuZGVkIGZvciBwdWJsaWNhdGlvbiANCmFyZSBub3QgcmVxdWlyZWQg
dG8gZm9sbG93IHRoZSBmb3JtYXR0aW5nIGd1aWRlbGluZXMsIGFuZCBjYW4gDQpzdWJtaXQgaW4g
UERGLCB3b3JkIG9yIHBsYWluIHRleHQgZm9ybWF0IGFzIHByZWZlcnJlZC4NCg0KSWYgeW91IGFy
ZSB1bnN1cmUgd2hldGhlciB5b3VyIGNvbnRyaWJ1dGlvbiBpcyBzdWl0YWJsZSwgb3IgaWYNCnlv
dSBuZWVkIGFueSBraW5kIG9mIGhlbHAgd2l0aCB5b3VyIHN1Ym1pc3Npb24sIHBsZWFzZSBlbWFp
bA0KdGhlIHByb2dyYW0gY2hhaXJzIGF0IDxmdW5hcmNoMjAyM0BlYXN5Y2hhaXIub3JnPi4NCg0K
U1VCTUlTU0lPTjoNCg0KUGFwZXJzIG11c3QgYmUgc3VibWl0dGVkIGJ5IDFzdCBKdW5lIDIwMjMg
dXNpbmcgRWFzeUNoYWlyLCB2aWEgdGhlDQpmb2xsb3dpbmcgbGluazogaHR0cHM6Ly90aW55dXJs
LmNvbS9GVU5BUkNIMjMtc3VibWl0DQoNCkZvcm1hdHRpbmc6IHN1Ym1pc3Npb25zIGludGVuZGVk
IGZvciBwdWJsaWNhdGlvbiBtdXN0IGJlIGluIFBERg0KZm9ybWF0IGFuZCBmb2xsb3cgdGhlIEFD
TSBTSUdQTEFOIHN0eWxlIGd1aWRlbGluZXMsIHVzaW5nIHRoZQ0KYWNtYXJ0IGZvcm1hdCBhbmQg
dGhlIHNpZ3BsYW4gc3ViLWZvcm1hdC4gIFBsZWFzZSB1c2UgdGhlIHJldmlldw0Kb3B0aW9uLCBh
cyB0aGlzIGVuYWJsZXMgbGluZSBudW1iZXJzIGZvciBlYXN5IHJlZmVyZW5jZSBpbiByZXZpZXdz
Lg0KRm9yIGZ1cnRoZXIgZGV0YWlscywgc2VlOiBodHRwczovL3Rpbnl1cmwuY29tL3NpZ3BsYW4t
YWNtYXJ0DQoNCklmIHlvdXIgc3VibWlzc2lvbiBpcyBub3QgYSByZXNlYXJjaCBwYXBlciwgcGxl
YXNlIG1hcmsgdGhpcyB1c2luZw0KYSBzdWJ0aXRsZSAoRXhwZXJpZW5jZSBSZXBvcnQsIEFyY2hp
dGVjdHVyYWwgUGVhcmwsIE9wZW4gQ2F0ZWdvcnkpLg0KDQpMZW5ndGg6IHN1Ym1pc3Npb25zIG11
c3QgYWRoZXJlIHRvIHRoZSBsaW1pdHMgc3BlY2lmaWVkIGJlbG93Lg0KSG93ZXZlciwgdGhlcmUg
aXMgbm8gcmVxdWlyZW1lbnQgb3IgZXhwZWN0YXRpb24gdGhhdCBhbGwgcGFnZXMNCmFyZSB1c2Vk
LCBhbmQgYXV0aG9ycyBhcmUgZW5jb3VyYWdlZCB0byBzdHJpdmUgZm9yIGJyZXZpdHkuDQoNClJl
c2VhcmNoIHBhcGVycwkJNSB0byAxMisgcGFnZXMNCkFyY2hpdGVjdHVyYWwgcGVhcmxzCTUgdG8g
MTIgcGFnZXMNCkV4cGVyaWVuY2UgcmVwb3J0cwkzIHRvIDYgcGFnZXMNCk9wZW4gY2F0ZWdvcnkJ
CTEgdG8gNiBwYWdlcw0KDQpQdWJsaWNhdGlvbjogVGhlIHByb2NlZWRpbmdzIG9mIEZVTkFSQ0gg
MjAyMyB3aWxsIGJlIHB1Ymxpc2hlZCBpbg0KdGhlIEFDTSBEaWdpdGFsIExpYnJhcnksIGFuZCBh
dXRob3JzIG9mIGFjY2VwdGVkIHBhcGVycyBhcmUgcmVxdWlyZWQNCnRvIGFncmVlIHRvIG9uZSBv
ZiB0aGUgc3RhbmRhcmQgQUNNIGxpY2Vuc2luZyBvcHRpb25zLiAgQWNjZXB0ZWQNCnBhcGVycyBt
dXN0IGJlIHByZXNlbnRlZCBhdCB0aGUgd29ya3Nob3AgYnkgb25lIG9mIHRoZSBhdXRob3JzLCBi
dXQNCmluIHNwZWNpYWwgY2FzZXMgd2UgbWF5IGNvbnNpZGVyIHJlbW90ZSBwcmVzZW50YXRpb24u
IA0KDQpUaGUgb2ZmaWNpYWwgcHVibGljYXRpb24gZGF0ZSBpcyB0aGUgZGF0ZSB0aGUgcGFwZXJz
IGFyZSBtYWRlIGF2YWlsYWJsZQ0KaW4gdGhlIEFDTSBEaWdpdGFsIExpYnJhcnkuIFRoaXMgZGF0
ZSBtYXkgYmUgdXAgdG8gdHdvIHdlZWtzIHByaW9yIHRvDQp0aGUgZmlyc3QgZGF5IG9mIHRoZSBj
b25mZXJlbmNlLiBUaGUgb2ZmaWNpYWwgcHVibGljYXRpb24gZGF0ZSBhZmZlY3RzDQp0aGUgZGVh
ZGxpbmUgZm9yIGFueSBwYXRlbnQgZmlsaW5ncyByZWxhdGVkIHRvIHB1Ymxpc2hlZCB3b3JrLg0K
DQpQUk9HUkFNIENIQUlSUzoNCg0KTWlrZSBTcGVyYmVyIAkJQWN0aXZlIEdyb3VwLCBHZXJtYW55
DQpHcmFoYW0gSHV0dG9uIAkJVW5pdmVyc2l0eSBvZiBOb3R0aW5naGFtLCBVSw0KDQpQUk9HUkFN
IENPTU1JVFRFRToNCg0KSm9hY2hpbSBCcmVpdG5lcglHZXJtYW55DQpNYW51ZWwgQ2hha3JhdmFy
dHkJVHdlYWcgJiBJT0csIFRoZSBOZXRoZXJsYW5kcw0KUm9uIEdhcmNpYQkJVW5pdmVyc2l0eSBv
ZiBCcml0aXNoIENvbHVtYmlhLCBDYW5hZGENCkRlYmFzaXNoIEdob3NoCQlMZWFkSVEsIEluZGlh
DQpMYXJzIEh1cGVsCQlHaWVzZWNrZStEZXZyaWVudCwgR2VybWFueQ0KQW5keSBLZWVwCQlNZXRh
LCBVU0ENClNocmlyYW0gS3Jpc2huYW11cnRoaQlCcm93biBVbml2ZXJzaXR5LCBVU0ENCkFuZHJl
cyBMw7ZoCQlXZWxsLVR5cGVkLCBHZXJtYW55DQpBbmlsIE1hZGhhdmFwZWRkeQlVbml2ZXJzaXR5
IG9mIENhbWJyaWRnZSwgVUsNCkpvc8OpIFBlZHJvIE1hZ2FsaMOjZXMJU3RhbmRhcmQgQ2hhcnRl
cmVkLCBVSw0KU2ltb24gTWFybG93CQlNZXRhLCBVSw0KSGFubmVzIE1laG5lcnQJCVJvYnVyLCBH
ZXJtYW55DQpFcmlrIE1laWplcgkJVVNBDQpJdmFuIFBlcmV6CQlLQlIgLyBOQVNBIEFtZXMgUmVz
ZWFyY2ggQ2VudGVyLCBVU0ENClN0ZWZhbmllIFNjaGlybWVyCUR1Y2tEdWNrR28sIEdlcm1hbnkN
ClBlcmRpdGEgU3RldmVucwkJVW5pdmVyc2l0eSBvZiBFZGluYnVyZ2gsIFVLDQpTdGVmYW4gV2Vo
cgkJSG9jaHNjaHVsZSBPZmZlbmJ1cmcsIEdlcm1hbnkNClNjb3R0IFdsYXNjaGluCQlGUGJyaWRn
ZSwgVUsNCg0KV09SS1NIT1AgVkVOVUU6DQoNClRoZSB3b3Jrc2hvcCB3aWxsIGJlIGNvLWxvY2F0
ZWQgd2l0aCB0aGUgSUNGUCAyMDIzIGNvbmZlcmVuY2UgYXQNClRoZSBXZXN0aW4gU2VhdHRsZSBI
b3RlbCwgU2VhdHRsZSwgV2FzaGluZ3RvbiwgVW5pdGVkIFN0YXRlcy4NCg0KPT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PQ0KDQo=
