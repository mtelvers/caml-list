Return-Path: <caml-list-owner@inria.fr>
Authentication-Results: plum.tunbury.org;
	dkim=pass (1024-bit key; unprotected) header.d=inria.fr header.i=@inria.fr header.a=rsa-sha256 header.s=dc header.b=FGqk5APB;
	dkim=fail reason="signature verification failed" (1024-bit key; secure) header.d=polytechnique.org header.i=@polytechnique.org header.a=rsa-sha256 header.s=svoboda header.b=yZi2MMdT;
	dkim-atps=neutral
Received-SPF: Pass (mailfrom) identity=mailfrom; client-ip=192.134.164.83; helo=mail2-relais-roc.national.inria.fr; envelope-from=caml-list-owner@inria.fr; receiver=tunbury.org 
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by plum.tunbury.org (Postfix) with ESMTPS id 4A0593F80C
	for <caml-list@tunbury.org>; Tue, 21 Jan 2025 15:47:43 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=inria.fr; s=dc;
  h=from:to:date:message-id:mime-version:subject:reply-to:
   sender:list-id:list-help:list-subscribe:list-unsubscribe:
   list-post:list-owner:list-archive;
  bh=aTJofVy4Kz85QTU/vlN42WcyXsCr1b5IiND2IYgQM7s=;
  b=FGqk5APBxduwnO6jRKHeE7rql00wtNbfaKDPD9CqUqDUTzOTf1ATanDp
   fIM5CFaeb/B1ZyJpX1FndnbgfKZ936rB7eQgkCdBmi0ha+0+YHSpdpmjq
   P/+mD1Pj00D9oYd9HyBED4lDd8sf+gkBFHXWqo1yUdAUVl9AugiY3brVU
   M=;
Received-SPF: Pass (mail2-relais-roc.national.inria.fr: domain of
  caml-list-owner@inria.fr designates 128.93.162.160 as
  permitted sender) identity=mailfrom;
  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="caml-list-owner@inria.fr"; x-conformance=spf_only;
  x-record-type="v=spf1"; x-record-text="v=spf1
  include:mailout.safebrands.com a:basic-mail.safebrands.com
  a:basic-mail01.safebrands.com a:basic-mail02.safebrands.com
  ip4:128.93.142.0/24 ip4:192.134.164.0/24 ip4:128.93.162.160
  ip4:128.93.162.3 ip4:128.93.162.88 ip4:89.107.174.7 mx ~all"
Received-SPF: None (mail2-relais-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@sympa.inria.fr) identity=helo;
  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="postmaster@sympa.inria.fr"; x-conformance=spf_only
Authentication-Results: mail2-relais-roc.national.inria.fr; spf=Pass smtp.mailfrom=caml-list-owner@inria.fr; spf=None smtp.helo=postmaster@sympa.inria.fr; dkim=hardfail (body hash did not verify [final]) header.i=@polytechnique.org
X-IronPort-AV: E=Sophos;i="6.13,222,1732575600"; 
   d="scan'208,217";a="204259981"
Received: from prod-listesu18.inria.fr (HELO sympa.inria.fr) ([128.93.162.160])
  by mail2-relais-roc.national.inria.fr with ESMTP; 21 Jan 2025 16:47:42 +0100
Received: by sympa.inria.fr (Postfix, from userid 20132)
	id 1DC82E0D1E; Tue, 21 Jan 2025 16:47:42 +0100 (CET)
Received: from mail3-relais-sop.national.inria.fr (mail3-relais-sop.national.inria.fr [192.134.164.104])
	by sympa.inria.fr (Postfix) with ESMTPS id 53A58E0077
	for <caml-list@sympa.inria.fr>; Tue, 21 Jan 2025 16:47:35 +0100 (CET)
IronPort-SDR: 678fc192_+S+HCQWSUXDKpN1kyRNaZn2FIG+vmbCVJCRGRE03Fa3D9yp
 4zBRYhosjFYidhycVpLvSsMtLQkcBebMyCS8fMQ==
X-IPAS-Result: =?us-ascii?q?A0G+IgCmwI9ngSIeaIFQChaCSIE/WygZAWNaMwcISAOEU?=
 =?us-ascii?q?4FjgWyOIIEWiHyHO4FUhnSCMIFqgREDGBYjFAEDAQ0uAQUMAQECBAEBAwECA?=
 =?us-ascii?q?YIMgT1xQAQCAop0Ah8GAQQ0EwECBAEBAQEDAgMBAQEBAQEQAQEFAQEBAgEBA?=
 =?us-ascii?q?gQGAQIQAQE9BUmFew1JAQEBAwEKAQQBgWVRUx5eBwkGAQEBAQEBAQEBAQEBA?=
 =?us-ascii?q?QEiAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA?=
 =?us-ascii?q?QIIBAEHBQYHFwMrJBoCAQIGChMBASYBAQEBAQUCAgQYIwMJCwEGAwIRATUDA?=
 =?us-ascii?q?RMBEhQCAwEBgg4URYIfRQMFDAY/lmmbFCcQeoEygQGCDAEBBoEIPgIBAQEJA?=
 =?us-ascii?q?gIDAQ4JJQHaBoFkCYEwGAGFaoJJGgEqSGoChEgJhDECJw+BVUSBFAE1gVYdE?=
 =?us-ascii?q?jgHb4FBfgsXAQEBAQEXRDsIAQkBBwQGAgECBAIJCQ8REwkJgxyCaYIfF0tFN?=
 =?us-ascii?q?X1bLF57EYFshGcSTwWBQR5agR+BOx0dJQpGgQ83HQh7LIFbgws+BAQSWQOIJ?=
 =?us-ascii?q?4FHSzMsAVUTFwsHBWGBEAMtNjGBSXs5gg1pSToCDQI1gh4kWIIrgx2BPYRFh?=
 =?us-ascii?q?FGFXoIUghGEch1AAwttPTcUG5wmCTU2ATyCbRAFARoLDgoBFBkCBAEBEhcDE?=
 =?us-ascii?q?AMXAQkCBwoHBAoFAQUCAwkICgQBAQkHEAItAQMBBAUJFQoHBQcDGAERBgIEC?=
 =?us-ascii?q?QQBBQQECAUEAQIDAQEBAgEKAQwDCQYFAwECAgMGAgYBFREDhF2NYAgKAhIIC?=
 =?us-ascii?q?gEDBAEBJHeOUIsngmuTUx1tNAeEHoFdBgyIHGmBJIJYiz+EDYNXhASBV4U7h?=
 =?us-ascii?q?XQDhn2SSSKYWiKCNoJ4gy2BAApTQwUJgW8eTIELhBICgUhwgRwSjBIQFhMDB?=
 =?us-ascii?q?AQLDQECEGiBKYMSgX4hAjwNIz8BARkDDAczGjBDDQoEB4IRAQEBMQkKPBwPV?=
 =?us-ascii?q?4dKhV4tARaBDAEBBgGBZVgGECMOOgY9gRgDC4F1FyRaIYEXVAe1HgJCNQIBA?=
 =?us-ascii?q?QoFKQIHAQoBAQMJhWIBAYMEghdugwhZAiYHBWsDVQgBAQ?=
IronPort-PHdr: A9a23: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
IronPort-Data: A9a23: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
 wSR
IronPort-HdrOrdr: A9a23:4bLP7qo/n3HGQSidhCh3XDwaV5oWeYIsimQD101hICG9E/bo9P
 xG+c5w6faaslgssR0b9OxoW5PhfZq/z/9ICOAqVN/IYOCMggSVxe9ZgbfK8nnJJGnV9+JW16
 tsGpIOauHYPBxdlsi/xAG5Fr8bsb26GU2T9ILj80s=
X-Talos-CUID: 9a23:LBZ8d2Gzzl4m9ocmqmJ57X8QRpoOfET5yUXqDV6gJmdOdI2KHAo=
X-Talos-MUID: =?us-ascii?q?9a23=3A59SZPQ2Oo1/1yYxu1gEvK/GMFjUj+JSKOAcKkbk?=
 =?us-ascii?q?6ntiLCyN0OiqtszeXe9py?=
X-IronPort-Anti-Spam-Filtered: true
X-URL-LookUp-ScanningError: 1
X-IronPort-AV: E=Sophos;i="6.13,222,1732575600"; 
   d="scan'208,217";a="106961614"
X-URL-ContentFilter: 
X-MGA-submission: =?us-ascii?q?MDH3+o2R2ZDnG0R/OjTnc7mtPgIbFc6swiJSCb?=
 =?us-ascii?q?klvtxFI4USm7+QbJSc6aebv0/6sL2LiwZu6tGvv3XpKgos5i5B+G6U3n?=
 =?us-ascii?q?fiYdtY0RkSW/kryBmmUjVs7rjrZ4QOZ9qE/3KxtooG/KeUprBJHuzmft?=
 =?us-ascii?q?Cna6GuDUVLi484/PFXWrcrQg=3D=3D?=
Received: from mx1.polytechnique.org ([129.104.30.34])
  by mail3-smtp-sop.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 21 Jan 2025 16:47:30 +0100
Received: from mac-03220211.irisa.fr (mac-03220211.irisa.fr [131.254.21.249])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by ssl.polytechnique.org (Postfix) with ESMTPSA id D73175648C5;
	Tue, 21 Jan 2025 16:47:27 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=polytechnique.org;
	s=svoboda; t=1737474447;
	bh=Irm8fjAaojj8K9fBllzuD8/3T08nhhwM91XxhczPmIY=;
	h=From:To:Subject:Date:Message-ID;
	b=yZi2MMdTc8T23ZZ+nU69J6xubIjC3Vw8RxxZkHjBcKUY8YWwVsVcD2QUa5LAIHZku
	 9a6GyUrV23XAgHR87G8uQTSlh70apkLkj9lUUmYgPX/qhKmYSaTeAZh5gyNLS8RbUK
	 KdW9ytIBxWUR3P6ne02urBa0ie6YCgPGuBYVsUKo=
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, caml-list@inria.fr
Date: Tue, 21 Jan 2025 16:47:26 +0100
Message-ID: <m2a5bk184x.fsf@mac-03220211.irisa.fr>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
X-AV-Checked: ClamAV using ClamSMTP at svoboda.polytechnique.org (Tue Jan 21 16:47:29 2025 +0100 (CET))
X-Spam-Flag: Unsure, tests=bogofilter, spamicity=0.499952, queueID=812035648C7
X-Org-Mail: alan.schmitt.1995@polytechnique.org
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News
Reply-To: Alan Schmitt <alan.schmitt@polytechnique.org>
X-Loop: caml-list@inria.fr
X-Sequence: 19255
Errors-To: caml-list-owner@inria.fr
Precedence: list
Precedence: bulk
Sender: caml-list-request@inria.fr
X-no-archive: yes
List-Id: <caml-list.inria.fr>
List-Help: <mailto:sympa_inria@inria.fr?subject=help>
List-Subscribe: <mailto:sympa_inria@inria.fr?subject=subscribe%20caml-list>
List-Unsubscribe: <mailto:sympa_inria@inria.fr?subject=unsubscribe%20caml-list>
List-Post: <mailto:caml-list@inria.fr>
List-Owner: <mailto:caml-list-request@inria.fr>
List-Archive: <https://sympa.inria.fr/sympa/arc/caml-list>
Archived-At: <https://sympa.inria.fr/sympa/arcsearch_id/caml-list/2025-01/m2a5bk184x.fsf%40mac-03220211.irisa.fr>

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of January 14 to 21,
2025.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

OCaml Software Foundation: January 2025 update
ppxlib.034.0
Release of Carton 1.0.0 and Cachet
Opam repository archival, phase 2 - OCaml 4.08 is the lower bound
Ocaml-posix 2.1.0 released!
Release of ocaml-eglot 1.0.0
Semgrep is hiring to help scale their static analysis engine
Dune dev meeting
Tarides: 2024 in Review
Other OCaml News
Old CWN


OCaml Software Foundation: January 2025 update
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ocaml-software-foundation-january-2025-updat=
e/15951/1>


gasche announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Happy new year!

  This is an update on recent works of the [OCaml Software Foundation],
  covering our 2024 actions =E2=80=93 the previous update was in [January 2=
024].

  The OCaml Software Foundation is a non-profit foundation ([earlier
  thread]) that receives funding from [our industrial sponsors] each
  year, and tries its best to spend it to support and strengthen the
  OCaml ecosystem and community.

  The funding volume we receive each year is around 200K=E2=82=AC. (For
  comparison: this is the yearly cost of one experienced full-time
  software engineer in many parts of the world.) We do not fund people
  full-time for long periods. Most actions receive from 3K=E2=82=AC to 20K=
=E2=82=AC.
  The work to prepare and execute actions is mostly done by the (unpaid)
  [Executive Committee]. It is currently formed by Nicol=C3=A1s Ojeda B=C3=
=A4r,
  Damien Doligez, Xavier Leroy, Kim Nguy=E1=BB=85n, Virgile Prevosto and my=
self,
  with administrative personnel provided by [INRIA] and general
  assistance by Alan Schmitt.

  Our current sponsors (thanks!) are [ahrefs], [Jane Street], [Tezos],
  [Bloomberg], [Lexifi], [SimCorp], [MERCE] and [Tarides]. (If your
  company would like to join as a sponsor, please [get in
  touch]. Unfortunately, we still cannot efficiently process small
  donations, so we are not calling for individual donations.)

  Feel free to use this thread for questions/suggestions :-)


[OCaml Software Foundation] <http://ocaml-sf.org/>

[January 2024]
<https://discuss.ocaml.org/t/ocaml-software-foundation-january-2024-update/=
13828>

[earlier thread]
<https://discuss.ocaml.org/t/ann-the-ocaml-software-foundation/4476>

[our industrial sponsors] <http://ocaml-sf.org/#sponsors>

[Executive Committee] <http://ocaml-sf.org/about-us/>

[INRIA]
<https://en.wikipedia.org/wiki/French_Institute_for_Research_in_Computer_Sc=
ience_and_Automation>

[ahrefs] <https://ahrefs.com/>

[Jane Street] <https://janestreet.com/>

[Tezos] <https://tezos.com/>

[Bloomberg] <https://bloomberg.com/>

[Lexifi] <https://lexifi.com/>

[SimCorp] <https://simcorp.com/>

[MERCE] <https://www.mitsubishielectric-rce.eu/>

[Tarides] <https://tarides.com/>

[get in touch] <http://ocaml-sf.org/becoming-a-sponsor/>

Recent actions
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

=E2=97=8A Education and outreach

  We funded a new edition of the Spanish [summer school] on functional
  programming in OCaml, organized in Saragossa by Ricardo Rodriguez and
  Roberto Blanco.

  We continued funding the OCaml meetups in Paris and Toulouse,
  France. In 2024, a [new meetup] started in Chennai, India (first
  [discuss thread]), which we are delighted to support as well.

  We are sponsoring the [JFLA 2025], a functional programming conference
  in France, and an [OCaml Bridge Workshop] at Functional Conf 2025, a
  large Asian conference on functional programming.


  [summer school] <https://webdiis.unizar.es/evpf/index.html>

  [new meetup] <https://www.meetup.com/chennai-ocaml-meetup/>

  [discuss thread]
  <https://discuss.ocaml.org/t/chennai-ocaml-meetup-june-2024/14695>

  [JFLA 2025] <https://jfla.inria.fr/jfla2025.html>

  [OCaml Bridge Workshop]
  <https://confengine.com/conferences/functional-conf-2025/proposal/21057/o=
caml-bridge-workshop>


=E2=97=8A Research

  The OCaml Software Foundation is typically not involved in funding
  research, focusing on actions that have an immediate impact on the
  language and its community. Nevertheless, in 2023 we funded one year
  of post-doctoral work for Takafumi Saikawa in relation to his
  maintenance work on the type-checker of OCaml. In 2024 we funded one
  year of research engineer for the [Salto] project, building a static
  analyzer for OCaml, and one year of PhD grant for [Alistair O'Brien]
  in Cambridge (complementing other funding sources for a full PhD),
  continuing his [impressive work] on constraint-based type inference
  for OCaml.


  [Salto] <https://salto.gitlabpages.inria.fr/>

  [Alistair O'Brien] <https://github.com/johnyob>

  [impressive work] <https://github.com/johnyob/dromedary/>


=E2=97=8A Ecosystem

  =E2=97=8A Infrastructure

    As in previous years, we fund the work of Kate Deplaix to check that
    the OCaml ecosystem is compatible with upcoming compiler releases;
    in 2024 Kate worked on OCaml 5.2 and 5.3.

    We are trying our best to support the work of opam-repository
    maintainers, through individual funding grants for the active
    maintainers. This year, on the suggestion of the repository
    maintainers, we are also funding the work of [Robur] to migrate
    unmaintained packages to a separate archive ([discuss thread 1],
    [thread 2]).


    [Robur] <https://robur.coop/>

    [discuss thread 1]
    <https://discuss.ocaml.org/t/proposed-package-archiving-policy-for-the-=
opam-repository/15713>

    [thread 2]
    <https://discuss.ocaml.org/t/opam-repository-archival-phase-1-unavailab=
le-packages/15797/2>


  =E2=97=8A Tools

    In 2024 we have funded one month of maintenance of the `opam' client
    by Raja Boujbel and her colleagues.

    We renewed our partial support for the work of Antonio Monteiro on
    [Melange]. For more Melange news, see for example the announcement
    of [Melange 4].


    [Melange] <https://melange.re/v4.0.0/>

    [Melange 4] <https://melange.re/blog/posts/melange-4-is-here>


  =E2=97=8A Libraries

    We keep supporting the work of Petter Urkedal on the [Caqti]
    library, the main database connection library in the OCaml
    community.

    The [Owl] library for scientific computing has been [restructuring]
    in 2024, with its two maintainers moving to permanent jobs demanding
    their time and therefore less available. The OCaml Software
    Foundation is providing a small grant to help the maintainers
    transition to a different contribution model and/or preserve a part
    of their maintenance activity, as they think is best.

    We have been funding documentation work by John Whitington to
    collect or create usage examples of important OCaml libraries, prior
    to their upstreaming in the documentation of each project. See his
    [ocaml-nursery] repository.

    We support the contributions of Daniel B=C3=BCnzli to the OCaml
    ecosystem. This year, Daniel used this support to fund the
    development of

    =E2=80=A2 [jsont], a new library for declarative JSON data manipulation
    =E2=80=A2 [bytesrw], a library of composable byte stream readers and wr=
ites,
      with support for various compression and hashing algorithms
    =E2=80=A2 [support] for Unicode 16.0 in his Unicode libraries

    Finally, we have been funding Nathan Rebours to take an active part
    in the maintenance of the ppxlib project, see his [ppxlib
    maintenance summary].


    [Caqti] <https://github.com/paurkedal/ocaml-caqti/>

    [Owl] <https://github.com/owlbarn/owl>

    [restructuring]
    <https://discuss.ocaml.org/t/owl-project-restructured/14226>

    [ocaml-nursery] <https://github.com/johnwhitington/ocaml-nursery>

    [jsont]
    <https://discuss.ocaml.org/t/ann-jsont-0-1-0-declarative-json-data-mani=
pulation-for-ocaml/15702>

    [bytesrw]
    <https://discuss.ocaml.org/t/ann-bytesrw-0-1-0-composable-byte-stream-r=
eaders-and-writers/15696>

    [support]
    <https://discuss.ocaml.org/t/ann-unicode-16-0-0-update-for-uucd-uucp-uu=
nf-and-uuseg/15270>

    [ppxlib maintenance summary]
    <https://discuss.ocaml.org/t/ppxlib-maintenance-summary/14458>


ppxlib.034.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-ppxlib-034-0/15952/1>


Nathan Rebours announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  We're happy to announce that we just released ppxlib.0.34.0.

  The full patch notes are available on the release page [over here].

  The main features are OCaml 5.3 compatibility, new AST pretty-printing
  utilities and the ppxlib-tools package, support for `[@@deriving ...]'
  on class types and the addition of missing `Pprintast' entry points.


[over here] <https://github.com/ocaml-ppx/ppxlib/releases/tag/0.34.0>

Changes summary
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

=E2=97=8A 5.3 compatibility

  ppxlib.0.34.0 is the first official ppxlib release that's compatible
  with the new 5.3 compiler.

  The ppxlib driver now also comes with a `-keywords' CLI option,
  similar to the compiler's that allow you to compile and preprocess
  with the 5.3 compiler code that uses `effect' as an identifier. This
  is pretty niche but it's there should you need it.

  Please note that means you can use ppx-es with a 5.3 compiler but not
  that ppx-es can consume/produce 5.3 language features. We're currently
  working on a fix allowing you to use the effect syntax in files that
  require preprocessing as it's not possible with 0.34.0. The fix should
  be released in the next few days as 0.34.1.


=E2=97=8A AST pretty-printing

  We added a new `Pp_ast' module that allows you to pretty print AST
  fragments.

  The only way ppxlib would print ASTs before were as S-expressions. In
  practice we found that it was not always helpful and wanted a more
  readable and human friendly way of displaying the AST.

  The default output of those printer is a simplified version of the AST
  to keep things clear and avoid cluttering the output with information
  that is not always useful. For example, if you run
  `Ppxlib.Pp_ast.Default.expression' on the AST for `x + 2', you'll get
  the following:
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 Pexp_apply
  =E2=94=82   ( Pexp_ident (Lident "+")
  =E2=94=82   , [ ( Nolabel, Pexp_ident (Lident "x"))
  =E2=94=82     ; ( Nolabel, Pexp_constant (Pconst_integer ( "2", None)))
  =E2=94=82     ]
  =E2=94=82   )
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  The alert reader will note that there are no locations or attributes
  and that the `expression' record layer is omitted here.

  You can of course configure the printer to display more information if
  you need to.

  We've been using these new printers internally to debug migration code
  and they have been a huge help so we hope they will make working with
  ppxlib easier for you too.

  In addition to this new module, we also added a command line utility
  called `ppxlib-pp-ast' to pretty print ASTs from source files, source
  code fragments or even marshalled AST files. It is very similar to the
  old `ppx_tools''s `dumpast'.

  Note that it will print ppxlib's internal AST after it's been migrated
  from the installed compiler's version. This is something that we could
  not simply achieve with OCaml's own `-dparsetree'.

  This should be a useful tool for debugging ppx related bugs or
  learning about the AST and we hope ppx authors and users will like it.


=E2=97=8A Other changes

  As mentioned above, we also added some missing `Pprintast~=C2=B9 entries
  such as ~binding', `longident' and `payload'.

  It is now possible to use `[@@deriving ...]' on class type
  declarations and therefore to write derivers for class types.

  =C2=B9: /To the confused readers:/ `Pprintast' /is entirely different fro=
m/
  `Pp_ast' /mentioned above as it prints the source code corresponding
  to a given AST./


Plans for the next release
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C

=E2=97=8A Internal AST bump to 5.2

  Our next release will bump our internal AST to 5.2. It is a pretty big
  change because 5.2 changed how functions were represented in the AST
  and this impacts *A LOT* of ppx-es.

  @patricoferris has been working very hard on this over the past few
  months to minimize the amount of breakage and to send patches upstream
  where that was not possible to get the rest of the ecosystem ready for
  the bump.

  We wanted to first release the 5.3 compatibility but now that's out of
  the way we're able to focus on the bump again.

  @patricoferris will create a dedicated thread shortly to explain a bit
  what's been going on and what to expect from this release.


=E2=97=8A Drop support for OCaml < 4.08

  It is time for us to drop support for very old compilers. Keeping
  support for OCaml 4.07 and before requires maintenances of quite heavy
  compatibility layers and prevents us from using some language features
  in ppxlib's source code while providing little to no benefits since
  the vast majority of users already upgraded to much more recent
  compilers.

  If you're still relying on those older compilers and the newest
  ppxlib, please reach out, either here or via a ppxlib issue.


Special thanks
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  We wanted to thank our external contributors for this release: @hhugo,
  @nojb and @dra27 for their help on the 5.3 compat and @mattiasdrp for
  bringing the `Pprintast' module up to speed.

  Special thanks as well to @pedrobslisboa who started integrating their
  excellent [ppx-by-example] into ppxlib's documentation.

  Finally, I'd also like to thank the OCaml Software Foundation who's
  been funding all my work on ppxlib and made this release possible!

  Happy preprocessing to you all!


[ppx-by-example] <https://github.com/pedrobslisboa/ppx-by-example>


Release of Carton 1.0.0 and Cachet
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-release-of-carton-1-0-0-and-cachet/15953=
/1>


Calascibetta Romain announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I'm delighted to announce the release of [Carton 1.0.0] and [Cachet]
  (which will be released soon into `opam-repository').

  Carton is a reimplementation of the Git PACK format. A PACK file is
  what you can find in your `.git/objects/pack' in your favourite Git
  repository. It contains mainly all your Git objects. This format
  provides a good compression ratio and the ability to extract objects
  almost directly. It can be seen as a read-only key-value database =E2=80=
=94 in
  effect, modifying Git objects is impossible.

  This project is built around the OCaml implementation of Git that we
  have. But the PACK format is also interesting in its own right and
  outside the Git concepts.

  The PACK format offers double compression. A zlib compression
  (proposed by [decompress]) as well as a compression between objects in
  the form of a binary patch (proposed by [duff]).

  So, if the "words" appear quite frequently (like the words used in a
  programming language =E2=80=94 if, else, then, etc.), the second level of
  compression becomes very interesting where an object (such as a file)
  is simply a succession of patches with other objects.


[Carton 1.0.0] <https://github.com/robur-coop/carton>

[Cachet] <https://github.com/robur-coop/cachet>

[decompress] <https://github.com/mirage/decompress>

[duff] <https://github.com/mirage/duff>

Cachet, a library for `mmap' syscall
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C

  Carton and the PACK format very often use syscall `mmap'. The point is
  to be able to take advantage of the kernel cache system to read a PACK
  file. The kernel can read a file in advance when reading a page via
  `mmap'. Basically, the kernel anticipates that you might want to get
  the next page after the one you requested.

  However, in the case of Carton, it is sometimes necessary to =E2=80=98go
  back=E2=80=99, particularly for patched objects whose source is often
  upstream.

  Cachet is an intermediate layer for `mmap' that caches previously
  obtained pages. In this way, we take advantage of both the kernel for
  subsequent pages and our library for previous pages.

  Let's take a concrete example. Carton can analyse a PACK file as `git
  verify-pack' does. Let's make a comparison with and without Cachet.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 +--------------+-------------+----------------+----------------=
-+
  =E2=94=82 |              | with cachet | without cachet | git verify-pack=
 |
  =E2=94=82 +--------------+-------------+----------------+----------------=
-+
  =E2=94=82 |         time |       17.8s |          41.8s |            9.3s=
 |
  =E2=94=82 +--------------+-------------+----------------+----------------=
-+
  =E2=94=82 | cache misses |        936M |          1933M |            246M=
 |
  =E2=94=82 +--------------+-------------+----------------+----------------=
-+
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  As you can see, using Cachet improves Carton's execution time. We're
  still not as competitive as git-verify-pack, but we're getting close!

  Cachet offers to cache previously loaded pages. Its cache system is
  very basic and is just a small array whose size is a power of
  two. Next, we simply reuse the OCaml hash function =E2=80=94 in this resp=
ect,
  it may be worth testing another hash function.


=E2=97=8A Cachet & schedulers

  Like most of our projects, Cachet is independent of schedulers. There
  is therefore a variant with [Lwt] and a variant with [Miou]. However,
  we need to clarify a behaviour related to the use of Cachet. Reading a
  file, whether with `read(3)' or `mmap(3P)', does not block, but it can
  take some time.

  As we have already experienced and explained [here], it may be
  necessary to explain to the scheduler whether it is appropriate to do
  something else after such a syscall. In the case of Lwt, it might be a
  good idea to insert `Lwt.pause' just after our syscall so that Lwt
  gives another service the opportunity to run despite the time taken
  trying to read from a file. However, particularly for Lwt, this means
  closing Cachet in the hell of the monad (in other words, there is no
  way to escape it) because of this possible `Lwt.pause' (which returns
  `unit Lwt.t').

  The composition of Cachet with Lwt is therefore quite different from
  what we've been able to experiment with. One of [our other articles]
  suggests not using functors (too much), and although we can in fact
  abstract `Lwt.t' from `unit Lwt.t' (and even reduce it such that `type
  'a t =3D 'a') with the [HKP] trick, we opted for composition by hand.

  The problem relates to Lwt (and Async) and doesn't apply to Miou when
  it's possible to raise effects. However, from such a composition, a
  choice has been made to give Lwt the opportunity to do something else
  after `mmap'. We could, in other types of applications, make another
  choice on this precise question.


  [Lwt] <https://github.com/ocsigen/lwt>

  [Miou] <https://github.com/robur-coop/miou>

  [here] <https://blog.robur.coop/articles/lwt_pause.html>

  [our other articles]
  <https://blog.robur.coop/articles/tar-release.html>

  [HKP]
  <https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymor=
phism.pdf>


Carton
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Carton is a library that was originally developed for ocaml-git. It
  was internal to the project but we considered that the PACK format's
  field of application could be wider than that of Git. We decided to
  extract the project from `ocaml-git' and make it a library in its own
  right. Carton's objective remains fairly rudimentary. It consists of:
  =E2=80=A2 extract objects from a PACK file (whether or not these objects =
are
    Git objects)
  =E2=80=A2 generate an `*.idx' file from a PACK file in order to have quick
    access to the objects
  =E2=80=A2 verifying a PACK file such as `git verify-pack' does
  =E2=80=A2 and finally generate a PACK file from a list of objects

  Carton is a library and a tool that you can now use on your Git
  repositories. Here are a few examples of how to use `carton'. We'll
  start by cloning a repository to test Carton and go to the folder
  containing the PACK file.
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ opam install carton.1.0.0
  =E2=94=82 $ git clone https://github.com/ocaml/ocaml
  =E2=94=82 $ cd ocaml/.git/objects/pack/
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Carton can check a PACK file. Verifying means extracting all the
  objects in the file from memory and calculating their hash. This
  command is similar to `git verify-pack'.
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ carton verify pack-*.pack
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Carton can extract a specific object (commit, tree or blob) from a
  PACK file using its associated `*.idx' file and the object identifier
  (the hash of the commit, for example).
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ carton get pack-*.idx 89055b054eeec0c6c6b6118d6490b6792da7fef2
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Instead of extracting objects from a PACK file into memory, you can
  also extract them as files using `explode'.
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ mkdir loose
  =E2=94=82 $ carton explode 'loose/%s/%s' pack-*.pack > entries.pack
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Finally, Carton can create a new PACK file from a list of objects
  stored in files with make. It can also generate the `*.idx' file
  associated with the new PACK file. As we've just re-packaged the
  objects in the repository, we should find the same objects.
  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ carton make -n $(cat entries.pack | wc -l) -e entries.pack ne=
w.pack
  =E2=94=82 $ carton index new.pack
  =E2=94=82 $ carton get new.idx 89055b054eeec0c6c6b6118d6490b6792da7fef2
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Please note that the above actions, applied to `ocaml/ocaml', may take
  some time due to the history of this project.

  In the example above, we can see the extraction of a Git object, the
  extraction of all the objects in a PACK file and the creation of a new
  PACK file based on all the extracted objects.

  As you can see, creating a PACK file can take a long time. However,
  the advantage of the PACK file lies particularly in obtaining the
  objects and in the rate of compression of the PACK file:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 +--------+-------------+----------+-------+--------------+
  =E2=94=82 |        | pack-*.pack | new.pack | loose | loose.tar.gz |
  =E2=94=82 +--------+-------------+----------+-------+--------------+
  =E2=94=82 |   size |        355M |     648M |  8.3G |         1.8G |
  =E2=94=82 +--------+-------------+----------+-------+--------------+
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The PACK file is primarily designed to provide access to objects
  according to their identifiers. This access must be as fast as
  possible, even if the object is first compressed with decompress and
  can be compressed in the form of a patch with duff. Here are a few
  metrics to give you an idea.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 +--------------+-------------+----------+---------+
  =E2=94=82 |              | pack-*.pack | new.pack | loose   |
  =E2=94=82 +--------------+-------------+----------+---------+
  =E2=94=82 | git cat-file |     ~ 0.01s |      N/A |     N/A |
  =E2=94=82 +--------------+-------------+----------+---------+
  =E2=94=82 |   carton get |     ~ 0.20s |  ~ 0.30s |         |
  =E2=94=82 +--------------+-------------+----------+---------+
  =E2=94=82 |          cat |         N/A |      N/A | 0.0006s |
  =E2=94=82 +--------------+-------------+----------+---------+
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  What's important to note is the ability to have random access to
  objects simply by having the associated `*.idx' file, the production
  of which is quite efficient. This is not or hardly the case for
  compression formats such as GZip. And that's the whole point of PACK
  files, with an indexing method for almost immediate access to objects
  according to their identifiers and offering a very good compression
  ratio.

  *NOTE*: Carton does not compress the repository as well as Git. The
   main reason is that Git has some heuristics relating to Git objects
   that Carton does not implement - because Carton wishes to be
   independent of Git concepts. These heuristics apply in particular to
   the order in which we want to pack objects. In addition, Git prepares
   the ground so that the antecedents of a blob object (which is a file
   in your repository), for example, are the old versions of that same
   blob (and therefore the old versions of your file).

  In this context, the patch algorithm implemented by [duff] applies
  very well and gives very good results.

  For more details on these heuristics, you can read [this discussion]
  that serves as documentation.


[duff] <https://github.com/mirage/duff>

[this discussion]
<https://github.com/git/git/blob/master/Documentation/technical/pack-heuris=
tics.txt>

=E2=97=8A Carton & parallelism

  As always, our libraries are independent of schedulers. There is a
  version of Carton with Lwt and a version with Miou.

  Some of the tasks Carton performs, such as indexing, are highly
  parallelizable. In this case, the new derivation of Carton with Miou
  exists to take advantage of the latter's domain pool.

  It was also quite easy to parallelize the work on `carton index' and
  `carton verify'. Here are some other metrics which, thanks to OCaml 5
  and Miou, bring us closer to Git performance:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ hyperfine \
  =E2=94=82   -n git \
  =E2=94=82     "git verify-pack pack-03a3a824757ff4c225874557c36d44eefe3d7=
918.idx" \
  =E2=94=82   -n carton \
  =E2=94=82     "carton verify pack-03a3a824757ff4c225874557c36d44eefe3d791=
8.pack -q --threads 4"
  =E2=94=82 Benchmark 1: git
  =E2=94=82   Time (mean =C2=B1 =CF=83):     329.2 ms =C2=B1   0.9 ms    [U=
ser: 384.2 ms, System: 27.8 ms]
  =E2=94=82   Range (min =E2=80=A6 max):   327.7 ms =E2=80=A6 330.9 ms    1=
0 runs
  =E2=94=82=20=20
  =E2=94=82 Benchmark 2: carton
  =E2=94=82   Time (mean =C2=B1 =CF=83):     712.1 ms =C2=B1  10.9 ms    [U=
ser: 1111.8 ms, System: 1112.6 ms]
  =E2=94=82   Range (min =E2=80=A6 max):   695.4 ms =E2=80=A6 726.8 ms    1=
0 runs
  =E2=94=82=20=20
  =E2=94=82 Summary
  =E2=94=82   git ran
  =E2=94=82     2.16 =C2=B1 0.03 times faster than carton
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  *NOTE*: it may come as a surprise that Carton is 2 times slower than
   Git for analysing a PACK file, but it should be noted that almost the
   entire Carton implementation is in OCaml! At this stage, the idea is
   more to give you an idea, but we literally find ourselves comparing a
   Bugatti with a [Citro=C3=ABn 2CV].


  [Citro=C3=ABn 2CV] <https://www.youtube.com/watch?v=3DPkhibs9n7tE>


=E2=97=8A Carton & Emails

  Finally, this in-depth rewrite of Carton allows us to take advantage
  of the PACK format for storing our emails.

  In fact, we are experimenting with and developing an email solution
  within our cooperative, and email archiving is one of our
  objectives. Based on our experience of implementing Git, we thought
  that the PACK format could be a very interesting format for archiving
  emails.

  It combines two features, rapid access to emails and compression by
  patches, which are very interesting when it comes to handling
  emails. Finally, it also corresponds more or less to the way we use
  email:
  =E2=80=A2 we don't want to delete them (more often than not, we want to k=
eep
    them _ad vitam aeternam_)
  =E2=80=A2 and we don't modify them

  It therefore corresponds to a sort of read-only database. For more
  details on this aspect of Carton and the results of our experiments, I
  suggest you read our [recent article on our cooperative's blog].


  [recent article on our cooperative's blog]
  <https://blog.robur.coop/articles/2025-01-07-carton-and-cachet.html>


Opam repository archival, phase 2 - OCaml 4.08 is the lower bound
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/opam-repository-arcival-phase-2-ocaml-4-08-i=
s-the-lower-bound/15965/1>


Hannes Mehnert announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  It is my pleasure to announce below the list of opam packages that
  will move to the opam-repository-archive on February 1st 2025. In
  total there are 5855 opam files scheduled for being moved within 1218
  unique packages. This decreases the size of the opam-repository by
  roughly 20%.

  /Editor note: please follow the post link for the other articles with
  whole list./

  This list contains all packages that are not compatible with OCaml >=3D
  4.08, and packages that after archiving those are not installable due
  to missing dependencies. The "not installable" list has been generated
  by [archive-opam], and this may of course contain bugs.

  A smaller list contains a re-run of phase 1 (packages that are
  available: false) - where the availability was added between Dec 15th
  and now.

  If you find a package in the list and you=E2=80=99d like to retain it in =
the
  opam-repository, there are some options:

  =E2=80=A2 (a) you can install it on your system (`opam install'): this me=
ans
    there=E2=80=99s a bug in the archive-opam utility, please provide the
    package name and version in the [opam-repository-archive Phase 2
    PR], together with your opam version, OCaml version, and operating
    system;
  =E2=80=A2 (b) it is not installable: please figure out the reasoning (the
    =E2=80=9CReasoning=E2=80=9D may help you to find the root issue), and t=
ry to fix it
    yourself - if you=E2=80=99re unable to fix the root cause, please also
    comment in the [opam-repository-archive Phase 2 PR] with the package
    name and version.

  If you=E2=80=99ve any questions, please don=E2=80=99t hesitate to ask her=
e or on
  GitHub or via another communication channel.

  You can help further on the archiving process:

  =E2=80=A2 as mentioned in the last announcement please add the
    `x-maintenance-intent' to your packages (a good choice for a lot of
    packages is `x-maintenance-intent: [("latest")]' if you=E2=80=99re
    maintaining the latest version only) - this will be considered in
    Phase 3 (March 1st 2025);
  =E2=80=A2 if you are the author or maintainer of a package that is no lon=
ger
    useful or maintained, you can as well mark your opam files in the
    opam-repository with `x-maintenance-intent: [("none")]' (this will
    be taken into account in Phase 3 - March 1st 2025);
  =E2=80=A2 if you flagged your preliminary releases with `flags:
    avoid-version', and they can now be removed (e.g. since a stable
    version has been released), please open a pull request to replace
    the `avoid-version' with `deprecated'.

  Please note that the next Phase will be announced on February 15th
  with all packages where the `x-maintenance-intent' does not match, and
  which do not have any reverse dependencies - archiving is scheduled
  for March 1st.

  To keep track of the announcements, please look at the
  [opam-repository tag].

  A big thanks to the OCaml Software Foundation for funding the
  opam-repository archival project.


[archive-opam] <https://github.com/hannesm/archive-opam>

[opam-repository-archive Phase 2 PR]
<https://github.com/ocaml/opam-repository-archive/pull/6>

[opam-repository tag] <https://discuss.ocaml.org/tag/opam-repository>


Ocaml-posix 2.1.0 released!
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ocaml-posix-2-1-0-released/15974/1>


Romain Beauxis announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi all!

  Version `2.1.0' of `ocaml-posix' has been released!

  =E2=80=A2 Repo: <https://github.com/savonet/ocaml-posix>
  =E2=80=A2 API doc: [ocaml-posix]

  While it was long overdue, this version only include minor changes,
  along with the addition of `posix-math2'.

  These packages are intended to provide a consistent, extensive set of
  bindings for the various POSIX APIs to be used with [ocaml-ctypes]
  when building bindings to C libraries that require the use of these
  APIs.

  While working on OCaml projects, it is common to have to interface
  with APIs derived from the POSIX specifications, `getaddrinfo',
  `uname' etc.

  The core OCaml library provides their own version of these APIs but:
  =E2=80=A2 They only cover parts of it
  =E2=80=A2 They wrap some native types such as `socketaddr' into custom, o=
paque
    OCaml types, making it impossible to re-use, for instance when using
    a C library API requiring a POSIX `sockaddr'.

  Thus, having a large, consistent set of bindings for these APIs that
  reflect the actual C types, structures and etc greatly improves the
  usability of the language and ecosystem as a whole by making it
  possible to interface it with a large set of C libraries in a reusable
  way.

  The project has been mostly stable for a couple of years (and so have
  the POSIX standards), but could use some more hands if there is more
  need in the community to extend the set of POSIX APIs supported by the
  language.


[ocaml-posix] <https://www.liquidsoap.info/ocaml-posix/>

[ocaml-ctypes] <https://github.com/yallop/ocaml-ctypes>


Release of ocaml-eglot 1.0.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-release-of-ocaml-eglot-1-0-0/15978/1>


Xavier Van de Woestyne announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi everyone!

  We (at [Tarides]) are _particularly pleased_ to announce the first
  release of [OCaml-eglot], An overlay on [Eglot] (the _built-in_ [LSP]
  client for Emacs) for editing OCaml!

  =E2=80=A2 [Github repository]
  =E2=80=A2 [Package on MELPA]
  =E2=80=A2 [Features list]
  =E2=80=A2 [Installation procedure]
  =E2=80=A2 [Comparison table with Merlin]


[Tarides] <https://tarides.com/>

[OCaml-eglot] <https://github.com/tarides/ocaml-eglot>

[Eglot] <https://www.gnu.org/software/emacs/manual/html_node/eglot/>

[LSP] <https://microsoft.github.io/language-server-protocol/>

[Github repository] <https://github.com/tarides/ocaml-eglot>

[Package on MELPA] <https://melpa.org/#/ocaml-eglot>

[Features list]
<https://github.com/tarides/ocaml-eglot?tab=3Dreadme-ov-file#features>

[Installation procedure]
<https://github.com/tarides/ocaml-eglot?tab=3Dreadme-ov-file#installation>

[Comparison table with Merlin]
<https://github.com/tarides/ocaml-eglot?tab=3Dreadme-ov-file#comparison-of-=
merlin-and-ocaml-eglot-commands>

More precisely
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Typically, developers who use Emacs (`43.7%' in 2022, [according to
  the OCaml User Survey]) use a major mode (such as the venerable
  [caml-mode], or [tuareg]) and [Merlin] to provide IDE services. In
  2016, Microsoft has released LSP, a generic protocol for interacting
  with editors which, at first, was only used by Visual Studio Code,
  but, since 2020, has really become the norm. De-facto, following the
  LSP standard gives very good _default_ (completion, jump to
  definition, =E2=80=A6). OCaml has excellent LSP ([ocaml-lsp-server]) supp=
ort,
  which is used in particular by the [OCaml platform for Visual Studio
  Code].

  With the aim of reducing maintenance for all possible editors, going
  LSP seems to be a good direction. A pertinent choice, especially since
  the major historical editors (such as Vim and Emacs) offer, in their
  recent versions, LSP clients _out of the box_. However, in the same
  way that the OCaml client for VSCode integrates *OCaml-specific*
  features, it was necessary to support these features on the Emacs side
  (and in the future, Vim) to compete with Merlin, which is the goal of
  `ocaml-eglot', to *provide a tailored development experience for OCaml
  code editing*!


[according to the OCaml User Survey]
<https://ocaml-sf.org/docs/2022/ocaml-user-survey-2022.pdf>

[caml-mode] <https://github.com/ocaml/caml-mode>

[tuareg] <https://github.com/ocaml/tuareg>

[Merlin] <https://github.com/ocaml/merlin>

[ocaml-lsp-server] <https://ocaml.org/p/ocaml-lsp-server/latest>

[OCaml platform for Visual Studio Code]
<https://marketplace.visualstudio.com/items?itemName=3Docamllabs.ocaml-plat=
form>


User feedback and future development
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C

  We've just released the first version of OCaml-eglot, and, much like
  the various editor-related projects (Merlin, Vscode-ocaml-platform,
  Merlin for Emacs, Merlin for Vim), *we're more than open to community
  collaboration, user feedback*, in order to provide the best possible
  user experience!

  _Happy Hacking_!


Semgrep is hiring to help scale their static analysis engine
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/job-remote-semgrep-is-hiring-to-help-scale-t=
heir-static-analysis-engine/15982/1>


Emma Jin announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

  Semgrep is an application security company focused on detecting and
  remediating vulnerabilities. The static analysis engine is primarily
  written in OCaml. We're looking for a software engineer to help us
  support scanning larger repositories and add many more users. The
  ideal candidate has owned a critical tool, worked on an OCaml project,
  and is interested in static analysis.

  If this sounds interesting to you, see our job posting at
  <https://job-boards.greenhouse.io/semgrep/jobs/4589941007>! Let me
  know if you have any questions!


Dune dev meeting
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-dune-dev-meeting/14994/21>


Etienne Marais announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi Dune enthusiasts :camel:,

  We will hold the regular Dune Dev Meeting on *Wednesday, January, 22nd
  at 16:00* CET. As usual, the session will be one hour long.

  Whether you are a maintainer, a regular contributor, a new joiner or
  just curious, you are welcome to join: these discussions are opened!
  The goal of these meetings is to provide a place to discuss the
  ongoing work together and synchronize with the Dune developers!


:calendar: Agenda
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C

  The agenda is available on the[ meeting dedicated page]. Feel free to
  ask if you want to add more items in it.


[ meeting dedicated page]
<https://github.com/ocaml/dune/wiki/dev-meeting-2025-01-22>


:computer: Links
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Meeting link: [zoom]
  =E2=80=A2 Calendar event: [google calendar]
  =E2=80=A2 Wiki with information and previous notes: [GitHub Wiki]


[zoom]
<https://us06web.zoom.us/j/85096877776?pwd=3DcWNhU1dHQ1ZNSjZuOUZCQ0h2by9Udz=
09>

[google calendar]
<https://calendar.google.com/calendar/embed?src=3Dc_5cd698df6784e385b1cdcdc=
1dbca18c061faa96959a04781566d304dc9ec7319%40group.calendar.google.com>

[GitHub Wiki] <https://github.com/ocaml/dune/wiki#dev-meetings>


Tarides: 2024 in Review
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/tarides-2024-in-review/15990/1>


Thomas Gazagnaire announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80

  At [Tarides], we believe in making OCaml a mainstream programming
  language by improving its tooling and integration with other
  successful ecosystems. In 2024, we focused our efforts on initiatives
  to advance this vision by addressing key technical challenges and
  engaging with the community to build a stronger foundation for OCaml=E2=
=80=99s
  growth. This report details our work, the rationale behind our
  choices, and the impact achieved. We are very interested in getting
  your feedback: [please get in touch] (or respond to this thread!) if
  you believe we are going in the right direction.

  /__TL;DR__ =E2=80=93 In 2024, Tarides focused on removing adoption fricti=
on
  with better documentation and tools; and on improving adoption via the
  integration with three key thriving ecosystems: multicore programming,
  web development, and Windows support. Updates to [ocaml.org] improved
  onboarding and documentation, while the [Dune Developer Preview]
  simplified workflows with integrated package management. Merlin added
  support for [project-wide reference support] and [odoc 3], which is
  about to be released. OCaml 5.3 marked the first stable multicore
  release, and `js_of_ocaml' achieved up to 8x performance boosts in
  real-world commercial applications thanks to added support for
  WebAssembly. On Windows, opam 2.2 brought full compatibility and CI
  testing to all Tier 1 platforms on `opam-repository', slowly moving
  community packages towards reliable and better support for
  Windows. Tarides=E2=80=99 community support included organising the first=
 [FUN
  OCaml conference], many local meetups, and two rounds of Outreachy
  internships./


[Tarides] <https://tarides.com>

[please get in touch] <https://tarides.com/contact/>

[ocaml.org] <http://ocaml.org>

[Dune Developer Preview] <https://preview.dune.build/>

[project-wide reference support]
<https://tarides.com/blog/2024-08-28-project-wide-occurrences-a-new-navigat=
ion-feature-for-ocaml-5-2-users/>

[odoc 3] <https://discuss.ocaml.org/t/odoc-3-0-planning/14360>

[FUN OCaml conference] <https://fun-ocaml.com/>

Better Tools: Toward a 1-Click Installation of OCaml
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C

  Our primary effort in 2024 was to continue delivering on the [OCaml
  Platform roadmap] published last year.  We focused on making it easier
  to get started with OCaml by removing friction in the installation and
  onboarding process. Our priorities were guided by the latest [OCSF
  User Survey], direct user interviews, and [feedback] gathered from the
  OCaml community. Updates from Tarides and other OCaml Platform
  maintainers were regularly shared in the [OCaml Platform Newsletter].


[OCaml Platform roadmap] <https://ocaml.org/tools/platform-roadmap>

[OCSF User Survey]
<https://discuss.ocaml.org/t/ann-ocaml-user-survey-2023/13469>

[feedback] <https://discuss.ocaml.org/tag/user-feedback>

[OCaml Platform Newsletter]
<https://discuss.ocaml.org/tag/platform-newsletter>

=E2=97=8A OCaml.org

  OCaml.org is the main entry point for new users of OCaml. Tarides
  engineers are key members of the OCaml.org team. Using
  [privacy-preserving analytics], the team tracked visitor behaviour to
  identify key areas for improvement. This led to a redesign of the
  [installation page], simplifying the setup process, and a revamp of
  the [guided tour of OCaml] to better introduce the language. Both
  pages saw significant traffic increases compared to 2023, with the
  installation page recording 69k visits, the tour reaching 65k visits
  and a very encouraging total number of visits increasing by +33%
  between Q3 and Q4 2024

  <https://us1.discourse-cdn.com/flex020/uploads/ocaml/original/2X/1/137aea=
463013b31666bcade145a0067f2c1d6b82.png>

  Efforts to improve user experience included a satisfaction survey
  where 75% of respondents rated their experience positively, compared
  to 17% for the previous version of the site. User testing sessions
  with 21 participants provided further actionable insights, and these
  findings informed updates to the platform. The redesign of OCaml.org
  community sections was completed using this feedback. It introduced
  several new features: a new [Community landing page], an [academic
  institutions page] with course listings, and an [industrial users
  showcase]. The team also implemented an automated [event announcement]
  system to inform the community of ongoing activities.

  Progress and updates were regularly shared through the [OCaml.org
  newsletters], keeping the community informed about
  developments. Looking ahead, the team will continue refining the
  platform by addressing feedback, expanding resources, and monitoring
  impact through analytics to support both new and experienced OCaml
  users. Lastly, the infrastructure they build is starting to be used by
  other communities: [Rocq] just announced their brand new website,
  built using the same codebase as ocaml.org!


  [privacy-preserving analytics] <https://plausible.ci.dev/ocaml.org>

  [installation page] <https://ocaml.org/install>

  [guided tour of OCaml] <https://ocaml.org/docs/tour-of-ocaml>

  [Community landing page] <https://ocaml.org/community>

  [academic institutions page] <https://ocaml.org/academic-users>

  [industrial users showcase] <https://ocaml.org/industrial-users>

  [event announcement] <https://ocaml.org/events>

  [OCaml.org newsletters]
  <https://discuss.ocaml.org/tag/ocamlorg-newsletter>

  [Rocq] <https://rocq-prover.org/>


=E2=97=8A Dune as the Default Frontend of the OCaml Platform

  One of the main goals of the OCaml Platform is to make it easier for
  users=E2=80=94especially newcomers=E2=80=94to adopt OCaml and build proje=
cts with
  minimal friction. A critical step toward this goal is having a single
  CLI to serve as the frontend for the entire OCaml development
  experience (codenamed [Bob] in the past). This year, we made
  significant progress in that direction with the release of the [Dune
  Developer Preview].

  Setting up an OCaml project currently requires multiple tools: `opam'
  for package management, `dune' for builds, and additional
  installations for tools like OCamlFormat or Odoc. While powerful, this
  fragmented workflow can make onboarding daunting for new users. The
  Dune Developer Preview consolidates these steps under a single CLI,
  making OCaml more approachable. With this preview, setting up and
  building a project is as simple as:

  1. `dune pkg lock' to lock the dependencies.
  2. `dune build' to fetch the dependencies and compile the project.

  This effort is also driving broader ecosystem improvements. The
  current OCaml compiler relies on fixed installation paths, making it
  difficult to cache and reuse across environments, so it cannot be
  shared efficiently between projects. To address this, we are working
  on making the compiler relocatable ([ongoing work]). This change will
  enable compiler caching, which means faster project startup times and
  fewer rebuilds in CI. As part of this effort, we also [maintain]
  patches to core OCaml projects to make them relocatable =E2=80=93 and we
  worked with upstream to merge (like [for ocamlfind]). Tarides
  engineers also continued to maintain Dune and other key Platform
  projects, ensuring stability and progress. This included organising
  and participating in regular development meetings (for [Dune], [opam],
  [Merlin], [ppxlib], etc.)  to prioritise community needs and align
  efforts across tools like Dune and opam to avoid overlapping
  functionality.

  The Dune Developer Preview is an iterative experiment. Early user
  feedback has been promising (the Preview=E2=80=99s NPS went from +9 in Q3=
 2024
  to +27 in Q4 2024), and future updates will refine the experience
  further. We aim to ensure that experimental features in the Preview
  are upstreamed into stable releases once thoroughly tested. For
  instance, the package management feature is already in Dune 3.17. We
  will announce and document it more widely when we believe it is mature
  enough for broader adoption.


  [Bob] <https://speakerdeck.com/avsm/ocaml-platform-2017?slide=3D34>

  [Dune Developer Preview] <https://preview.dune.build/>

  [ongoing work] <https://hackmd.io/@dra27/ry56XtKii>

  [maintain]
  <https://github.com/ocaml-dune/opam-overlays/tree/main/packages>

  [for ocamlfind] <https://github.com/ocaml/ocamlfind/pull/72>

  [Dune] <https://discuss.ocaml.org/tag/dev-meetings>

  [opam] <https://github.com/ocaml/opam/wiki/2024-Developer-Meetings>

  [Merlin]
  <https://github.com/ocaml/merlin/wiki/Public-dev%E2%80%90meetings>

  [ppxlib] <https://github.com/ocaml-ppx/ppxlib/wiki#dev-meetings>


=E2=97=8A Editors

  In 2024, Tarides focused on improving editor integration to lower
  barriers for new OCaml developers and enhance the experience for
  existing users. Editors are the primary way developers interact with
  programming languages, making seamless integration essential for
  adoption. With more than [73% of developers using Visual Studio Code
  (VS Code)], VS Code is particularly important to support, especially
  for new developers and those transitioning to OCaml. As part of this
  effort, Tarides wrote and maintained the [official VS Code plugin for
  OCaml,] prioritising feature development for this editor. We also
  support other popular editors like Emacs and Vim=E2=80=94used by many Tar=
ides
  engineers=E2=80=94on a best-effort basis. Improvements to [OCaml-LSP] and
  [Merlin], both maintained by Tarides, benefit all supported editors,
  ensuring a consistent and productive development experience.

  <https://us1.discourse-cdn.com/flex020/uploads/ocaml/original/2X/9/9b6375=
4a94bc853f608e630dd9908097570a33ac.png>

  While several plugins for OCaml exist ([OCaml and Reason IDE]=E2=80=93128k
  installs, [Hackwaly]=E2=80=9390k installs), our [OCaml VS Code plugin] =
=E2=80=93now
  with over 208k downloads=E2=80=93 is a key entry point for developers ado=
pting
  OCaml in 2024. This year, we added integration with the Dune Developer
  Preview, allowing users to leverage Dune's package management and
  tooling directly from the editor. Features such as real-time
  diagnostics, autocompletion, and the ability to fetch dependencies and
  build projects without leaving VS Code simplify development and make
  OCaml more accessible for newcomers.

  The standout update in 2024 was the addition of [project-wide
  reference support], a long-requested feature from the OCaml community
  and a top priority for commercial developers. This feature allows
  users to locate all occurrences of a term across an entire codebase,
  making navigation and refactoring significantly easier=E2=80=94especially=
 in
  large projects. Delivering this feature required coordinated updates
  across the ecosystem, including changes to the OCaml compiler, Merlin,
  OCaml LSP, Dune, and related tools. The impact is clear: faster
  navigation, reduced cognitive overhead, and more efficient workflows
  when working with complex projects.

  Additional improvements included support for new Language Server
  Protocol features, such as `signature_help' and `inlay_hint', which
  enhance code readability and provide more contextual
  information. These updates enabled the introduction of new commands,
  such as the "Destruct" command. This [little-known but powerful
  feature] automatically expands a variable into a pattern-matching
  expression corresponding to its inferred type, streamlining tasks that
  would otherwise be tedious.

  <https://tarides.com/blog/images/2024-05-21.merlin-destruct/merlin-destru=
ct-1~kHA8_iC67tU-2us0hsjbhQ.gif>


  [73% of developers using Visual Studio Code (VS Code)]
  <https://survey.stackoverflow.co/2024/technology#1-integrated-development=
-environment>

  [official VS Code plugin for OCaml,]
  <https://marketplace.visualstudio.com/items?itemName=3Docamllabs.ocaml-pl=
atform>

  [OCaml-LSP] <https://github.com/ocaml/ocaml-lsp>

  [Merlin] <https://github.com/ocaml/merlin>

  [OCaml and Reason IDE]
  <https://marketplace.visualstudio.com/items?itemName=3Dfreebroccolo.reaso=
nml>

  [Hackwaly]
  <https://marketplace.visualstudio.com/items?itemName=3Dhackwaly.ocaml>

  [OCaml VS Code plugin]
  <https://marketplace.visualstudio.com/items?itemName=3Docamllabs.ocaml-pl=
atform>

  [project-wide reference support]
  <https://tarides.com/blog/2024-08-28-project-wide-occurrences-a-new-navig=
ation-feature-for-ocaml-5-2-users/>

  [little-known but powerful feature]
  <https://tarides.com/blog/2024-05-29-effective-ml-through-merlin-s-destru=
ct-command/>


=E2=97=8A Documentation

  Documentation was identified as the number one pain point in the
  latest [OCSF survey]. It is a critical step in the OCaml developer
  journey, particularly after setting up the language and
  editor. Tarides prioritised improving `odoc' to make it easier for
  developers to find information, learn the language, and navigate the
  ecosystem effectively. High-quality documentation and tools to help
  developers get "unstuck" are essential to reducing friction and
  ensuring a smooth adoption experience.

  Tarides is the primary contributor and maintainer of [`odoc'], OCaml=E2=
=80=99s
  main documentation tool. In preparation for the [odoc 3 release], our
  team introduced two significant updates. First, the [`odoc' Search
  Engine] was integrated, allowing developers to search directly within
  OCaml documentation via the [Learn page]. Second, the [`odoc'
  Cheatsheet] provides a concise reference for creating and consuming
  OCaml documentation. We would like to believe that these updates,
  deployed on ocaml.org, were the main cause of a **45% increase in
  package documentation usage** on [https://ocaml.org/pkg/] in Q4 2024!

  <https://us1.discourse-cdn.com/flex020/uploads/ocaml/original/2X/a/a974b3=
0576399d84e1b26936b4b31bdf364e76db.png>

  Another area where developers often get stuck is debugging programs
  that don=E2=80=99t work as expected. Alongside reading documentation, live
  debuggers are crucial for understanding program issues. Tarides worked
  to improve native debugging for OCaml, focusing on macOS, where LLDB
  is the only supported debugger. Key progress included a [name mangling
  fix] to improve symbol resolution, restoring ARM64 backtraces, and
  introducing Python shims for code sharing between LLDB and GDB.

  OCaml=E2=80=99s error messages remain a common pain point, particularly f=
or
  syntax errors. Unlike [Rust=E2=80=99s error index], OCaml does not (yet!)=
 have
  a centralised repository of error explanations. Instead, we are
  focused on making error messages more self-explanatory. This requires
  developing new tools, such as [`lrgrep'], a domain-specific language
  for analysing grammars built with Menhir. `lrgrep' enables concise
  definitions of error cases, making it possible to identify and address
  specific patterns in the parser more effectively. This provides a
  practical way to improve error messages without requiring changes to
  the compiler. In December 2024, @let-def successfully defended his PhD
  (a collaboration between Inria and Tarides) on this topic, so expect
  upstreaming work to start soon.


  [OCSF survey]
  <https://discuss.ocaml.org/t/ann-ocaml-user-survey-2023/13469>

  [`odoc'] <https://github.com/ocaml/odoc>

  [odoc 3 release] <https://discuss.ocaml.org/t/odoc-3-0-planning/14360>

  [`odoc' Search Engine]
  <https://tarides.com/blog/2024-02-28-two-major-improvements-in-odoc-intro=
ducing-search-engine-integration/>

  [Learn page] <https://ocaml.org/docs>

  [`odoc' Cheatsheet]
  <https://tarides.com/blog/2024-09-17-introducing-the-odoc-cheatsheet-your=
-handy-guide-to-ocaml-documentation/>

  [https://ocaml.org/pkg/] <https://ocaml.org/pkg/>

  [name mangling fix] <https://github.com/ocaml/ocull/pull/13050>

  [Rust=E2=80=99s error index]
  <https://doc.rust-lang.org/error_codes/error-index.html>

  [`lrgrep'] <https://github.com/let-def/lrgrep>


=E2=97=8A OCaml Package Ecosystem

  The last piece of friction we aimed to remove in 2024 was ensuring
  that users wouldn=E2=80=99t encounter errors when installing a package fr=
om
  the community. This required catching issues early=E2=80=94before package=
s are
  accepted into `opam-repository' and made available to the broader
  ecosystem. To achieve this, Tarides has built and maintained extensive
  CI infrastructure, developed tools to empower contributors, and guided
  package authors to uphold the high quality of the OCaml package
  ecosystem.

  In 2024, Tarides=E2=80=99 CI infrastructure supported the OCaml community=
 at
  scale, handling approximately **20 million jobs on 68 machines
  covering 5 hardware architectures**. This infrastructure continuously
  tested packages to ensure compatibility across a variety of platforms
  and configurations, including OCaml=E2=80=99s Tier 1 platforms: x86, ARM,
  RISC-V, s390x, and Power. It played a critical role during major
  events, such as new OCaml releases, by validating the ecosystem=E2=80=99s
  readiness and catching regressions before they impacted
  users. Additionally, this infrastructure supported daily submissions
  to `opam-repository', enabling contributors to identify and resolve
  issues early, reducing downstream problems. To improve transparency
  and accessibility, we introduced a CI pipeline that automates
  configuration updates, ensuring seamless deployments and allowing
  external contributors to propose and apply changes independently.

  In addition to maintaining the infrastructure, Tarides developed and
  maintained the CI framework running on top of it. A major focus in
  2024 was making CI checks available as standalone CLI tools
  distributed via `opam'. These tools enable package authors to run
  checks locally, empowering them to catch issues before submitting
  their packages to `opam-repository'. This approach reduces reliance on
  central infrastructure and allows developers to work more
  efficiently. The CLI tools are also compatible with GitHub Actions,
  allowing contributors to integrate tests into their own workflows. To
  complement these efforts, we enhanced `opam-repo-ci', which remains an
  essential safety net for packages entering the repository. Integration
  tests for linting and reverse dependencies were introduced, enabling
  more robust regression detection and improving the reliability of the
  ecosystem.

  To uphold the high standards of the OCaml ecosystem, every package
  submission to `opam-repository' is reviewed and validated to ensure it
  meets quality criteria. This gatekeeping process minimises errors
  users might encounter when installing community packages, enhancing
  trust in the ecosystem. In 2024, Tarides continued to be actively
  [involved] in maintaining the repository, ensuring its smooth
  operation. We also worked to guide new package authors by updating the
  [contributing guide] and creating a detailed [wiki] with actionable
  instructions for adding and maintaining packages. These resources were
  [announced on Discuss] to reach the community and simplify the process
  for new contributors, improving the overall quality of submissions.


  [involved]
  <https://github.com/ocaml/opam-repository/blob/master/governance/README.m=
d#maintenance>

  [contributing guide]
  <https://github.com/ocaml/opam-repository/blob/master/CONTRIBUTING.md>

  [wiki] <https://github.com/ocaml/opam-repository/wiki>

  [announced on Discuss]
  <https://discuss.ocaml.org/t/opam-repository-updated-documentation-retire=
ment-and-call-for-maintainers/14325>


Playing Better with the Larger Ecosystem
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

=E2=97=8A Concurrent & Parallel Programming in OCaml

        _"Shared-memory multiprocessors have never really 'taken
        off', at least in the general public. For large parallel
        computations, clusters (distributed-memory systems) are
        the norm. For desktop use, monoprocessors are plenty
        fast."_ =E2=80=93 [Xavier Leroy, November 2002]

  Twenty+ years after this statement, processors are multicore by
  default, and OCaml has adapted to this reality. Thanks to the combined
  efforts of the OCaml Labs and Tarides team, the OCaml 5.x series
  introduced multicore support after [a decade of research and
  experimentation.] While this was a landmark achievement, the path to
  making multicore OCaml stable, performant, and user-friendly has
  required significant collaboration and continued work. In 2024,
  Tarides remained focused on meeting the needs of the broader community
  and commercial users.

  OCaml 5.3 (released last week) was an important milestone in this
  journey. With companies such as [Routine], [Hyper], and [Asemio]
  adopting OCaml 5.x, and advanced experimentation ongoing at Jane
  Street, Tezos, Semgrep, and others, OCaml 5.3 is increasingly seen as
  the first =E2=80=9Cstable=E2=80=9D release of the multicore series. While=
 some
  [performance issues] remain in specific parts of the runtime, we are
  working closely with the community to address them in OCaml
  5.4. Tarides contributed extensively to the [5.2] and [5.3] releases
  by directly contributing to **nearly two-thirds of the merged pull
  requests**. Since Multicore OCaml was incorporated upstream in 2023,
  we have been continuously involved in the compiler and language
  evolution in collaboration with Inria and the broader OCaml ecosystem.

  Developing correct concurrent and parallel software is inherently
  challenging, and this applies as much to the runtime as to
  applications built on it. In 2024, we focused on advanced testing
  tools to help identify and address subtle issues in OCaml=E2=80=99s runti=
me
  and libraries. The [property-based test suite] reached maturity this
  year, uncovering over 40 critical issues, with 28 resolved by Tarides
  engineers. Trusted to detect subtle bugs, such as [issues with
  orphaned ephemerons], the suite has become an integral part of OCaml=E2=
=80=99s
  development workflow. Importantly, it is accessible to contributors
  without deep expertise in multicore programming, ensuring any changes
  in the compiler or the runtime do not introduce subtle concurrency
  bugs.

  <https://tarides.com/blog/images/false-alarms-plot-errors-only.png>

  Another critical effort was extending ThreadSanitizer (TSAN) support
  to most Tier 1 platforms and [applying it extensively to find and fix
  data races in the runtime]. This work has improved the safety and
  reliability of OCaml=E2=80=99s multicore features and is now part of the
  standard testing process, further ensuring the robustness of the
  runtime.

  Beyond testing, we also worked to enhance library support for
  multicore programming. The release of the [Saturn library] introduced
  lock-free data structures tailored for OCaml 5.x. To validate these
  structures, we developed [DSCheck], a static analyser for verifying
  lock-free algorithms. These tools, along with Saturn itself, provide
  developers with reliable building blocks for scalable multicore
  applications.

  Another promising development in 2024 was the introduction of the
  [Picos] framework. Picos aims to provide a low-level foundation for
  concurrency, simplifying interoperability between libraries like Eio,
  Moonpool, Miou, Riot, Affect, etc. Picos offers a simple,
  unopinionated, and safe abstraction layer for concurrency. We believe
  it can potentially standardise concurrency patterns in OCaml, but we
  are not there yet. Discussions are underway to integrate parts of
  Picos into higher-level libraries and, eventually, the standard
  library. We still have a long way to go, and getting feedback from
  people who actively tried it in production settings would be very
  helpful!


  [Xavier Leroy, November 2002]
  <https://sympa.inria.fr/sympa/arc/caml-list/2002-11/msg00274.html>

  [a decade of research and experimentation.]
  <https://tarides.com/blog/2023-03-02-the-journey-to-ocaml-multicore-bring=
ing-big-ideas-to-life/>

  [Routine] <https://routine.co/>

  [Hyper] <https://hyper.systems>

  [Asemio]
  <https://tarides.com/blog/2024-09-19-eio-from-a-user-s-perspective-an-int=
erview-with-simon-grondin/>

  [performance issues] <https://github.com/ocaml/ocaml/issues/13733>

  [5.2]
  <https://tarides.com/blog/2024-05-15-the-ocaml-5-2-release-features-and-f=
ixes/>

  [5.3]
  <https://tarides.com/blog/2025-01-09-ocaml-5-3-features-and-fixes/>

  [property-based test suite]
  <https://github.com/ocaml-multicore/multicoretests>

  [issues with orphaned ephemerons]
  <https://github.com/ocaml/ocaml/pull/13580#issuecomment-2478454501>

  [applying it extensively to find and fix data races in the runtime]
  <https://tarides.com/blog/2024-08-21-how-tsan-makes-ocaml-better-data-rac=
es-caught-and-fixed/>

  [Saturn library]
  <https://tarides.com/blog/2024-12-11-saturn-1-0-data-structures-for-ocaml=
-multicore/>

  [DSCheck]
  <https://tarides.com/blog/2024-04-10-multicore-testing-tools-dscheck-pt-2=
/>

  [Picos] <https://ocaml-multicore.github.io/picos/doc/picos/index.html>


=E2=97=8A Web

  Web development remains one of the most visible and impactful domains
  for programming languages; [JavaScript, HTML, and CSS are the most
  popular technologies] in 2024. For OCaml to grow, it must integrate
  well with this ecosystem. Fortunately, the OCaml community has already
  built a solid foundation for web development!

  On the frontend side, in 2024, Tarides focused on strengthening key
  tools like [`js_of_ocaml'] by expanding its support for WebAssembly
  (Wasm). `js_of_ocaml' (JSOO) has long been the backbone of OCaml=E2=80=99=
s web
  ecosystem, enabling developers to compile OCaml bytecode into
  JavaScript. This year, we [merged Wasm support back into JSOO],
  unifying the toolchain and simplifying adoption for developers. The
  performance gain of Wasm has been very impressive so far:
  CPU-intensive applications in commercial settings have seen **2x to 8x
  speedups** using Wasm compared to traditional JSOO. We also worked on
  better support for effect handlers in `js_of_ocaml' to ensure
  applications built with OCaml 5 can run as fast in the browser as they
  used to with OCaml 4.

  On the backend side, Tarides maintained and contributed to Dream, a
  lightweight and flexible web framework. Dream powers projects like
  [our own website] and the [MirageOS website], where we maintain a fork
  to make Dream and MirageOS work well together. Additionally, in 2024,
  we enhanced `cohttp', adding [proxy support] to address modern HTTP
  requirements.

  While Tarides focused on JSOO, `wasm_of_ocaml', Dream, and Cohttp, the
  broader community made significant strides elsewhere. Tools like
  Melange offer an alternative for compiling OCaml to JavaScript, and
  frameworks like Ocsigen, which integrates backend and frontend
  programming, continue to push the boundaries of what=E2=80=99s possible w=
ith
  OCaml on the web. Notably, Tarides will build on this momentum in 2025
  through a [grant] to improve direct-style programming for Ocsigen.


  [JavaScript, HTML, and CSS are the most popular technologies]
  <https://survey.stackoverflow.co/2024/technology#most-popular-technologie=
s-language>

  [`js_of_ocaml'] <https://github.com/ocsigen/js_of_ocaml>

  [merged Wasm support back into JSOO]
  <https://github.com/ocsigen/js_of_ocaml/pull/1494>

  [our own website] <https://tarides.com/>

  [MirageOS website] <https://mirageos.org>

  [proxy support] <https://github.com/mirage/ocaml-cohttp/pull/847>

  [grant] <https://nlnet.nl/project/OCAML-directstyle/>


=E2=97=8A Windows

  Windows is the most widely used operating system, making first-class
  support for it critical to OCaml=E2=80=99s growth. In 2024, **31% of visi=
tors
  to [ocaml.org]** accessed the site from Windows, yet the platform=E2=80=
=99s
  support historically lagged behind Linux and macOS. This gap created
  barriers for both newcomers and commercial users. We saw these
  challenges firsthand, with Outreachy interns struggling to get started
  due to tooling issues, and commercial users reporting difficulties
  with workflow reliability and compilation speed.

  To address these pain points, Tarides, in collaboration with the OCaml
  community, launched the [Windows Working Group]. A key milestone that
  our team contributed to was the release this year of **opam 2.2**,
  three years after its predecessor. This release made the upstream
  `opam-repository' fully compatible with Windows for the first time,
  removing the need for a separate repository and providing Windows
  developers access to the same ecosystem as Linux and macOS users. The
  impact has been clear: feedback on the updated installation workflow
  has been overwhelmingly positive, with developers reporting that it
  "just works." The [install page] for Windows is now significantly
  shorter and simpler!

  In the OCaml 5.3 release, Tarides restored the MSVC Windows port,
  ensuring native compatibility and improving performance for Windows
  users. To further support the ecosystem, Tarides added Windows
  machines to the opam infrastructure, enabling automated testing for
  Windows compatibility on every new package submitted to opam. This has
  already started to improve package support, with ongoing fixes from
  Tarides and the community. The results are publicly visible at
  [windows.check.ci.dev], which we run on our infrastructure, providing
  transparency and a way to track progress on the status of our
  ecosystem. While package support is not yet on par with other
  platforms, we believe that the foundations laid in 2024=E2=80=94simplified
  installation, improved tooling, and continuous package
  testing=E2=80=94represent a significant step forward.


  [ocaml.org] <https://ocaml.org>

  [Windows Working Group]
  <https://tarides.com/blog/2024-05-22-launching-the-first-class-windows-pr=
oject/>

  [install page] <https://ocaml.org/install>

  [windows.check.ci.dev] <https://windows.check.ci.dev/>


Community Engagement and Outreach
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  In 2024, Tarides contributed to building a stronger OCaml community
  through events, internships, and support for foundational
  projects. The creation of [FUN OCaml 2024] in Berlin was the first
  dedicated OCaml-only event for a long time (similar to how the OCaml
  Workshop was separated from ICFP in the past). Over 75 participants
  joined for two days of talks, workshops, and hacking, and the event
  has already reached [5k+ views on YouTube]. Tarides also co-chaired
  the OCaml Workshop at [ICFP 2024] in Milan, bringing together
  contributors from academia, industry, and open-source
  communities. These events brought together two different kinds of
  OCaml developers (with some overlap), bringing an interesting energy
  to our community.

  To expand local community involvement, Tarides organised OCaml hacking
  meetups in [Manila] and [Chennai]. To make it easier for others to
  host similar events, we curated a list of interesting hacking issues
  from past [Cambridge sessions], now available on [GitHub].

  As part of the Outreachy program, Tarides supported two rounds of
  internships in 2024, with results published on [Discuss] and
  [watch.ocaml.org]. These internships not only provided great
  contributions to our ecosystem but also brought fresh insights into
  the challenges faced by new users. For example, interns identified key
  areas where documentation and tooling could be improved, directly
  informing future updates.

  Tarides also maintained its commitment to funding critical open-source
  projects and maintainers. We continued funding [Robur] for their
  maintenance work on MirageOS (most of those libraries are used by many
  =E2=80=93including us=E2=80=93 even in non-MirageOS context) and [Daniel =
B=C3=BCnzli],
  whose libraries like `cmdliner' are essential for some of our
  development.

  Finally, Tarides extended sponsorships to non-OCaml-specific events,
  including [JFLA], [BobConf], [FSTTCS], and [Terminal Feud] (which
  garnered over 100k views). These events expanded OCaml=E2=80=99s visibili=
ty to
  new audiences and contexts, introducing the language to a broader
  technical community that =E2=80=93we hope=E2=80=93 will discover OCaml an=
d enjoy using
  it as much as we do.


[FUN OCaml 2024] <https://fun-ocaml.com/>

[5k+ views on YouTube]
<https://www.youtube.com/channel/UC3TI-fmhJ_g3_n9fHaXGZKA>

[ICFP 2024] <https://icfp24.sigplan.org/>

[Manila]
<https://discuss.ocaml.org/t/announcing-ocaml-manila-meetups/14300>

[Chennai]
<https://discuss.ocaml.org/t/chennai-ocaml-meetup-october-2024/15417>

[Cambridge sessions]
<https://tarides.com/blog/2023-03-22-compiler-hacking-in-cambridge-is-back/>

[GitHub] <https://github.com/tarides/compiler-hacking/wiki>

[Discuss] <https://discuss.ocaml.org/tag/outreachy>

[watch.ocaml.org] <https://watch.ocaml.org>

[Robur] <https://blog.robur.coop/articles/finances.html>

[Daniel B=C3=BCnzli] <https://github.com/sponsors/dbuenzli>

[JFLA] <https://jfla.inria.fr/jfla2024.html>

[BobConf] <https://bobkonf.de/2025/en/>

[FSTTCS] <https://www.fsttcs.org.in/>

[Terminal Feud] <https://www.youtube.com/watch?v=3DfMy0XhFdLAE>


What=E2=80=99s Next?
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  As we begin 2025, Tarides remains committed to making OCaml a
  mainstream language. Our focus this year is to position OCaml as a
  robust choice for mission-critical applications by enhancing developer
  experience, ecosystem integration, and readiness for high-assurance
  use cases.

  We aim to build on the Dune Developer Preview to further improve
  usability across all platforms, with a particular emphasis on Windows,
  to make OCaml more accessible to a broader range of
  developers. Simultaneously, we will ensure OCaml is ready for critical
  applications in industries where reliability, performance, and
  security are essential. Projects like [SpaceOS] showcase the potential
  of memory- and type-safe languages for safety-critical systems. Built
  on MirageOS and OCaml=E2=80=99s unique properties, SpaceOS is part of the
  EU-funded [Orchide] project and aims to set a new standard for edge
  computing in space. Additionally, SpaceOS is being launched in the US
  through our spin-off [Parsimoni]. However, these needs are not limited
  to Space: both the [EU Cyber Resilience Act] and the [US cybersecurity
  initiatives] highlight the growing demand for type-safe,
  high-assurance software to address compliance and security challenges
  in sensitive domains. Tarides believes that OCaml has a decisive role
  to play here in 2025!

  I=E2=80=99d like to personally thank our sponsors and customers, especial=
ly
  Jane Street, for their unwavering support over the years, and to
  [Dennis Dang], our single recurring GitHub sponsor. Finally, to every
  member of Tarides who worked so hard in 2024 to make all of this
  happen: thank you. I=E2=80=99m truly lucky to be sailing with you on this
  journey!

  /We are looking for [sponsors on GitHub], are happy to [collaborate on
  innovative projects] involving OCaml or MirageOS and offer [commercial
  services] for open-source projects =E2=80=93 including long-term support,
  development of new tools, or assistance with porting projects to OCaml
  5 or Windows./


[SpaceOS]
<https://tarides.com/blog/2023-07-31-ocaml-in-space-welcome-spaceos/>

[Orchide] <https://orchide.pages.upb.ro/>

[Parsimoni] <https://parsimoni.co>

[EU Cyber Resilience Act]
<https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act>

[US cybersecurity initiatives]
<https://tarides.com/blog/2024-03-07-a-time-for-change-our-response-to-the-=
white-house-cybersecurity-press-release/>

[Dennis Dang] <https://github.com/dangdennis>

[sponsors on GitHub] <https://github.com/sponsors/tarides>

[collaborate on innovative projects] <https://tarides.com/innovation/>

[commercial services] <https://tarides.com/services/>


Other OCaml News
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

>From the ocaml.org blog
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here are links from many OCaml blogs aggregated at [the ocaml.org
  blog].

  =E2=80=A2 [Using `clang-cl' With OCaml 5]
  =E2=80=A2 [Florian=E2=80=99s compiler weekly, 13 January 2025]
  =E2=80=A2 [OCaml 5.3: Features and Fixes!]
  =E2=80=A2 [Git, Carton and emails]


[the ocaml.org blog] <https://ocaml.org/blog/>

[Using `clang-cl' With OCaml 5]
<https://tarides.com/blog/2025-01-15-using-clang-cl-with-ocaml-5>

[Florian=E2=80=99s compiler weekly, 13 January 2025]
<https://gallium.inria.fr/blog/florian-cw-2025-01-13>

[OCaml 5.3: Features and Fixes!]
<https://tarides.com/blog/2025-01-09-ocaml-5-3-features-and-fixes>

[Git, Carton and emails]
<https://blog.robur.coop/articles/2025-01-07-carton-and-cachet.html>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  to the [caml-list].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[caml-list] <https://sympa.inria.fr/sympa/info/caml-list>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2025-01-21 Tue 16:45 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org Mode" />
<style type=3D"text/css">
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
</head>
<body>
<div id=3D"content" class=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2025.01.14.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2025.01.28.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of January 14 to 21, 202=
5.
</p>

<div id=3D"table-of-contents" role=3D"doc-toc">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents" role=3D"doc-toc">
<ul>
<li><a href=3D"#1">OCaml Software Foundation: January 2025 update</a></li>
<li><a href=3D"#2">ppxlib.034.0</a></li>
<li><a href=3D"#3">Release of Carton 1.0.0 and Cachet</a></li>
<li><a href=3D"#4">Opam repository archival, phase 2 - OCaml 4.08 is the lo=
wer bound</a></li>
<li><a href=3D"#5">Ocaml-posix 2.1.0 released!</a></li>
<li><a href=3D"#6">Release of ocaml-eglot 1.0.0</a></li>
<li><a href=3D"#7">Semgrep is hiring to help scale their static analysis en=
gine</a></li>
<li><a href=3D"#8">Dune dev meeting</a></li>
<li><a href=3D"#9">Tarides: 2024 in Review</a></li>
<li><a href=3D"#10">Other OCaml News</a></li>
<li><a href=3D"#org7e685ee">Old CWN</a></li>
</ul>
</div>
</div>
<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">OCaml Software Foundation: January 2025 update</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-software-foundation-j=
anuary-2025-update/15951/1">https://discuss.ocaml.org/t/ocaml-software-foun=
dation-january-2025-update/15951/1</a>
</p>
</div>
<div id=3D"outline-container-org2a09e80" class=3D"outline-3">
<h3 id=3D"org2a09e80">gasche announced</h3>
<div class=3D"outline-text-3" id=3D"text-org2a09e80">
<p>
Happy new year!
</p>

<p>
This is an update on recent works of the <a href=3D"http://ocaml-sf.org/">O=
Caml Software Foundation</a>, covering our 2024 actions &#x2013; the previo=
us update was in <a href=3D"https://discuss.ocaml.org/t/ocaml-software-foun=
dation-january-2024-update/13828">January 2024</a>.
</p>

<p>
The OCaml Software Foundation is a non-profit foundation (<a href=3D"https:=
//discuss.ocaml.org/t/ann-the-ocaml-software-foundation/4476">earlier threa=
d</a>) that receives funding from <a href=3D"http://ocaml-sf.org/#sponsors"=
>our industrial sponsors</a> each year, and tries its best to spend it to s=
upport and strengthen the OCaml ecosystem and community.
</p>

<p>
The funding volume we receive each year is around 200K=E2=82=AC. (For compa=
rison: this is the yearly cost of one experienced full-time software engine=
er in many parts of the world.) We do not fund people full-time for long pe=
riods. Most actions receive from 3K=E2=82=AC to 20K=E2=82=AC.  The work to =
prepare and execute actions is mostly done by the (unpaid) <a href=3D"http:=
//ocaml-sf.org/about-us/">Executive Committee</a>. It is currently formed b=
y Nicol=C3=A1s Ojeda B=C3=A4r, Damien Doligez, Xavier Leroy, Kim Nguy=E1=BB=
=85n, Virgile Prevosto and myself, with administrative personnel provided b=
y <a href=3D"https://en.wikipedia.org/wiki/French_Institute_for_Research_in=
_Computer_Science_and_Automation">INRIA</a> and general assistance by Alan =
Schmitt.
</p>

<p>
Our current sponsors (thanks!) are <a href=3D"https://ahrefs.com/">ahrefs</=
a>, <a href=3D"https://janestreet.com/">Jane Street</a>, <a href=3D"https:/=
/tezos.com/">Tezos</a>, <a href=3D"https://bloomberg.com/">Bloomberg</a>, <=
a href=3D"https://lexifi.com/">Lexifi</a>, <a href=3D"https://simcorp.com/"=
>SimCorp</a>, <a href=3D"https://www.mitsubishielectric-rce.eu/">MERCE</a> =
and <a href=3D"https://tarides.com/">Tarides</a>. (If your company would li=
ke to join as a sponsor, please <a href=3D"http://ocaml-sf.org/becoming-a-s=
ponsor/">get in touch</a>. Unfortunately, we still cannot efficiently proce=
ss small donations, so we are not calling for individual donations.)
</p>

<p>
Feel free to use this thread for questions/suggestions :-)
</p>
</div>
<div id=3D"outline-container-orgf666dbe" class=3D"outline-4">
<h4 id=3D"orgf666dbe">Recent actions</h4>
<div class=3D"outline-text-4" id=3D"text-orgf666dbe">
</div>
<ul class=3D"org-ul">
<li><a id=3D"org3fc7f56"></a>Education and outreach<br />
<div class=3D"outline-text-5" id=3D"text-org3fc7f56">
<p>
We funded a new edition of the Spanish <a href=3D"https://webdiis.unizar.es=
/evpf/index.html">summer school</a> on functional programming in OCaml, org=
anized in Saragossa by Ricardo Rodriguez and Roberto Blanco.
</p>

<p>
We continued funding the OCaml meetups in Paris and Toulouse, France. In 20=
24, a <a href=3D"https://www.meetup.com/chennai-ocaml-meetup/">new meetup</=
a> started in Chennai, India (first <a href=3D"https://discuss.ocaml.org/t/=
chennai-ocaml-meetup-june-2024/14695">discuss thread</a>), which we are del=
ighted to support as well.
</p>

<p>
We are sponsoring the <a href=3D"https://jfla.inria.fr/jfla2025.html">JFLA =
2025</a>, a functional programming conference in France, and an <a href=3D"=
https://confengine.com/conferences/functional-conf-2025/proposal/21057/ocam=
l-bridge-workshop">OCaml Bridge Workshop</a> at Functional Conf 2025, a lar=
ge Asian conference on functional programming.
</p>
</div>
</li>
<li><a id=3D"orgb59774b"></a>Research<br />
<div class=3D"outline-text-5" id=3D"text-orgb59774b">
<p>
The OCaml Software Foundation is typically not involved in funding research=
, focusing on actions that have an immediate impact on the language and its=
 community. Nevertheless, in 2023 we funded one year of post-doctoral work =
for Takafumi Saikawa in relation to his maintenance work on the type-checke=
r of OCaml. In 2024 we funded one year of research engineer for the <a href=
=3D"https://salto.gitlabpages.inria.fr/">Salto</a> project, building a stat=
ic analyzer for OCaml, and one year of PhD grant for <a href=3D"https://git=
hub.com/johnyob">Alistair O'Brien</a> in Cambridge (complementing other fun=
ding sources for a full PhD), continuing his <a href=3D"https://github.com/=
johnyob/dromedary/">impressive work</a> on constraint-based type inference =
for OCaml.
</p>
</div>
</li>
<li><a id=3D"orgfd65c1d"></a>Ecosystem<br />
<ul class=3D"org-ul">
<li><a id=3D"org5268522"></a>Infrastructure<br />
<div class=3D"outline-text-6" id=3D"text-org5268522">
<p>
As in previous years, we fund the work of Kate Deplaix to check that the OC=
aml ecosystem is compatible with upcoming compiler releases; in 2024 Kate w=
orked on OCaml 5.2 and 5.3.
</p>

<p>
We are trying our best to support the work of opam-repository maintainers, =
through individual funding grants for the active maintainers. This year, on=
 the suggestion of the repository maintainers, we are also funding the work=
 of <a href=3D"https://robur.coop/">Robur</a> to migrate unmaintained packa=
ges to a separate archive (<a href=3D"https://discuss.ocaml.org/t/proposed-=
package-archiving-policy-for-the-opam-repository/15713">discuss thread 1</a=
>, <a href=3D"https://discuss.ocaml.org/t/opam-repository-archival-phase-1-=
unavailable-packages/15797/2">thread 2</a>).
</p>
</div>
</li>
<li><a id=3D"orge25af94"></a>Tools<br />
<div class=3D"outline-text-6" id=3D"text-orge25af94">
<p>
In 2024 we have funded one month of maintenance of the <code>opam</code> cl=
ient by Raja Boujbel and her colleagues.
</p>

<p>
We renewed our partial support for the work of Antonio Monteiro on <a href=
=3D"https://melange.re/v4.0.0/">Melange</a>. For more Melange news, see for=
 example the announcement of <a href=3D"https://melange.re/blog/posts/melan=
ge-4-is-here">Melange 4</a>.
</p>
</div>
</li>
<li><a id=3D"org56b2bd3"></a>Libraries<br />
<div class=3D"outline-text-6" id=3D"text-org56b2bd3">
<p>
We keep supporting the work of Petter Urkedal on the <a href=3D"https://git=
hub.com/paurkedal/ocaml-caqti/">Caqti</a> library, the main database connec=
tion library in the OCaml community.
</p>

<p>
The <a href=3D"https://github.com/owlbarn/owl">Owl</a> library for scientif=
ic computing has been <a href=3D"https://discuss.ocaml.org/t/owl-project-re=
structured/14226">restructuring</a> in 2024, with its two maintainers movin=
g to permanent jobs demanding their time and therefore less available. The =
OCaml Software Foundation is providing a small grant to help the maintainer=
s transition to a different contribution model and/or preserve a part of th=
eir maintenance activity, as they think is best.
</p>

<p>
We have been funding documentation work by John Whitington to collect or cr=
eate usage examples of important OCaml libraries, prior to their upstreamin=
g in the documentation of each project. See his <a href=3D"https://github.c=
om/johnwhitington/ocaml-nursery">ocaml-nursery</a> repository.
</p>

<p>
We support the contributions of Daniel B=C3=BCnzli to the OCaml ecosystem. =
This year, Daniel used this support to fund the development of
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://discuss.ocaml.org/t/ann-jsont-0-1-0-declarative-json=
-data-manipulation-for-ocaml/15702">jsont</a>, a new library for declarativ=
e JSON data manipulation</li>
<li><a href=3D"https://discuss.ocaml.org/t/ann-bytesrw-0-1-0-composable-byt=
e-stream-readers-and-writers/15696">bytesrw</a>, a library of composable by=
te stream readers and writes, with support for various compression and hash=
ing algorithms</li>
<li><a href=3D"https://discuss.ocaml.org/t/ann-unicode-16-0-0-update-for-uu=
cd-uucp-uunf-and-uuseg/15270">support</a> for Unicode 16.0 in his Unicode l=
ibraries</li>
</ul>

<p>
Finally, we have been funding Nathan Rebours to take an active part in the =
maintenance of the ppxlib project, see his <a href=3D"https://discuss.ocaml=
.org/t/ppxlib-maintenance-summary/14458">ppxlib maintenance summary</a>.
</p>
</div>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">ppxlib.034.0</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ppxlib-034-0/15952/1">h=
ttps://discuss.ocaml.org/t/ann-ppxlib-034-0/15952/1</a>
</p>
</div>
<div id=3D"outline-container-org8ed741a" class=3D"outline-3">
<h3 id=3D"org8ed741a">Nathan Rebours announced</h3>
<div class=3D"outline-text-3" id=3D"text-org8ed741a">
<p>
We're happy to announce that we just released ppxlib.0.34.0.
</p>

<p>
The full patch notes are available on the release page <a href=3D"https://g=
ithub.com/ocaml-ppx/ppxlib/releases/tag/0.34.0">over here</a>.
</p>

<p>
The main features are OCaml 5.3 compatibility, new AST pretty-printing util=
ities and the ppxlib-tools package, support for <code>[@@deriving ...]</cod=
e> on class types and the addition of missing <code>Pprintast</code> entry =
points.
</p>
</div>
<div id=3D"outline-container-org6fa496d" class=3D"outline-4">
<h4 id=3D"org6fa496d">Changes summary</h4>
<div class=3D"outline-text-4" id=3D"text-org6fa496d">
</div>
<ul class=3D"org-ul">
<li><a id=3D"orgce32ffd"></a>5.3 compatibility<br />
<div class=3D"outline-text-5" id=3D"text-orgce32ffd">
<p>
ppxlib.0.34.0 is the first official ppxlib release that's compatible with t=
he new 5.3 compiler.
</p>

<p>
The ppxlib driver now also comes with a <code>-keywords</code> CLI option, =
similar to the compiler's that allow you to compile and preprocess with the=
 5.3 compiler code that uses <code>effect</code> as an identifier. This is =
pretty niche but it's there should you need it.
</p>

<p>
Please note that means you can use ppx-es with a 5.3 compiler but not that =
ppx-es can consume/produce 5.3 language features. We're currently working o=
n a fix allowing you to use the effect syntax in files that require preproc=
essing as it's not possible with 0.34.0. The fix should be released in the =
next few days as 0.34.1.
</p>
</div>
</li>
<li><a id=3D"org232f8e2"></a>AST pretty-printing<br />
<div class=3D"outline-text-5" id=3D"text-org232f8e2">
<p>
We added a new <code>Pp_ast</code> module that allows you to pretty print A=
ST fragments.
</p>

<p>
The only way ppxlib would print ASTs before were as S-expressions. In pract=
ice we found that it was not always helpful and wanted a more readable and =
human friendly way of displaying the AST.
</p>

<p>
The default output of those printer is a simplified version of the AST to k=
eep things clear and avoid cluttering the output with information that is n=
ot always useful. For example, if you run <code>Ppxlib.Pp_ast.Default.expre=
ssion</code> on the AST for <code>x + 2</code>, you'll get the following:
</p>
<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #242521; background-colo=
r: #fcf7ef;">Pexp_apply</span>
  ( <span style=3D"color: #242521; background-color: #fcf7ef;">Pexp_ident</=
span> (<span style=3D"color: #242521; background-color: #fcf7ef;">Lident</s=
pan> <span style=3D"color: #ca3400;">"+"</span>)
  , [ ( <span style=3D"color: #242521; background-color: #fcf7ef;">Nolabel<=
/span>, <span style=3D"color: #242521; background-color: #fcf7ef;">Pexp_ide=
nt</span> (<span style=3D"color: #242521; background-color: #fcf7ef;">Liden=
t</span> <span style=3D"color: #ca3400;">"x"</span>))
    ; ( <span style=3D"color: #242521; background-color: #fcf7ef;">Nolabel<=
/span>, <span style=3D"color: #242521; background-color: #fcf7ef;">Pexp_con=
stant</span> (<span style=3D"color: #242521; background-color: #fcf7ef;">Pc=
onst_integer</span> ( <span style=3D"color: #ca3400;">"2"</span>, <span sty=
le=3D"color: #242521; background-color: #fcf7ef;">None</span>)))
    ]
  )
</pre>
</div>
<p>
The alert reader will note that there are no locations or attributes and th=
at the <code>expression</code> record layer is omitted here.
</p>

<p>
You can of course configure the printer to display more information if you =
need to.
</p>

<p>
We've been using these new printers internally to debug migration code and =
they have been a huge help so we hope they will make working with ppxlib ea=
sier for you too.
</p>

<p>
In addition to this new module, we also added a command line utility called=
 <code>ppxlib-pp-ast</code> to pretty print ASTs from source files, source =
code fragments or even marshalled AST files. It is very similar to the old =
<code>ppx_tools</code>'s <code>dumpast</code>.
</p>

<p>
Note that it will print ppxlib's internal AST after it's been migrated from=
 the installed compiler's version. This is something that we could not simp=
ly achieve with OCaml's own <code>-dparsetree</code>.
</p>

<p>
This should be a useful tool for debugging ppx related bugs or learning abo=
ut the AST and we hope ppx authors and users will like it.
</p>
</div>
</li>
<li><a id=3D"org480463f"></a>Other changes<br />
<div class=3D"outline-text-5" id=3D"text-org480463f">
<p>
As mentioned above, we also added some missing <code>Pprintast~=C2=B9 entri=
es such as ~binding</code>, <code>longident</code> and <code>payload</code>.
</p>

<p>
It is now possible to use <code>[@@deriving ...]</code> on class type decla=
rations and therefore to write derivers for class types.
</p>

<p>
=C2=B9: <i>To the confused readers:</i> <code>Pprintast</code> <i>is entire=
ly different from</i> <code>Pp_ast</code> <i>mentioned above as it prints t=
he source code corresponding to a given AST.</i>
</p>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-org12229e9" class=3D"outline-4">
<h4 id=3D"org12229e9">Plans for the next release</h4>
<div class=3D"outline-text-4" id=3D"text-org12229e9">
</div>
<ul class=3D"org-ul">
<li><a id=3D"org6ea032d"></a>Internal AST bump to 5.2<br />
<div class=3D"outline-text-5" id=3D"text-org6ea032d">
<p>
Our next release will bump our internal AST to 5.2. It is a pretty big chan=
ge because 5.2 changed how functions were represented in the AST and this i=
mpacts <b>A LOT</b> of ppx-es.
</p>

<p>
@patricoferris has been working very hard on this over the past few months =
to minimize the amount of breakage and to send patches upstream where that =
was not possible to get the rest of the ecosystem ready for the bump.
</p>

<p>
We wanted to first release the 5.3 compatibility but now that's out of the =
way we're able to focus on the bump again.
</p>

<p>
@patricoferris will create a dedicated thread shortly to explain a bit what=
's been going on and what to expect from this release.
</p>
</div>
</li>
<li><a id=3D"org7027c8c"></a>Drop support for OCaml &lt; 4.08<br />
<div class=3D"outline-text-5" id=3D"text-org7027c8c">
<p>
It is time for us to drop support for very old compilers. Keeping support f=
or OCaml 4.07 and before requires maintenances of quite heavy compatibility=
 layers and prevents us from using some language features in ppxlib's sourc=
e code while providing little to no benefits since the vast majority of use=
rs already upgraded to much more recent compilers.
</p>

<p>
If you're still relying on those older compilers and the newest ppxlib, ple=
ase reach out, either here or via a ppxlib issue.
</p>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-org0be7da6" class=3D"outline-4">
<h4 id=3D"org0be7da6">Special thanks</h4>
<div class=3D"outline-text-4" id=3D"text-org0be7da6">
<p>
We wanted to thank our external contributors for this release: @hhugo, @noj=
b and @dra27 for their help on the 5.3 compat and @mattiasdrp for bringing =
the <code>Pprintast</code> module up to speed.
</p>

<p>
Special thanks as well to @pedrobslisboa who started integrating their exce=
llent <a href=3D"https://github.com/pedrobslisboa/ppx-by-example">ppx-by-ex=
ample</a> into ppxlib's documentation.
</p>

<p>
Finally, I'd also like to thank the OCaml Software Foundation who's been fu=
nding all my work on ppxlib and made this release possible!
</p>

<p>
Happy preprocessing to you all!
</p>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">Release of Carton 1.0.0 and Cachet</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-release-of-carton-1-0-0=
-and-cachet/15953/1">https://discuss.ocaml.org/t/ann-release-of-carton-1-0-=
0-and-cachet/15953/1</a>
</p>
</div>
<div id=3D"outline-container-org0137c82" class=3D"outline-3">
<h3 id=3D"org0137c82">Calascibetta Romain announced</h3>
<div class=3D"outline-text-3" id=3D"text-org0137c82">
<p>
I'm delighted to announce the release of <a href=3D"https://github.com/robu=
r-coop/carton">Carton 1.0.0</a> and <a href=3D"https://github.com/robur-coo=
p/cachet">Cachet</a> (which will be released soon into <code>opam-repositor=
y</code>).
</p>

<p>
Carton is a reimplementation of the Git PACK format. A PACK file is what yo=
u can find in your <code>.git/objects/pack</code> in your favourite Git rep=
ository. It contains mainly all your Git objects. This format provides a go=
od compression ratio and the ability to extract objects almost directly. It=
 can be seen as a read-only key-value database =E2=80=94 in effect, modifyi=
ng Git objects is impossible.
</p>

<p>
This project is built around the OCaml implementation of Git that we have. =
But the PACK format is also interesting in its own right and outside the Gi=
t concepts.
</p>

<p>
The PACK format offers double compression. A zlib compression (proposed by =
<a href=3D"https://github.com/mirage/decompress">decompress</a>) as well as=
 a compression between objects in the form of a binary patch (proposed by <=
a href=3D"https://github.com/mirage/duff">duff</a>).
</p>

<p>
So, if the "words" appear quite frequently (like the words used in a progra=
mming language =E2=80=94 if, else, then, etc.), the second level of compres=
sion becomes very interesting where an object (such as a file) is simply a =
succession of patches with other objects.
</p>
</div>
<div id=3D"outline-container-org202b835" class=3D"outline-4">
<h4 id=3D"org202b835">Cachet, a library for <code>mmap</code> syscall</h4>
<div class=3D"outline-text-4" id=3D"text-org202b835">
<p>
Carton and the PACK format very often use syscall <code>mmap</code>. The po=
int is to be able to take advantage of the kernel cache system to read a PA=
CK file. The kernel can read a file in advance when reading a page via <cod=
e>mmap</code>. Basically, the kernel anticipates that you might want to get=
 the next page after the one you requested.
</p>

<p>
However, in the case of Carton, it is sometimes necessary to =E2=80=98go ba=
ck=E2=80=99, particularly for patched objects whose source is often upstrea=
m.
</p>

<p>
Cachet is an intermediate layer for <code>mmap</code> that caches previousl=
y obtained pages. In this way, we take advantage of both the kernel for sub=
sequent pages and our library for previous pages.
</p>

<p>
Let's take a concrete example. Carton can analyse a PACK file as <code>git =
verify-pack</code> does. Let's make a comparison with and without Cachet.
</p>

<pre class=3D"example" id=3D"orgaf43389">
+--------------+-------------+----------------+-----------------+
|              | with cachet | without cachet | git verify-pack |
+--------------+-------------+----------------+-----------------+
|         time |       17.8s |          41.8s |            9.3s |
+--------------+-------------+----------------+-----------------+
| cache misses |        936M |          1933M |            246M |
+--------------+-------------+----------------+-----------------+
</pre>

<p>
As you can see, using Cachet improves Carton's execution time. We're still =
not as competitive as git-verify-pack, but we're getting close!
</p>

<p>
Cachet offers to cache previously loaded pages. Its cache system is very ba=
sic and is just a small array whose size is a power of two. Next, we simply=
 reuse the OCaml hash function =E2=80=94 in this respect, it may be worth t=
esting another hash function.
</p>
</div>
<ul class=3D"org-ul">
<li><a id=3D"orgb730d03"></a>Cachet &amp; schedulers<br />
<div class=3D"outline-text-5" id=3D"text-orgb730d03">
<p>
Like most of our projects, Cachet is independent of schedulers. There is th=
erefore a variant with <a href=3D"https://github.com/ocsigen/lwt">Lwt</a> a=
nd a variant with <a href=3D"https://github.com/robur-coop/miou">Miou</a>. =
However, we need to clarify a behaviour related to the use of Cachet. Readi=
ng a file, whether with <code>read(3)</code> or <code>mmap(3P)</code>, does=
 not block, but it can take some time.
</p>

<p>
As we have already experienced and explained <a href=3D"https://blog.robur.=
coop/articles/lwt_pause.html">here</a>, it may be necessary to explain to t=
he scheduler whether it is appropriate to do something else after such a sy=
scall. In the case of Lwt, it might be a good idea to insert <code>Lwt.paus=
e</code> just after our syscall so that Lwt gives another service the oppor=
tunity to run despite the time taken trying to read from a file. However, p=
articularly for Lwt, this means closing Cachet in the hell of the monad (in=
 other words, there is no way to escape it) because of this possible <code>=
Lwt.pause</code> (which returns <code>unit Lwt.t</code>).
</p>

<p>
The composition of Cachet with Lwt is therefore quite different from what w=
e've been able to experiment with. One of <a href=3D"https://blog.robur.coo=
p/articles/tar-release.html">our other articles</a> suggests not using func=
tors (too much), and although we can in fact abstract <code>Lwt.t</code> fr=
om <code>unit Lwt.t</code> (and even reduce it such that <code>type 'a t =
=3D 'a</code>) with the <a href=3D"https://www.cl.cam.ac.uk/~jdy22/papers/l=
ightweight-higher-kinded-polymorphism.pdf">HKP</a> trick, we opted for comp=
osition by hand.
</p>

<p>
The problem relates to Lwt (and Async) and doesn't apply to Miou when it's =
possible to raise effects. However, from such a composition, a choice has b=
een made to give Lwt the opportunity to do something else after <code>mmap<=
/code>. We could, in other types of applications, make another choice on th=
is precise question.
</p>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-org098d20d" class=3D"outline-4">
<h4 id=3D"org098d20d">Carton</h4>
<div class=3D"outline-text-4" id=3D"text-org098d20d">
<p>
Carton is a library that was originally developed for ocaml-git. It was int=
ernal to the project but we considered that the PACK format's field of appl=
ication could be wider than that of Git. We decided to extract the project =
from <code>ocaml-git</code> and make it a library in its own right. Carton'=
s objective remains fairly rudimentary. It consists of:
</p>
<ul class=3D"org-ul">
<li>extract objects from a PACK file (whether or not these objects are Git =
objects)</li>
<li>generate an <code>*.idx</code> file from a PACK file in order to have q=
uick access to the objects</li>
<li>verifying a PACK file such as <code>git verify-pack</code> does</li>
<li>and finally generate a PACK file from a list of objects</li>
</ul>

<p>
Carton is a library and a tool that you can now use on your Git repositorie=
s. Here are a few examples of how to use <code>carton</code>. We'll start b=
y cloning a repository to test Carton and go to the folder containing the P=
ACK file.
</p>
<pre class=3D"example" id=3D"org2d13b08">
$ opam install carton.1.0.0
$ git clone https://github.com/ocaml/ocaml
$ cd ocaml/.git/objects/pack/
</pre>

<p>
Carton can check a PACK file. Verifying means extracting all the objects in=
 the file from memory and calculating their hash. This command is similar t=
o <code>git verify-pack</code>.
</p>
<pre class=3D"example" id=3D"org795ee0e">
$ carton verify pack-*.pack
</pre>

<p>
Carton can extract a specific object (commit, tree or blob) from a PACK fil=
e using its associated <code>*.idx</code> file and the object identifier (t=
he hash of the commit, for example).
</p>
<pre class=3D"example" id=3D"org0992805">
$ carton get pack-*.idx 89055b054eeec0c6c6b6118d6490b6792da7fef2
</pre>

<p>
Instead of extracting objects from a PACK file into memory, you can also ex=
tract them as files using <code>explode</code>.
</p>
<pre class=3D"example" id=3D"org3a20b7c">
$ mkdir loose
$ carton explode 'loose/%s/%s' pack-*.pack &gt; entries.pack
</pre>

<p>
Finally, Carton can create a new PACK file from a list of objects stored in=
 files with make. It can also generate the <code>*.idx</code> file associat=
ed with the new PACK file. As we've just re-packaged the objects in the rep=
ository, we should find the same objects.
</p>
<pre class=3D"example" id=3D"org5c34f9f">
$ carton make -n $(cat entries.pack | wc -l) -e entries.pack new.pack
$ carton index new.pack
$ carton get new.idx 89055b054eeec0c6c6b6118d6490b6792da7fef2
</pre>

<p>
Please note that the above actions, applied to <code>ocaml/ocaml</code>, ma=
y take some time due to the history of this project.
</p>

<p>
In the example above, we can see the extraction of a Git object, the extrac=
tion of all the objects in a PACK file and the creation of a new PACK file =
based on all the extracted objects.
</p>

<p>
As you can see, creating a PACK file can take a long time. However, the adv=
antage of the PACK file lies particularly in obtaining the objects and in t=
he rate of compression of the PACK file:
</p>

<pre class=3D"example" id=3D"org7a87ae2">
+--------+-------------+----------+-------+--------------+
|        | pack-*.pack | new.pack | loose | loose.tar.gz |
+--------+-------------+----------+-------+--------------+
|   size |        355M |     648M |  8.3G |         1.8G |
+--------+-------------+----------+-------+--------------+
</pre>

<p>
The PACK file is primarily designed to provide access to objects according =
to their identifiers. This access must be as fast as possible, even if the =
object is first compressed with decompress and can be compressed in the for=
m of a patch with duff. Here are a few metrics to give you an idea.
</p>

<pre class=3D"example" id=3D"org66255dc">
+--------------+-------------+----------+---------+
|              | pack-*.pack | new.pack | loose   |
+--------------+-------------+----------+---------+
| git cat-file |     ~ 0.01s |      N/A |     N/A |
+--------------+-------------+----------+---------+
|   carton get |     ~ 0.20s |  ~ 0.30s |         |
+--------------+-------------+----------+---------+
|          cat |         N/A |      N/A | 0.0006s |
+--------------+-------------+----------+---------+
</pre>

<p>
What's important to note is the ability to have random access to objects si=
mply by having the associated <code>*.idx</code> file, the production of wh=
ich is quite efficient. This is not or hardly the case for compression form=
ats such as GZip. And that's the whole point of PACK files, with an indexin=
g method for almost immediate access to objects according to their identifi=
ers and offering a very good compression ratio.
</p>

<p>
<b>NOTE</b>: Carton does not compress the repository as well as Git. The ma=
in reason is that Git has some heuristics relating to Git objects that Cart=
on does not implement - because Carton wishes to be independent of Git conc=
epts. These heuristics apply in particular to the order in which we want to=
 pack objects. In addition, Git prepares the ground so that the antecedents=
 of a blob object (which is a file in your repository), for example, are th=
e old versions of that same blob (and therefore the old versions of your fi=
le).
</p>

<p>
In this context, the patch algorithm implemented by <a href=3D"https://gith=
ub.com/mirage/duff">duff</a> applies very well and gives very good results.
</p>

<p>
For more details on these heuristics, you can read <a href=3D"https://githu=
b.com/git/git/blob/master/Documentation/technical/pack-heuristics.txt">this=
 discussion</a> that serves as documentation.
</p>
</div>
<ul class=3D"org-ul">
<li><a id=3D"org37582cf"></a>Carton &amp; parallelism<br />
<div class=3D"outline-text-5" id=3D"text-org37582cf">
<p>
As always, our libraries are independent of schedulers. There is a version =
of Carton with Lwt and a version with Miou.
</p>

<p>
Some of the tasks Carton performs, such as indexing, are highly paralleliza=
ble. In this case, the new derivation of Carton with Miou exists to take ad=
vantage of the latter's domain pool.
</p>

<p>
It was also quite easy to parallelize the work on <code>carton index</code>=
 and <code>carton verify</code>. Here are some other metrics which, thanks =
to OCaml 5 and Miou, bring us closer to Git performance:
</p>

<pre class=3D"example" id=3D"orgba41269">
$ hyperfine \
  -n git \
    "git verify-pack pack-03a3a824757ff4c225874557c36d44eefe3d7918.idx" \
  -n carton \
    "carton verify pack-03a3a824757ff4c225874557c36d44eefe3d7918.pack -q --=
threads 4"
Benchmark 1: git
  Time (mean =C2=B1 =CF=83):     329.2 ms =C2=B1   0.9 ms    [User: 384.2 m=
s, System: 27.8 ms]
  Range (min =E2=80=A6 max):   327.7 ms =E2=80=A6 330.9 ms    10 runs
=20
Benchmark 2: carton
  Time (mean =C2=B1 =CF=83):     712.1 ms =C2=B1  10.9 ms    [User: 1111.8 =
ms, System: 1112.6 ms]
  Range (min =E2=80=A6 max):   695.4 ms =E2=80=A6 726.8 ms    10 runs
=20
Summary
  git ran
    2.16 =C2=B1 0.03 times faster than carton
</pre>

<p>
<b>NOTE</b>: it may come as a surprise that Carton is 2 times slower than G=
it for analysing a PACK file, but it should be noted that almost the entire=
 Carton implementation is in OCaml! At this stage, the idea is more to give=
 you an idea, but we literally find ourselves comparing a Bugatti with a <a=
 href=3D"https://www.youtube.com/watch?v=3DPkhibs9n7tE">Citro=C3=ABn 2CV</a=
>.
</p>
</div>
</li>
<li><a id=3D"org9ec58da"></a>Carton &amp; Emails<br />
<div class=3D"outline-text-5" id=3D"text-org9ec58da">
<p>
Finally, this in-depth rewrite of Carton allows us to take advantage of the=
 PACK format for storing our emails.
</p>

<p>
In fact, we are experimenting with and developing an email solution within =
our cooperative, and email archiving is one of our objectives. Based on our=
 experience of implementing Git, we thought that the PACK format could be a=
 very interesting format for archiving emails.
</p>

<p>
It combines two features, rapid access to emails and compression by patches=
, which are very interesting when it comes to handling emails. Finally, it =
also corresponds more or less to the way we use email:
</p>
<ul class=3D"org-ul">
<li>we don't want to delete them (more often than not, we want to keep them=
 <span class=3D"underline">ad vitam aeternam</span>)</li>
<li>and we don't modify them</li>
</ul>

<p>
It therefore corresponds to a sort of read-only database. For more details =
on this aspect of Carton and the results of our experiments, I suggest you =
read our <a href=3D"https://blog.robur.coop/articles/2025-01-07-carton-and-=
cachet.html">recent article on our cooperative's blog</a>.
</p>
</div>
</li>
</ul>
</div>
</div>
</div>
<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">Opam repository archival, phase 2 - OCaml 4.08 is the lower bo=
und</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/opam-repository-arcival-pha=
se-2-ocaml-4-08-is-the-lower-bound/15965/1">https://discuss.ocaml.org/t/opa=
m-repository-arcival-phase-2-ocaml-4-08-is-the-lower-bound/15965/1</a>
</p>
</div>
<div id=3D"outline-container-org4c6c5d8" class=3D"outline-3">
<h3 id=3D"org4c6c5d8">Hannes Mehnert announced</h3>
<div class=3D"outline-text-3" id=3D"text-org4c6c5d8">
<p>
It is my pleasure to announce below the list of opam packages that will mov=
e to the opam-repository-archive on February 1st 2025. In total there are 5=
855 opam files scheduled for being moved within 1218 unique packages. This =
decreases the size of the opam-repository by roughly 20%.
</p>

<p>
<i>Editor note: please follow the post link for the other articles with who=
le list.</i>=20=20=20=20=20=20=20=20
</p>

<p>
This list contains all packages that are not compatible with OCaml &gt;=3D =
4.08, and packages that after archiving those are not installable due to mi=
ssing dependencies. The "not installable" list has been generated by <a hre=
f=3D"https://github.com/hannesm/archive-opam">archive-opam</a>, and this ma=
y of course contain bugs.
</p>

<p>
A smaller list contains a re-run of phase 1 (packages that are available: f=
alse) - where the availability was added between Dec 15th and now.
</p>

<p>
If you find a package in the list and you=E2=80=99d like to retain it in th=
e opam-repository, there are some options:
</p>

<ul class=3D"org-ul">
<li>(a) you can install it on your system (<code>opam install</code>): this=
 means there=E2=80=99s a bug in the archive-opam utility, please provide th=
e package name and version in the <a href=3D"https://github.com/ocaml/opam-=
repository-archive/pull/6">opam-repository-archive Phase 2 PR</a>, together=
 with your opam version, OCaml version, and operating system;</li>
<li>(b) it is not installable: please figure out the reasoning (the =E2=80=
=9CReasoning=E2=80=9D may help you to find the root issue), and try to fix =
it yourself - if you=E2=80=99re unable to fix the root cause, please also c=
omment in the <a href=3D"https://github.com/ocaml/opam-repository-archive/p=
ull/6">opam-repository-archive Phase 2 PR</a> with the package name and ver=
sion.</li>
</ul>

<p>
If you=E2=80=99ve any questions, please don=E2=80=99t hesitate to ask here =
or on GitHub or via another communication channel.
</p>

<p>
You can help further on the archiving process:
</p>

<ul class=3D"org-ul">
<li>as mentioned in the last announcement please add the <code>x-maintenanc=
e-intent</code> to your packages (a good choice for a lot of packages is <c=
ode>x-maintenance-intent: [("latest")]</code> if you=E2=80=99re maintaining=
 the latest version only) - this will be considered in Phase 3 (March 1st 2=
025);</li>
<li>if you are the author or maintainer of a package that is no longer usef=
ul or maintained, you can as well mark your opam files in the opam-reposito=
ry with <code>x-maintenance-intent: [("none")]</code> (this will be taken i=
nto account in Phase 3 - March 1st 2025);</li>
<li>if you flagged your preliminary releases with <code>flags: avoid-versio=
n</code>, and they can now be removed (e.g. since a stable version has been=
 released), please open a pull request to replace the <code>avoid-version</=
code> with <code>deprecated</code>.</li>
</ul>

<p>
Please note that the next Phase will be announced on February 15th with all=
 packages where the <code>x-maintenance-intent</code> does not match, and w=
hich do not have any reverse dependencies - archiving is scheduled for Marc=
h 1st.
</p>

<p>
To keep track of the announcements, please look at the <a href=3D"https://d=
iscuss.ocaml.org/tag/opam-repository">opam-repository tag</a>.
</p>

<p>
A big thanks to the OCaml Software Foundation for funding the opam-reposito=
ry archival project.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">Ocaml-posix 2.1.0 released!</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-posix-2-1-0-released/=
15974/1">https://discuss.ocaml.org/t/ocaml-posix-2-1-0-released/15974/1</a>
</p>
</div>
<div id=3D"outline-container-org03b2f0d" class=3D"outline-3">
<h3 id=3D"org03b2f0d">Romain Beauxis announced</h3>
<div class=3D"outline-text-3" id=3D"text-org03b2f0d">
<p>
Hi all!
</p>

<p>
Version <code>2.1.0</code> of <code>ocaml-posix</code> has been released!
</p>

<ul class=3D"org-ul">
<li>Repo: <a href=3D"https://github.com/savonet/ocaml-posix">https://github=
.com/savonet/ocaml-posix</a></li>
<li>API doc: <a href=3D"https://www.liquidsoap.info/ocaml-posix/">ocaml-pos=
ix</a></li>
</ul>

<p>
While it was long overdue, this version only include minor changes, along w=
ith the addition of <code>posix-math2</code>.
</p>

<p>
These packages are intended to provide a consistent, extensive set of bindi=
ngs for the various POSIX APIs to be used with <a href=3D"https://github.co=
m/yallop/ocaml-ctypes">ocaml-ctypes</a> when building bindings to C librari=
es that require the use of these APIs.
</p>

<p>
While working on OCaml projects, it is common to have to interface with API=
s derived from the POSIX specifications, <code>getaddrinfo</code>, <code>un=
ame</code> etc.
</p>

<p>
The core OCaml library provides their own version of these APIs but:
</p>
<ul class=3D"org-ul">
<li>They only cover parts of it</li>
<li>They wrap some native types such as <code>socketaddr</code> into custom=
, opaque OCaml types, making it impossible to re-use, for instance when usi=
ng a C library API requiring a POSIX <code>sockaddr</code>.</li>
</ul>

<p>
Thus, having a large, consistent set of bindings for these APIs that reflec=
t the actual C types, structures and etc greatly improves the usability of =
the language and ecosystem as a whole by making it possible to interface it=
 with a large set of C libraries in a reusable way.
</p>

<p>
The project has been mostly stable for a couple of years (and so have the P=
OSIX standards), but could use some more hands if there is more need in the=
 community to extend the set of POSIX APIs supported by the language.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">Release of ocaml-eglot 1.0.0</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-release-of-ocaml-eglot-=
1-0-0/15978/1">https://discuss.ocaml.org/t/ann-release-of-ocaml-eglot-1-0-0=
/15978/1</a>
</p>
</div>
<div id=3D"outline-container-orge597d04" class=3D"outline-3">
<h3 id=3D"orge597d04">Xavier Van de Woestyne announced</h3>
<div class=3D"outline-text-3" id=3D"text-orge597d04">
<p>
Hi everyone!
</p>

<p>
We (at <a href=3D"https://tarides.com/">Tarides</a>) are <span class=3D"und=
erline">particularly pleased</span> to announce the first release of <a hre=
f=3D"https://github.com/tarides/ocaml-eglot">OCaml-eglot</a>, An overlay on=
 <a href=3D"https://www.gnu.org/software/emacs/manual/html_node/eglot/">Egl=
ot</a> (the <span class=3D"underline">built-in</span> <a href=3D"https://mi=
crosoft.github.io/language-server-protocol/">LSP</a> client for Emacs) for =
editing OCaml!
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://github.com/tarides/ocaml-eglot">Github repository</a=
></li>
<li><a href=3D"https://melpa.org/#/ocaml-eglot">Package on MELPA</a></li>
<li><a href=3D"https://github.com/tarides/ocaml-eglot?tab=3Dreadme-ov-file#=
features">Features list</a></li>
<li><a href=3D"https://github.com/tarides/ocaml-eglot?tab=3Dreadme-ov-file#=
installation">Installation procedure</a></li>
<li><a href=3D"https://github.com/tarides/ocaml-eglot?tab=3Dreadme-ov-file#=
comparison-of-merlin-and-ocaml-eglot-commands">Comparison table with Merlin=
</a></li>
</ul>
</div>
<div id=3D"outline-container-org2a4dc57" class=3D"outline-4">
<h4 id=3D"org2a4dc57">More precisely</h4>
<div class=3D"outline-text-4" id=3D"text-org2a4dc57">
<p>
Typically, developers who use Emacs (<code>43.7%</code> in 2022, <a href=3D=
"https://ocaml-sf.org/docs/2022/ocaml-user-survey-2022.pdf">according to th=
e OCaml User Survey</a>) use a major mode (such as the venerable <a href=3D=
"https://github.com/ocaml/caml-mode">caml-mode</a>, or <a href=3D"https://g=
ithub.com/ocaml/tuareg">tuareg</a>) and <a href=3D"https://github.com/ocaml=
/merlin">Merlin</a> to provide IDE services. In 2016, Microsoft has release=
d LSP, a generic protocol for interacting with editors which, at first, was=
 only used by Visual Studio Code, but, since 2020, has really become the no=
rm. De-facto, following the LSP standard gives very good <span class=3D"und=
erline">default</span> (completion, jump to definition, &#x2026;). OCaml ha=
s excellent LSP (<a href=3D"https://ocaml.org/p/ocaml-lsp-server/latest">oc=
aml-lsp-server</a>) support, which is used in particular by the <a href=3D"=
https://marketplace.visualstudio.com/items?itemName=3Docamllabs.ocaml-platf=
orm">OCaml platform for Visual Studio Code</a>.
</p>

<p>
With the aim of reducing maintenance for all possible editors, going LSP se=
ems to be a good direction. A pertinent choice, especially since the major =
historical editors (such as Vim and Emacs) offer, in their recent versions,=
 LSP clients <span class=3D"underline">out of the box</span>. However, in t=
he same way that the OCaml client for VSCode integrates <b>OCaml-specific</=
b> features, it was necessary to support these features on the Emacs side (=
and in the future, Vim) to compete with Merlin, which is the goal of <code>=
ocaml-eglot</code>, to <b>provide a tailored development experience for OCa=
ml code editing</b>!
</p>
</div>
</div>
<div id=3D"outline-container-org74c8fba" class=3D"outline-4">
<h4 id=3D"org74c8fba">User feedback and future development</h4>
<div class=3D"outline-text-4" id=3D"text-org74c8fba">
<p>
We've just released the first version of OCaml-eglot, and, much like the va=
rious editor-related projects (Merlin, Vscode-ocaml-platform, Merlin for Em=
acs, Merlin for Vim), <b>we're more than open to community collaboration, u=
ser feedback</b>, in order to provide the best possible user experience!
</p>

<p>
<span class=3D"underline">Happy Hacking</span>!
</p>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">Semgrep is hiring to help scale their static analysis engine</=
h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/job-remote-semgrep-is-hirin=
g-to-help-scale-their-static-analysis-engine/15982/1">https://discuss.ocaml=
.org/t/job-remote-semgrep-is-hiring-to-help-scale-their-static-analysis-eng=
ine/15982/1</a>
</p>
</div>
<div id=3D"outline-container-orgc382b0d" class=3D"outline-3">
<h3 id=3D"orgc382b0d">Emma Jin announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc382b0d">
<p>
Semgrep is an application security company focused on detecting and remedia=
ting vulnerabilities. The static analysis engine is primarily written in OC=
aml. We're looking for a software engineer to help us support scanning larg=
er repositories and add many more users. The ideal candidate has owned a cr=
itical tool, worked on an OCaml project, and is interested in static analys=
is.
</p>

<p>
If this sounds interesting to you, see our job posting at <a href=3D"https:=
//job-boards.greenhouse.io/semgrep/jobs/4589941007">https://job-boards.gree=
nhouse.io/semgrep/jobs/4589941007</a>! Let me know if you have any question=
s!
</p>
</div>
</div>
</div>
<div id=3D"outline-container-8" class=3D"outline-2">
<h2 id=3D"8">Dune dev meeting</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-dune-dev-meeting/14994/=
21">https://discuss.ocaml.org/t/ann-dune-dev-meeting/14994/21</a>
</p>
</div>
<div id=3D"outline-container-org1ef2863" class=3D"outline-3">
<h3 id=3D"org1ef2863">Etienne Marais announced</h3>
<div class=3D"outline-text-3" id=3D"text-org1ef2863">
<p>
Hi Dune enthusiasts :camel:,
</p>

<p>
We will hold the regular Dune Dev Meeting on <b>Wednesday, January, 22nd at=
 16:00</b> CET. As usual, the session will be one hour long.
</p>

<p>
Whether you are a maintainer, a regular contributor, a new joiner or just c=
urious, you are welcome to join: these discussions are opened! The goal of =
these meetings is to provide a place to discuss the ongoing work together a=
nd synchronize with the Dune developers!
</p>
</div>
<div id=3D"outline-container-org371f697" class=3D"outline-4">
<h4 id=3D"org371f697">:calendar: Agenda</h4>
<div class=3D"outline-text-4" id=3D"text-org371f697">
<p>
The agenda is available on the<a href=3D"https://github.com/ocaml/dune/wiki=
/dev-meeting-2025-01-22"> meeting dedicated page</a>. Feel free to ask if y=
ou want to add more items in it.
</p>
</div>
</div>
<div id=3D"outline-container-orgc056edb" class=3D"outline-4">
<h4 id=3D"orgc056edb">:computer: Links</h4>
<div class=3D"outline-text-4" id=3D"text-orgc056edb">
<ul class=3D"org-ul">
<li>Meeting link: <a href=3D"https://us06web.zoom.us/j/85096877776?pwd=3DcW=
NhU1dHQ1ZNSjZuOUZCQ0h2by9Udz09">zoom</a></li>
<li>Calendar event: <a href=3D"https://calendar.google.com/calendar/embed?s=
rc=3Dc_5cd698df6784e385b1cdcdc1dbca18c061faa96959a04781566d304dc9ec7319%40g=
roup.calendar.google.com">google calendar</a></li>
<li>Wiki with information and previous notes: <a href=3D"https://github.com=
/ocaml/dune/wiki#dev-meetings">GitHub Wiki</a></li>
</ul>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-9" class=3D"outline-2">
<h2 id=3D"9">Tarides: 2024 in Review</h2>
<div class=3D"outline-text-2" id=3D"text-9">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/tarides-2024-in-review/1599=
0/1">https://discuss.ocaml.org/t/tarides-2024-in-review/15990/1</a>
</p>
</div>
<div id=3D"outline-container-orgf732d78" class=3D"outline-3">
<h3 id=3D"orgf732d78">Thomas Gazagnaire announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgf732d78">
<p>
At <a href=3D"https://tarides.com">Tarides</a>, we believe in making OCaml =
a mainstream programming language by improving its tooling and integration =
with other successful ecosystems. In 2024, we focused our efforts on initia=
tives to advance this vision by addressing key technical challenges and eng=
aging with the community to build a stronger foundation for OCaml=E2=80=99s=
 growth. This report details our work, the rationale behind our choices, an=
d the impact achieved. We are very interested in getting your feedback: <a =
href=3D"https://tarides.com/contact/">please get in touch</a> (or respond t=
o this thread!) if you believe we are going in the right direction.
</p>

<p>
<i><span class=3D"underline"><span class=3D"underline">TL;DR</span></span> =
=E2=80=93 In 2024, Tarides focused on removing adoption friction with bette=
r documentation and tools; and on improving adoption via the integration wi=
th three key thriving ecosystems: multicore programming, web development, a=
nd Windows support. Updates to <a href=3D"http://ocaml.org">ocaml.org</a> i=
mproved onboarding and documentation, while the <a href=3D"https://preview.=
dune.build/">Dune Developer Preview</a> simplified workflows with integrate=
d package management. Merlin added support for <a href=3D"https://tarides.c=
om/blog/2024-08-28-project-wide-occurrences-a-new-navigation-feature-for-oc=
aml-5-2-users/">project-wide reference support</a> and <a href=3D"https://d=
iscuss.ocaml.org/t/odoc-3-0-planning/14360">odoc 3</a>, which is about to b=
e released. OCaml 5.3 marked the first stable multicore release, and <code>=
js_of_ocaml</code> achieved up to 8x performance boosts in real-world comme=
rcial applications thanks to added support for WebAssembly. On Windows, opa=
m 2.2 brought full compatibility and CI testing to all Tier 1 platforms on =
<code>opam-repository</code>, slowly moving community packages towards reli=
able and better support for Windows. Tarides=E2=80=99 community support inc=
luded organising the first <a href=3D"https://fun-ocaml.com/">FUN OCaml con=
ference</a>, many local meetups, and two rounds of Outreachy internships.</=
i>
</p>
</div>
<div id=3D"outline-container-orga2f23e4" class=3D"outline-4">
<h4 id=3D"orga2f23e4">Better Tools: Toward a 1-Click Installation of OCaml<=
/h4>
<div class=3D"outline-text-4" id=3D"text-orga2f23e4">
<p>
Our primary effort in 2024 was to continue delivering on the <a href=3D"htt=
ps://ocaml.org/tools/platform-roadmap">OCaml Platform roadmap</a> published=
 last year.  We focused on making it easier to get started with OCaml by re=
moving friction in the installation and onboarding process. Our priorities =
were guided by the latest <a href=3D"https://discuss.ocaml.org/t/ann-ocaml-=
user-survey-2023/13469">OCSF User Survey</a>, direct user interviews, and <=
a href=3D"https://discuss.ocaml.org/tag/user-feedback">feedback</a> gathere=
d from the OCaml community. Updates from Tarides and other OCaml Platform m=
aintainers were regularly shared in the <a href=3D"https://discuss.ocaml.or=
g/tag/platform-newsletter">OCaml Platform Newsletter</a>.
</p>
</div>
<ul class=3D"org-ul">
<li><a id=3D"org5a7b18a"></a>OCaml.org<br />
<div class=3D"outline-text-5" id=3D"text-org5a7b18a">
<p>
OCaml.org is the main entry point for new users of OCaml. Tarides engineers=
 are key members of the OCaml.org team. Using <a href=3D"https://plausible.=
ci.dev/ocaml.org">privacy-preserving analytics</a>, the team tracked visito=
r behaviour to identify key areas for improvement. This led to a redesign o=
f the <a href=3D"https://ocaml.org/install">installation page</a>, simplify=
ing the setup process, and a revamp of the <a href=3D"https://ocaml.org/doc=
s/tour-of-ocaml">guided tour of OCaml</a> to better introduce the language.=
 Both pages saw significant traffic increases compared to 2023, with the in=
stallation page recording 69k visits, the tour reaching 65k visits and a ve=
ry encouraging total number of visits increasing by +33% between Q3 and Q4 =
2024
</p>


<div id=3D"orgc5af0ab" class=3D"figure">
<p><img src=3D"https://us1.discourse-cdn.com/flex020/uploads/ocaml/original=
/2X/1/137aea463013b31666bcade145a0067f2c1d6b82.png" alt=3D"137aea463013b316=
66bcade145a0067f2c1d6b82.png" width=3D"80%" />
</p>
</div>

<p>
Efforts to improve user experience included a satisfaction survey where 75%=
 of respondents rated their experience positively, compared to 17% for the =
previous version of the site. User testing sessions with 21 participants pr=
ovided further actionable insights, and these findings informed updates to =
the platform. The redesign of OCaml.org community sections was completed us=
ing this feedback. It introduced several new features: a new <a href=3D"htt=
ps://ocaml.org/community">Community landing page</a>, an <a href=3D"https:/=
/ocaml.org/academic-users">academic institutions page</a> with course listi=
ngs, and an <a href=3D"https://ocaml.org/industrial-users">industrial users=
 showcase</a>. The team also implemented an automated <a href=3D"https://oc=
aml.org/events">event announcement</a> system to inform the community of on=
going activities.
</p>

<p>
Progress and updates were regularly shared through the <a href=3D"https://d=
iscuss.ocaml.org/tag/ocamlorg-newsletter">OCaml.org newsletters</a>, keepin=
g the community informed about developments. Looking ahead, the team will c=
ontinue refining the platform by addressing feedback, expanding resources, =
and monitoring impact through analytics to support both new and experienced=
 OCaml users. Lastly, the infrastructure they build is starting to be used =
by other communities: <a href=3D"https://rocq-prover.org/">Rocq</a> just an=
nounced their brand new website, built using the same codebase as ocaml.org!
</p>
</div>
</li>
<li><a id=3D"orga7e62f1"></a>Dune as the Default Frontend of the OCaml Plat=
form<br />
<div class=3D"outline-text-5" id=3D"text-orga7e62f1">
<p>
One of the main goals of the OCaml Platform is to make it easier for users=
=E2=80=94especially newcomers=E2=80=94to adopt OCaml and build projects wit=
h minimal friction. A critical step toward this goal is having a single CLI=
 to serve as the frontend for the entire OCaml development experience (code=
named <a href=3D"https://speakerdeck.com/avsm/ocaml-platform-2017?slide=3D3=
4">Bob</a> in the past). This year, we made significant progress in that di=
rection with the release of the <a href=3D"https://preview.dune.build/">Dun=
e Developer Preview</a>.
</p>

<p>
Setting up an OCaml project currently requires multiple tools: <code>opam</=
code> for package management, <code>dune</code> for builds, and additional =
installations for tools like OCamlFormat or Odoc. While powerful, this frag=
mented workflow can make onboarding daunting for new users. The Dune Develo=
per Preview consolidates these steps under a single CLI, making OCaml more =
approachable. With this preview, setting up and building a project is as si=
mple as:
</p>

<ol class=3D"org-ol">
<li><code>dune pkg lock</code> to lock the dependencies.</li>
<li><code>dune build</code> to fetch the dependencies and compile the proje=
ct.</li>
</ol>

<p>
This effort is also driving broader ecosystem improvements. The current OCa=
ml compiler relies on fixed installation paths, making it difficult to cach=
e and reuse across environments, so it cannot be shared efficiently between=
 projects. To address this, we are working on making the compiler relocatab=
le (<a href=3D"https://hackmd.io/@dra27/ry56XtKii">ongoing work</a>). This =
change will enable compiler caching, which means faster project startup tim=
es and fewer rebuilds in CI. As part of this effort, we also <a href=3D"htt=
ps://github.com/ocaml-dune/opam-overlays/tree/main/packages">maintain</a> p=
atches to core OCaml projects to make them relocatable =E2=80=93 and we wor=
ked with upstream to merge (like <a href=3D"https://github.com/ocaml/ocamlf=
ind/pull/72">for ocamlfind</a>). Tarides engineers also continued to mainta=
in Dune and other key Platform projects, ensuring stability and progress. T=
his included organising and participating in regular development meetings (=
for <a href=3D"https://discuss.ocaml.org/tag/dev-meetings">Dune</a>, <a hre=
f=3D"https://github.com/ocaml/opam/wiki/2024-Developer-Meetings">opam</a>, =
<a href=3D"https://github.com/ocaml/merlin/wiki/Public-dev%E2%80%90meetings=
">Merlin</a>, <a href=3D"https://github.com/ocaml-ppx/ppxlib/wiki#dev-meeti=
ngs">ppxlib</a>, etc.)  to prioritise community needs and align efforts acr=
oss tools like Dune and opam to avoid overlapping functionality.
</p>

<p>
The Dune Developer Preview is an iterative experiment. Early user feedback =
has been promising (the Preview=E2=80=99s NPS went from +9 in Q3 2024 to +2=
7 in Q4 2024), and future updates will refine the experience further. We ai=
m to ensure that experimental features in the Preview are upstreamed into s=
table releases once thoroughly tested. For instance, the package management=
 feature is already in Dune 3.17. We will announce and document it more wid=
ely when we believe it is mature enough for broader adoption.
</p>
</div>
</li>
<li><a id=3D"org8735687"></a>Editors<br />
<div class=3D"outline-text-5" id=3D"text-org8735687">
<p>
In 2024, Tarides focused on improving editor integration to lower barriers =
for new OCaml developers and enhance the experience for existing users. Edi=
tors are the primary way developers interact with programming languages, ma=
king seamless integration essential for adoption. With more than <a href=3D=
"https://survey.stackoverflow.co/2024/technology#1-integrated-development-e=
nvironment">73% of developers using Visual Studio Code (VS Code)</a>, VS Co=
de is particularly important to support, especially for new developers and =
those transitioning to OCaml. As part of this effort, Tarides wrote and mai=
ntained the <a href=3D"https://marketplace.visualstudio.com/items?itemName=
=3Docamllabs.ocaml-platform">official VS Code plugin for OCaml,</a> priorit=
ising feature development for this editor. We also support other popular ed=
itors like Emacs and Vim=E2=80=94used by many Tarides engineers=E2=80=94on =
a best-effort basis. Improvements to <a href=3D"https://github.com/ocaml/oc=
aml-lsp">OCaml-LSP</a> and <a href=3D"https://github.com/ocaml/merlin">Merl=
in</a>, both maintained by Tarides, benefit all supported editors, ensuring=
 a consistent and productive development experience.
</p>


<div id=3D"org9bfcb42" class=3D"figure">
<p><img src=3D"https://us1.discourse-cdn.com/flex020/uploads/ocaml/original=
/2X/9/9b63754a94bc853f608e630dd9908097570a33ac.png" alt=3D"9b63754a94bc853f=
608e630dd9908097570a33ac.png" width=3D"80%" />
</p>
</div>

<p>
While several plugins for OCaml exist (<a href=3D"https://marketplace.visua=
lstudio.com/items?itemName=3Dfreebroccolo.reasonml">OCaml and Reason IDE</a=
>=E2=80=93128k installs, <a href=3D"https://marketplace.visualstudio.com/it=
ems?itemName=3Dhackwaly.ocaml">Hackwaly</a>=E2=80=9390k installs), our <a h=
ref=3D"https://marketplace.visualstudio.com/items?itemName=3Docamllabs.ocam=
l-platform">OCaml VS Code plugin</a> =E2=80=93now with over 208k downloads=
=E2=80=93 is a key entry point for developers adopting OCaml in 2024. This =
year, we added integration with the Dune Developer Preview, allowing users =
to leverage Dune's package management and tooling directly from the editor.=
 Features such as real-time diagnostics, autocompletion, and the ability to=
 fetch dependencies and build projects without leaving VS Code simplify dev=
elopment and make OCaml more accessible for newcomers.
</p>

<p>
The standout update in 2024 was the addition of <a href=3D"https://tarides.=
com/blog/2024-08-28-project-wide-occurrences-a-new-navigation-feature-for-o=
caml-5-2-users/">project-wide reference support</a>, a long-requested featu=
re from the OCaml community and a top priority for commercial developers. T=
his feature allows users to locate all occurrences of a term across an enti=
re codebase, making navigation and refactoring significantly easier=E2=80=
=94especially in large projects. Delivering this feature required coordinat=
ed updates across the ecosystem, including changes to the OCaml compiler, M=
erlin, OCaml LSP, Dune, and related tools. The impact is clear: faster navi=
gation, reduced cognitive overhead, and more efficient workflows when worki=
ng with complex projects.
</p>

<p>
Additional improvements included support for new Language Server Protocol f=
eatures, such as <code>signature_help</code> and <code>inlay_hint</code>, w=
hich enhance code readability and provide more contextual information. Thes=
e updates enabled the introduction of new commands, such as the "Destruct" =
command. This <a href=3D"https://tarides.com/blog/2024-05-29-effective-ml-t=
hrough-merlin-s-destruct-command/">little-known but powerful feature</a> au=
tomatically expands a variable into a pattern-matching expression correspon=
ding to its inferred type, streamlining tasks that would otherwise be tedio=
us.
</p>


<div id=3D"org8aa4665" class=3D"figure">
<p><img src=3D"https://tarides.com/blog/images/2024-05-21.merlin-destruct/m=
erlin-destruct-1~kHA8_iC67tU-2us0hsjbhQ.gif" alt=3D"merlin-destruct-1~kHA8_=
iC67tU-2us0hsjbhQ.gif" width=3D"80%" />
</p>
</div>
</div>
</li>
<li><a id=3D"orge769c4d"></a>Documentation<br />
<div class=3D"outline-text-5" id=3D"text-orge769c4d">
<p>
Documentation was identified as the number one pain point in the latest <a =
href=3D"https://discuss.ocaml.org/t/ann-ocaml-user-survey-2023/13469">OCSF =
survey</a>. It is a critical step in the OCaml developer journey, particula=
rly after setting up the language and editor. Tarides prioritised improving=
 <code>odoc</code> to make it easier for developers to find information, le=
arn the language, and navigate the ecosystem effectively. High-quality docu=
mentation and tools to help developers get "unstuck" are essential to reduc=
ing friction and ensuring a smooth adoption experience.
</p>

<p>
Tarides is the primary contributor and maintainer of <a href=3D"https://git=
hub.com/ocaml/odoc"><code>odoc</code></a>, OCaml=E2=80=99s main documentati=
on tool. In preparation for the <a href=3D"https://discuss.ocaml.org/t/odoc=
-3-0-planning/14360">odoc 3 release</a>, our team introduced two significan=
t updates. First, the <a href=3D"https://tarides.com/blog/2024-02-28-two-ma=
jor-improvements-in-odoc-introducing-search-engine-integration/"><code>odoc=
</code> Search Engine</a> was integrated, allowing developers to search dir=
ectly within OCaml documentation via the <a href=3D"https://ocaml.org/docs"=
>Learn page</a>. Second, the <a href=3D"https://tarides.com/blog/2024-09-17=
-introducing-the-odoc-cheatsheet-your-handy-guide-to-ocaml-documentation/">=
<code>odoc</code> Cheatsheet</a> provides a concise reference for creating =
and consuming OCaml documentation. We would like to believe that these upda=
tes, deployed on ocaml.org, were the main cause of a <b><b>45% increase in =
package documentation usage</b></b> on <a href=3D"https://ocaml.org/pkg/">h=
ttps://ocaml.org/pkg/</a> in Q4 2024!
</p>


<div id=3D"orgafdf37b" class=3D"figure">
<p><img src=3D"https://us1.discourse-cdn.com/flex020/uploads/ocaml/original=
/2X/a/a974b30576399d84e1b26936b4b31bdf364e76db.png" alt=3D"a974b30576399d84=
e1b26936b4b31bdf364e76db.png" width=3D"80%" />
</p>
</div>

<p>
Another area where developers often get stuck is debugging programs that do=
n=E2=80=99t work as expected. Alongside reading documentation, live debugge=
rs are crucial for understanding program issues. Tarides worked to improve =
native debugging for OCaml, focusing on macOS, where LLDB is the only suppo=
rted debugger. Key progress included a <a href=3D"https://github.com/ocaml/=
ocull/pull/13050">name mangling fix</a> to improve symbol resolution, resto=
ring ARM64 backtraces, and introducing Python shims for code sharing betwee=
n LLDB and GDB.
</p>

<p>
OCaml=E2=80=99s error messages remain a common pain point, particularly for=
 syntax errors. Unlike <a href=3D"https://doc.rust-lang.org/error_codes/err=
or-index.html">Rust=E2=80=99s error index</a>, OCaml does not (yet!) have a=
 centralised repository of error explanations. Instead, we are focused on m=
aking error messages more self-explanatory. This requires developing new to=
ols, such as <a href=3D"https://github.com/let-def/lrgrep"><code>lrgrep</co=
de></a>, a domain-specific language for analysing grammars built with Menhi=
r. <code>lrgrep</code> enables concise definitions of error cases, making i=
t possible to identify and address specific patterns in the parser more eff=
ectively. This provides a practical way to improve error messages without r=
equiring changes to the compiler. In December 2024, @let-def successfully d=
efended his PhD (a collaboration between Inria and Tarides) on this topic, =
so expect upstreaming work to start soon.
</p>
</div>
</li>
<li><a id=3D"orgcbe6385"></a>OCaml Package Ecosystem<br />
<div class=3D"outline-text-5" id=3D"text-orgcbe6385">
<p>
The last piece of friction we aimed to remove in 2024 was ensuring that use=
rs wouldn=E2=80=99t encounter errors when installing a package from the com=
munity. This required catching issues early=E2=80=94before packages are acc=
epted into <code>opam-repository</code> and made available to the broader e=
cosystem. To achieve this, Tarides has built and maintained extensive CI in=
frastructure, developed tools to empower contributors, and guided package a=
uthors to uphold the high quality of the OCaml package ecosystem.
</p>

<p>
In 2024, Tarides=E2=80=99 CI infrastructure supported the OCaml community a=
t scale, handling approximately <b><b>20 million jobs on 68 machines coveri=
ng 5 hardware architectures</b></b>. This infrastructure continuously teste=
d packages to ensure compatibility across a variety of platforms and config=
urations, including OCaml=E2=80=99s Tier 1 platforms: x86, ARM, RISC-V, s39=
0x, and Power. It played a critical role during major events, such as new O=
Caml releases, by validating the ecosystem=E2=80=99s readiness and catching=
 regressions before they impacted users. Additionally, this infrastructure =
supported daily submissions to <code>opam-repository</code>, enabling contr=
ibutors to identify and resolve issues early, reducing downstream problems.=
 To improve transparency and accessibility, we introduced a CI pipeline tha=
t automates configuration updates, ensuring seamless deployments and allowi=
ng external contributors to propose and apply changes independently.
</p>

<p>
In addition to maintaining the infrastructure, Tarides developed and mainta=
ined the CI framework running on top of it. A major focus in 2024 was makin=
g CI checks available as standalone CLI tools distributed via <code>opam</c=
ode>. These tools enable package authors to run checks locally, empowering =
them to catch issues before submitting their packages to <code>opam-reposit=
ory</code>. This approach reduces reliance on central infrastructure and al=
lows developers to work more efficiently. The CLI tools are also compatible=
 with GitHub Actions, allowing contributors to integrate tests into their o=
wn workflows. To complement these efforts, we enhanced <code>opam-repo-ci</=
code>, which remains an essential safety net for packages entering the repo=
sitory. Integration tests for linting and reverse dependencies were introdu=
ced, enabling more robust regression detection and improving the reliabilit=
y of the ecosystem.
</p>

<p>
To uphold the high standards of the OCaml ecosystem, every package submissi=
on to <code>opam-repository</code> is reviewed and validated to ensure it m=
eets quality criteria. This gatekeeping process minimises errors users migh=
t encounter when installing community packages, enhancing trust in the ecos=
ystem. In 2024, Tarides continued to be actively <a href=3D"https://github.=
com/ocaml/opam-repository/blob/master/governance/README.md#maintenance">inv=
olved</a> in maintaining the repository, ensuring its smooth operation. We =
also worked to guide new package authors by updating the <a href=3D"https:/=
/github.com/ocaml/opam-repository/blob/master/CONTRIBUTING.md">contributing=
 guide</a> and creating a detailed <a href=3D"https://github.com/ocaml/opam=
-repository/wiki">wiki</a> with actionable instructions for adding and main=
taining packages. These resources were <a href=3D"https://discuss.ocaml.org=
/t/opam-repository-updated-documentation-retirement-and-call-for-maintainer=
s/14325">announced on Discuss</a> to reach the community and simplify the p=
rocess for new contributors, improving the overall quality of submissions.
</p>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-orgbdaaec3" class=3D"outline-4">
<h4 id=3D"orgbdaaec3">Playing Better with the Larger Ecosystem</h4>
<div class=3D"outline-text-4" id=3D"text-orgbdaaec3">
</div>
<ul class=3D"org-ul">
<li><a id=3D"org432cd15"></a>Concurrent &amp; Parallel Programming in OCaml=
<br />
<div class=3D"outline-text-5" id=3D"text-org432cd15">
<blockquote>
<p>
<span class=3D"underline">"Shared-memory multiprocessors have never really =
'taken off', at least in the general public. For large parallel computation=
s, clusters (distributed-memory systems) are the norm. For desktop use, mon=
oprocessors are plenty fast."</span> &#x2013;  <a href=3D"https://sympa.inr=
ia.fr/sympa/arc/caml-list/2002-11/msg00274.html">Xavier Leroy, November 200=
2</a>
</p>
</blockquote>

<p>
Twenty+ years after this statement, processors are multicore by default, an=
d OCaml has adapted to this reality. Thanks to the combined efforts of the =
OCaml Labs and Tarides team, the OCaml 5.x series introduced multicore supp=
ort after <a href=3D"https://tarides.com/blog/2023-03-02-the-journey-to-oca=
ml-multicore-bringing-big-ideas-to-life/">a decade of research and experime=
ntation.</a> While this was a landmark achievement, the path to making mult=
icore OCaml stable, performant, and user-friendly has required significant =
collaboration and continued work. In 2024, Tarides remained focused on meet=
ing the needs of the broader community and commercial users.
</p>

<p>
OCaml 5.3 (released last week) was an important milestone in this journey. =
With companies such as <a href=3D"https://routine.co/">Routine</a>, <a href=
=3D"https://hyper.systems">Hyper</a>, and <a href=3D"https://tarides.com/bl=
og/2024-09-19-eio-from-a-user-s-perspective-an-interview-with-simon-grondin=
/">Asemio</a> adopting OCaml 5.x, and advanced experimentation ongoing at J=
ane Street, Tezos, Semgrep, and others, OCaml 5.3 is increasingly seen as t=
he first =E2=80=9Cstable=E2=80=9D release of the multicore series. While so=
me <a href=3D"https://github.com/ocaml/ocaml/issues/13733">performance issu=
es</a> remain in specific parts of the runtime, we are working closely with=
 the community to address them in OCaml 5.4. Tarides contributed extensivel=
y to the <a href=3D"https://tarides.com/blog/2024-05-15-the-ocaml-5-2-relea=
se-features-and-fixes/">5.2</a> and <a href=3D"https://tarides.com/blog/202=
5-01-09-ocaml-5-3-features-and-fixes/">5.3</a> releases by directly contrib=
uting to <b><b>nearly two-thirds of the merged pull requests</b></b>. Since=
 Multicore OCaml was incorporated upstream in 2023, we have been continuous=
ly involved in the compiler and language evolution in collaboration with In=
ria and the broader OCaml ecosystem.
</p>

<p>
Developing correct concurrent and parallel software is inherently challengi=
ng, and this applies as much to the runtime as to applications built on it.=
 In 2024, we focused on advanced testing tools to help identify and address=
 subtle issues in OCaml=E2=80=99s runtime and libraries. The <a href=3D"htt=
ps://github.com/ocaml-multicore/multicoretests">property-based test suite</=
a> reached maturity this year, uncovering over 40 critical issues, with 28 =
resolved by Tarides engineers. Trusted to detect subtle bugs, such as <a hr=
ef=3D"https://github.com/ocaml/ocaml/pull/13580#issuecomment-2478454501">is=
sues with orphaned ephemerons</a>, the suite has become an integral part of=
 OCaml=E2=80=99s development workflow. Importantly, it is accessible to con=
tributors without deep expertise in multicore programming, ensuring any cha=
nges in the compiler or the runtime do not introduce subtle concurrency bug=
s.
</p>


<div id=3D"org77c76c4" class=3D"figure">
<p><img src=3D"https://tarides.com/blog/images/false-alarms-plot-errors-onl=
y.png" alt=3D"false-alarms-plot-errors-only.png" width=3D"80%" />
</p>
</div>

<p>
Another critical effort was extending ThreadSanitizer (TSAN) support to mos=
t Tier 1 platforms and <a href=3D"https://tarides.com/blog/2024-08-21-how-t=
san-makes-ocaml-better-data-races-caught-and-fixed/">applying it extensivel=
y to find and fix data races in the runtime</a>. This work has improved the=
 safety and reliability of OCaml=E2=80=99s multicore features and is now pa=
rt of the standard testing process, further ensuring the robustness of the =
runtime.
</p>

<p>
Beyond testing, we also worked to enhance library support for multicore pro=
gramming. The release of the <a href=3D"https://tarides.com/blog/2024-12-11=
-saturn-1-0-data-structures-for-ocaml-multicore/">Saturn library</a> introd=
uced lock-free data structures tailored for OCaml 5.x. To validate these st=
ructures, we developed <a href=3D"https://tarides.com/blog/2024-04-10-multi=
core-testing-tools-dscheck-pt-2/">DSCheck</a>, a static analyser for verify=
ing lock-free algorithms. These tools, along with Saturn itself, provide de=
velopers with reliable building blocks for scalable multicore applications.
</p>

<p>
Another promising development in 2024 was the introduction of the <a href=
=3D"https://ocaml-multicore.github.io/picos/doc/picos/index.html">Picos</a>=
 framework. Picos aims to provide a low-level foundation for concurrency, s=
implifying interoperability between libraries like Eio, Moonpool, Miou, Rio=
t, Affect, etc. Picos offers a simple, unopinionated, and safe abstraction =
layer for concurrency. We believe it can potentially standardise concurrenc=
y patterns in OCaml, but we are not there yet. Discussions are underway to =
integrate parts of Picos into higher-level libraries and, eventually, the s=
tandard library. We still have a long way to go, and getting feedback from =
people who actively tried it in production settings would be very helpful!
</p>
</div>
</li>
<li><a id=3D"orgf5de89a"></a>Web<br />
<div class=3D"outline-text-5" id=3D"text-orgf5de89a">
<p>
Web development remains one of the most visible and impactful domains for p=
rogramming languages; <a href=3D"https://survey.stackoverflow.co/2024/techn=
ology#most-popular-technologies-language">JavaScript, HTML, and CSS are the=
 most popular technologies</a> in 2024. For OCaml to grow, it must integrat=
e well with this ecosystem. Fortunately, the OCaml community has already bu=
ilt a solid foundation for web development!
</p>

<p>
On the frontend side, in 2024, Tarides focused on strengthening key tools l=
ike <a href=3D"https://github.com/ocsigen/js_of_ocaml"><code>js_of_ocaml</c=
ode></a> by expanding its support for WebAssembly (Wasm). <code>js_of_ocaml=
</code> (JSOO) has long been the backbone of OCaml=E2=80=99s web ecosystem,=
 enabling developers to compile OCaml bytecode into JavaScript. This year, =
we <a href=3D"https://github.com/ocsigen/js_of_ocaml/pull/1494">merged Wasm=
 support back into JSOO</a>, unifying the toolchain and simplifying adoptio=
n for developers. The performance gain of Wasm has been very impressive so =
far: CPU-intensive applications in commercial settings have seen <b><b>2x t=
o 8x speedups</b></b> using Wasm compared to traditional JSOO. We also work=
ed on better support for effect handlers in <code>js_of_ocaml</code> to ens=
ure applications built with OCaml 5 can run as fast in the browser as they =
used to with OCaml 4.
</p>

<p>
On the backend side, Tarides maintained and contributed to Dream, a lightwe=
ight and flexible web framework. Dream powers projects like <a href=3D"http=
s://tarides.com/">our own website</a> and the <a href=3D"https://mirageos.o=
rg">MirageOS website</a>, where we maintain a fork to make Dream and Mirage=
OS work well together. Additionally, in 2024, we enhanced <code>cohttp</cod=
e>, adding <a href=3D"https://github.com/mirage/ocaml-cohttp/pull/847">prox=
y support</a> to address modern HTTP requirements.
</p>

<p>
While Tarides focused on JSOO, <code>wasm_of_ocaml</code>, Dream, and Cohtt=
p, the broader community made significant strides elsewhere. Tools like Mel=
ange offer an alternative for compiling OCaml to JavaScript, and frameworks=
 like Ocsigen, which integrates backend and frontend programming, continue =
to push the boundaries of what=E2=80=99s possible with OCaml on the web. No=
tably, Tarides will build on this momentum in 2025 through a <a href=3D"htt=
ps://nlnet.nl/project/OCAML-directstyle/">grant</a> to improve direct-style=
 programming for Ocsigen.
</p>
</div>
</li>
<li><a id=3D"orgff0205d"></a>Windows<br />
<div class=3D"outline-text-5" id=3D"text-orgff0205d">
<p>
Windows is the most widely used operating system, making first-class suppor=
t for it critical to OCaml=E2=80=99s growth. In 2024, <b><b>31% of visitors=
 to <a href=3D"https://ocaml.org">ocaml.org</a></b></b> accessed the site f=
rom Windows, yet the platform=E2=80=99s support historically lagged behind =
Linux and macOS. This gap created barriers for both newcomers and commercia=
l users. We saw these challenges firsthand, with Outreachy interns struggli=
ng to get started due to tooling issues, and commercial users reporting dif=
ficulties with workflow reliability and compilation speed.
</p>

<p>
To address these pain points, Tarides, in collaboration with the OCaml comm=
unity, launched the <a href=3D"https://tarides.com/blog/2024-05-22-launchin=
g-the-first-class-windows-project/">Windows Working Group</a>. A key milest=
one that our team contributed to was the release this year of <b><b>opam 2.=
2</b></b>, three years after its predecessor. This release made the upstrea=
m <code>opam-repository</code> fully compatible with Windows for the first =
time, removing the need for a separate repository and providing Windows dev=
elopers access to the same ecosystem as Linux and macOS users. The impact h=
as been clear: feedback on the updated installation workflow has been overw=
helmingly positive, with developers reporting that it "just works." The <a =
href=3D"https://ocaml.org/install">install page</a> for Windows is now sign=
ificantly shorter and simpler!
</p>

<p>
In the OCaml 5.3 release, Tarides restored the MSVC Windows port, ensuring =
native compatibility and improving performance for Windows users. To furthe=
r support the ecosystem, Tarides added Windows machines to the opam infrast=
ructure, enabling automated testing for Windows compatibility on every new =
package submitted to opam. This has already started to improve package supp=
ort, with ongoing fixes from Tarides and the community. The results are pub=
licly visible at <a href=3D"https://windows.check.ci.dev/">windows.check.ci=
.dev</a>, which we run on our infrastructure, providing transparency and a =
way to track progress on the status of our ecosystem. While package support=
 is not yet on par with other platforms, we believe that the foundations la=
id in 2024=E2=80=94simplified installation, improved tooling, and continuou=
s package testing=E2=80=94represent a significant step forward.
</p>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-orgfbf736f" class=3D"outline-4">
<h4 id=3D"orgfbf736f">Community Engagement and Outreach</h4>
<div class=3D"outline-text-4" id=3D"text-orgfbf736f">
<p>
In 2024, Tarides contributed to building a stronger OCaml community through=
 events, internships, and support for foundational projects. The creation o=
f <a href=3D"https://fun-ocaml.com/">FUN OCaml 2024</a> in Berlin was the f=
irst dedicated OCaml-only event for a long time (similar to how the OCaml W=
orkshop was separated from ICFP in the past). Over 75 participants joined f=
or two days of talks, workshops, and hacking, and the event has already rea=
ched <a href=3D"https://www.youtube.com/channel/UC3TI-fmhJ_g3_n9fHaXGZKA">5=
k+ views on YouTube</a>. Tarides also co-chaired the OCaml Workshop at <a h=
ref=3D"https://icfp24.sigplan.org/">ICFP 2024</a> in Milan, bringing togeth=
er contributors from academia, industry, and open-source communities. These=
 events brought together two different kinds of OCaml developers (with some=
 overlap), bringing an interesting energy to our community.
</p>

<p>
To expand local community involvement, Tarides organised OCaml hacking meet=
ups in <a href=3D"https://discuss.ocaml.org/t/announcing-ocaml-manila-meetu=
ps/14300">Manila</a> and <a href=3D"https://discuss.ocaml.org/t/chennai-oca=
ml-meetup-october-2024/15417">Chennai</a>. To make it easier for others to =
host similar events, we curated a list of interesting hacking issues from p=
ast <a href=3D"https://tarides.com/blog/2023-03-22-compiler-hacking-in-camb=
ridge-is-back/">Cambridge sessions</a>, now available on <a href=3D"https:/=
/github.com/tarides/compiler-hacking/wiki">GitHub</a>.
</p>

<p>
As part of the Outreachy program, Tarides supported two rounds of internshi=
ps in 2024, with results published on <a href=3D"https://discuss.ocaml.org/=
tag/outreachy">Discuss</a> and <a href=3D"https://watch.ocaml.org">watch.oc=
aml.org</a>. These internships not only provided great contributions to our=
 ecosystem but also brought fresh insights into the challenges faced by new=
 users. For example, interns identified key areas where documentation and t=
ooling could be improved, directly informing future updates.
</p>

<p>
Tarides also maintained its commitment to funding critical open-source proj=
ects and maintainers. We continued funding <a href=3D"https://blog.robur.co=
op/articles/finances.html">Robur</a> for their maintenance work on MirageOS=
 (most of those libraries are used by many =E2=80=93including us=E2=80=93 e=
ven in non-MirageOS context) and <a href=3D"https://github.com/sponsors/dbu=
enzli">Daniel B=C3=BCnzli</a>, whose libraries like <code>cmdliner</code> a=
re essential for some of our development.
</p>

<p>
Finally, Tarides extended sponsorships to non-OCaml-specific events, includ=
ing <a href=3D"https://jfla.inria.fr/jfla2024.html">JFLA</a>, <a href=3D"ht=
tps://bobkonf.de/2025/en/">BobConf</a>, <a href=3D"https://www.fsttcs.org.i=
n/">FSTTCS</a>, and <a href=3D"https://www.youtube.com/watch?v=3DfMy0XhFdLA=
E">Terminal Feud</a> (which garnered over 100k views). These events expande=
d OCaml=E2=80=99s visibility to new audiences and contexts, introducing the=
 language to a broader technical community that =E2=80=93we hope=E2=80=93 w=
ill discover OCaml and enjoy using it as much as we do.
</p>
</div>
</div>
<div id=3D"outline-container-orga54e970" class=3D"outline-4">
<h4 id=3D"orga54e970">What=E2=80=99s Next?</h4>
<div class=3D"outline-text-4" id=3D"text-orga54e970">
<p>
As we begin 2025, Tarides remains committed to making OCaml a mainstream la=
nguage. Our focus this year is to position OCaml as a robust choice for mis=
sion-critical applications by enhancing developer experience, ecosystem int=
egration, and readiness for high-assurance use cases.
</p>

<p>
We aim to build on the Dune Developer Preview to further improve usability =
across all platforms, with a particular emphasis on Windows, to make OCaml =
more accessible to a broader range of developers. Simultaneously, we will e=
nsure OCaml is ready for critical applications in industries where reliabil=
ity, performance, and security are essential. Projects like <a href=3D"http=
s://tarides.com/blog/2023-07-31-ocaml-in-space-welcome-spaceos/">SpaceOS</a=
> showcase the potential of memory- and type-safe languages for safety-crit=
ical systems. Built on MirageOS and OCaml=E2=80=99s unique properties, Spac=
eOS is part of the EU-funded <a href=3D"https://orchide.pages.upb.ro/">Orch=
ide</a> project and aims to set a new standard for edge computing in space.=
 Additionally, SpaceOS is being launched in the US through our spin-off <a =
href=3D"https://parsimoni.co">Parsimoni</a>. However, these needs are not l=
imited to Space: both the <a href=3D"https://digital-strategy.ec.europa.eu/=
en/policies/cyber-resilience-act">EU Cyber Resilience Act</a> and the <a hr=
ef=3D"https://tarides.com/blog/2024-03-07-a-time-for-change-our-response-to=
-the-white-house-cybersecurity-press-release/">US cybersecurity initiatives=
</a> highlight the growing demand for type-safe, high-assurance software to=
 address compliance and security challenges in sensitive domains. Tarides b=
elieves that OCaml has a decisive role to play here in 2025!
</p>

<p>
I=E2=80=99d like to personally thank our sponsors and customers, especially=
 Jane Street, for their unwavering support over the years, and to <a href=
=3D"https://github.com/dangdennis">Dennis Dang</a>, our single recurring Gi=
tHub sponsor. Finally, to every member of Tarides who worked so hard in 202=
4 to make all of this happen: thank you. I=E2=80=99m truly lucky to be sail=
ing with you on this journey!
</p>

<p>
<i>We are looking for <a href=3D"https://github.com/sponsors/tarides">spons=
ors on GitHub</a>, are happy to <a href=3D"https://tarides.com/innovation/"=
>collaborate on innovative projects</a> involving OCaml or MirageOS and off=
er <a href=3D"https://tarides.com/services/">commercial services</a> for op=
en-source projects =E2=80=93 including long-term support, development of ne=
w tools, or assistance with porting projects to OCaml 5 or Windows.</i>
</p>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-10" class=3D"outline-2">
<h2 id=3D"10">Other OCaml News</h2>
<div class=3D"outline-text-2" id=3D"text-10">
</div>
<div id=3D"outline-container-orgf1ff581" class=3D"outline-3">
<h3 id=3D"orgf1ff581">From the ocaml.org blog</h3>
<div class=3D"outline-text-3" id=3D"text-orgf1ff581">
<p>
Here are links from many OCaml blogs aggregated at <a href=3D"https://ocaml=
.org/blog/">the ocaml.org blog</a>.
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://tarides.com/blog/2025-01-15-using-clang-cl-with-ocam=
l-5">Using <code>clang-cl</code> With OCaml 5</a></li>
<li><a href=3D"https://gallium.inria.fr/blog/florian-cw-2025-01-13">Florian=
=E2=80=99s compiler weekly, 13 January 2025</a></li>
<li><a href=3D"https://tarides.com/blog/2025-01-09-ocaml-5-3-features-and-f=
ixes">OCaml 5.3: Features and Fixes!</a></li>
<li><a href=3D"https://blog.robur.coop/articles/2025-01-07-carton-and-cache=
t.html">Git, Carton and emails</a></li>
</ul>
</div>
</div>
</div>
<div id=3D"outline-container-org7e685ee" class=3D"outline-2">
<h2 id=3D"org7e685ee">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org7e685ee">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe to the=
 <a href=3D"https://sympa.inria.fr/sympa/info/caml-list">caml-list</a>.
</p>

<div class=3D"authorname" id=3D"orgaafc1b0">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--

