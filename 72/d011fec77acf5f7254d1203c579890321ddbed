Return-Path: <caml-list-owner@inria.fr>
Authentication-Results: plum.tunbury.org;
	dkim=pass (1024-bit key; unprotected) header.d=inria.fr header.i=@inria.fr header.a=rsa-sha256 header.s=dc header.b=XDNlO2bz;
	dkim-atps=neutral
Received-SPF: Permerror (mailfrom) identity=mailfrom; client-ip=192.134.164.83; helo=mail2-relais-roc.national.inria.fr; envelope-from=caml-list-owner@inria.fr; receiver=tunbury.org 
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by plum.tunbury.org (Postfix) with ESMTPS id B830F400A0
	for <caml-list@tunbury.org>; Tue, 11 Mar 2025 15:00:38 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=inria.fr; s=dc;
  h=from:to:date:message-id:mime-version:subject:reply-to:
   sender:list-id:list-help:list-subscribe:list-unsubscribe:
   list-post:list-owner:list-archive;
  bh=0rRdcXE2o+2nNpgtHj5CecIAKJvqAHRBRiShZoRr5uo=;
  b=XDNlO2bzBaqQ+UiBC9gEiravW7C1WBsLXQoymD9VobHMlNsHHIfWDrGJ
   dOM0M1ABTXNtSSgabul/RWAT/CyzLOxjPuQ6F/PvuaiSVALtEmPJ0oB0a
   Btu7Jk5gl4Wafbiq22q9U/6bRwyFuMDSB+RaiyjrTuknwhyKfmZc/RqpU
   8=;
Authentication-Results: mail2-relais-roc.national.inria.fr; dkim=none (message not signed) header.i=none; spf=TempError smtp.mailfrom=caml-list-owner@inria.fr; spf=None smtp.helo=postmaster@sympa.inria.fr
Received-SPF: TempError (mail2-relais-roc.national.inria.fr:
  domain of caml-list-owner@inria.fr temporarily is not
  available to assert whether or not 128.93.162.160 is
  permitted sender) identity=mailfrom;
  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="caml-list-owner@inria.fr"; x-conformance=spf_only;
  x-record-type="v=spf1"; x-record-text="v=spf1
  include:mailout.safebrands.com a:basic-mail.safebrands.com
  a:basic-mail01.safebrands.com a:basic-mail02.safebrands.com
  ip4:128.93.142.0/24 ip4:192.134.164.0/24 ip4:128.93.162.160
  ip4:128.93.162.3 ip4:128.93.162.88 ip4:89.107.174.7 mx ~all"
Received-SPF: None (mail2-relais-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@sympa.inria.fr) identity=helo;
  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="postmaster@sympa.inria.fr"; x-conformance=spf_only
X-IronPort-AV: E=Sophos;i="6.14,239,1736809200"; 
   d="scan'208,217";a="212350482"
Received: from prod-listesu18.inria.fr (HELO sympa.inria.fr) ([128.93.162.160])
  by mail2-relais-roc.national.inria.fr with ESMTP; 11 Mar 2025 16:00:37 +0100
Received: by sympa.inria.fr (Postfix, from userid 20132)
	id E8B60E0D21; Tue, 11 Mar 2025 16:00:35 +0100 (CET)
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 5A7D9E0260
	for <caml-list@sympa.inria.fr>; Tue, 11 Mar 2025 16:00:32 +0100 (CET)
X-IronPort-AV: E=Sophos;i="6.14,239,1736809200"; 
   d="scan'208,217";a="212350431"
Received: from mac-03220211.irisa.fr ([131.254.21.249])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 11 Mar 2025 16:00:32 +0100
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, caml-list@inria.fr
Date: Tue, 11 Mar 2025 16:00:31 +0100
Message-ID: <m2ldtbipdc.fsf@mac-03220211.irisa.fr>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News
Reply-To: Alan Schmitt <alan.schmitt@polytechnique.org>
X-Loop: caml-list@inria.fr
X-Sequence: 19278
Errors-To: caml-list-owner@inria.fr
Precedence: list
Precedence: bulk
Sender: caml-list-request@inria.fr
X-no-archive: yes
List-Id: <caml-list.inria.fr>
List-Help: <mailto:sympa_inria@inria.fr?subject=help>
List-Subscribe: <mailto:sympa_inria@inria.fr?subject=subscribe%20caml-list>
List-Unsubscribe: <mailto:sympa_inria@inria.fr?subject=unsubscribe%20caml-list>
List-Post: <mailto:caml-list@inria.fr>
List-Owner: <mailto:caml-list-request@inria.fr>
List-Archive: <https://sympa.inria.fr/sympa/arc/caml-list>
Archived-At: <https://sympa.inria.fr/sympa/arcsearch_id/caml-list/2025-03/m2ldtbipdc.fsf%40mac-03220211.irisa.fr>

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of March 04 to 11,
2025.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

OCaml projects utilizing Category theory
Docker base images and OCaml-CI support for OCaml < 4.08
ocamlmig, a tool to rewrite ocaml code, and complement `[@@deprecated]'
Ortac 0.6.0 improve bug reporting
Dune Developer Preview Updates
ppxlib.0.36.0
I created an OCaml grammar for ANTLR4 (Earley parser compatible)
Melange 5.0
Other OCaml News
Old CWN


OCaml projects utilizing Category theory
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ocaml-projects-utilizing-category-theory/162=
06/5>


Deep in this thread, Dmitrii Kovanikov announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  I started writing [a series of articles about Pragmatic Category
  Theory] in OCaml, and there's a repository with examples:

  =E2=80=A2 <https://github.com/chshersh/pragmatic-category-theory>

  If you're interested in a complete project, I made *CCL: Categorical
  Configuration Language* which leverages multiple Category Theory
  concepts:

  =E2=80=A2 [The Most Elegant Configuration Language by @chshersh]

  I'm currently working on a [GitHub TUI] project in OCaml but the usage
  of CT concepts is not that crazy there. For now, I only use Semigroup
  and Monoids (which some people don't even consider part of CT but just
  Abstract Algebra).


[a series of articles about Pragmatic Category Theory]
<https://chshersh.com/blog/2024-07-30-pragmatic-category-theory-part-01.htm=
l>

[The Most Elegant Configuration Language by @chshersh]
<https://chshersh.com/blog/2025-01-06-the-most-elegant-configuration-langua=
ge.html>

[GitHub TUI] <https://github.com/chshersh/github-tui>


Docker base images and OCaml-CI support for OCaml < 4.08
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/docker-base-images-and-ocaml-ci-support-for-=
ocaml-4-08/16229/1>


Mark Elvers announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The [opam repository archival] process has set the minimum supported
  OCaml version to 4.08 _for opam repository_.  It logically follows
  that opam-repo-ci should only test against OCaml >=3D 4.08.

  The purpose of this post is to get a sense of whether the rest of the
  OCaml infrastructure should also adopt the same lower bound.  The
  current lower bound is 4.02.

  Specific examples include OCaml-CI.  Individual projects can already
  opt out of testing on older platforms by adding a lower bound in the
  opam file.

  Docker base images are built for all versions of OCaml used in the CI
  systems. These images are published weekly on Docker Hub.  We know
  that these images are also used by the community, but the pull counter
  is not broken down by individual tag.  Potentially only the latest
  OCaml versions are being used.

  Users impacted by packages which have been archived from opam
  repository can easily restore the packages by adding the archive
  repository to the opam switch.  This only needs to be done once.
  Users can build their own Docker base images, but they would need to
  be rebuilt periodically to keep them up to date.

  Would removing testing on < 4.08 in OCaml CI or removing the Docker
  base images < 4.08 impact you?


[opam repository archival]
<https://discuss.ocaml.org/t/opam-repository-archival-phase-2-ocaml-4-08-is=
-the-lower-bound/15965>


ocamlmig, a tool to rewrite ocaml code, and complement `[@@deprecated]'
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-ocamlmig-a-tool-to-rewrite-ocaml-code-an=
d-complement-deprecated/16090/10>


v-gb announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi,

  I released a new version of ocamlmig in opam, whose main change is to
  avoid reformatting everything in codebases that don't use
  ocamlformat. Instead, only subexpressions touched by a rewrite are
  reformatted.  It also requalifies identifier in more places to
  preserve their meaning (e.g. when replacing `string_of_int' by
  `Int.to_string', there might be an `Int' module in scope that's not
  `Stdlib.Int'. In such case, ocamlmig would more often replace
  `string_of_int' by `Stdlib.Int.to_string').

  Separately, I've thought about the recent addition of let+ operators
  in Cmdliner, and how one might migrate from the use of `$' to
  them. Concretetely, given:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let bistro () (`Dry_run dry_run) (`Package_names pkg_names) ...=
 =3D the code
  =E2=94=82 open Cmdliner
  =E2=94=82 let term =3D Term.(const bistro $ Cli.setup $ Cli.dry_run $ ...)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  you'd want to have instead:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 open Cmdliner
  =E2=94=82 let term =3D
  =E2=94=82   Term.(Syntax.(
  =E2=94=82     let+ () =3D Cli.setup
  =E2=94=82     and+ (`Dry_run dry_run) =3D Cli.dry_run
  =E2=94=82     and+ (`Package_names pkg_names) =3D ...
  =E2=94=82     ...
  =E2=94=82     in
  =E2=94=82     the code))
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  ocamlmig can now transform code this way, at the tip of the ocamlmig
  repo (not the last release). You can see it [in the second commit in
  this branch] (and further mechanical cleanups in the commits with "=E2=80=
=A6"
  bubbles), but to explain a bit:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 let bistro () (`Dry_run dry_run) (`Package_names pkg_names) ...=
 =3D the code
  =E2=94=82 open Cmdliner
  =E2=94=82 let term =3D Term.(const bistro $ Cli.setup $ Cli.dry_run $ ...)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  is first turned into:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 open Cmdliner
  =E2=94=82 let term =3D Term.(const (fun () (`Dry_run dry_run) (`Package_n=
ames pkg_names) ... -> the code)
  =E2=94=82                  $ Cli.setup $ Cli.dry_run $ ...)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  which is then turned into the final code:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 open Cmdliner
  =E2=94=82 let term =3D
  =E2=94=82   Term.(Syntax.(
  =E2=94=82     let+ () =3D Cli.setup
  =E2=94=82     and+ (`Dry_run dry_run) =3D Cli.dry_run
  =E2=94=82     and+ (`Package_names pkg_names) =3D ...
  =E2=94=82     ...
  =E2=94=82     in
  =E2=94=82     the code))
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The first step is done using `ocamlmig replace -w -e 'const [%move_def
  __f] /// const __f''. In short, what this does is anytime it sees
  `const some-identifier', it tries to inline the definition of the
  identifier. In details, the left side of the `///' specifies the code
  to search for, and the right side what to replace it with. `const ...'
  searches for literally `const' applied to one argument. `[%move_def
  __f]' is trickier: it matches identifiers that are let-bound somewhere
  in the current file, removes said let binding, and recursively matches
  the right hand side of the binding against `__f'. Variables that start
  with two underscores name a term for use in the replacement
  expression.

  The second step is done with:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 ocamlmig replace -w \
  =E2=94=82   -e 'const (fun __p1 __p2 __p3 -> __body) $ __e1 $ __e2 $ __e3
  =E2=94=82       /// let open Syntax in let+ __p1 =3D __e1 and+ __p2 =3D _=
_e2 and+ __p3 =3D __e3 in __body'
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This is longer, but given the previous explanation, it's hopefully
  fairly clear what this does. The only twist is that ocamlmig
  generalizes this search/replace for three elements into an n-ary
  version (implicitly, although perhaps it should be explicit).

  And that's it. So this is the full command that I used:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 ocamlmig replace -w \
  =E2=94=82   -e 'const [%move_def __f] /// const __f' \
  =E2=94=82   -e 'const (fun __p1 __p2 __p3 -> __body) $ __e1 $ __e2 $ __e3
  =E2=94=82       /// let open Syntax in let+ __p1 =3D __e1 and+ __p2 =3D _=
_e2 and+ __p3 =3D __e3 in __body'
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  which seems pretty reasonable considering the rewrite is somewhat
  sophisticated.

  In general, mechanizing a change can reduce the chance of accidentally
  modifying something, but in this specific case, ocamlmig also detects
  shadowing when moving code with `[%move_def]'. Shadowing would likely
  cause type errors or tests errors, but if it didn't, it'd be quite
  hard to catch during code review.

  Finally, if you want to try this out on your code, I'll note that
  `ocamlmig replace' is in flux, and that while the commands above work,
  obvious variations of them may not.


[in the second commit in this branch]
<https://github.com/tarides/dune-release/pull/503/commits>


Ortac 0.6.0 improve bug reporting
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-ortac-0-6-0-improve-bug-reporting/16232/=
1>


Nicolas Osborne announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hi everyone!

  We - at Tarides - are very pleased to announce the release of the
  Ortac-0.6.0 packages for specification-driven testing!

  Ortac/QCheck-STM is a test generator based on the [QCheck-STM]
  model-based testing framework and the [Gospel] specification language
  for OCaml.

  In addition to generating QCheck-STM tests based on the Gospel
  specifications, `Ortac/QCheck-STM' computes and display a bug report
  in case of test failure.

  This report contains the piece of Gospel specification that has been
  violated, a runnable scenario to reproduce the bug and the expected
  returned value (if there is enough information in the specification to
  compute it).

  This release improves the reporting in two ways.

  First, the way we need to formulate the description of the expected
  returned value has been made more flexible (and fixed). The main
  limitation was about functions returning a boolean. Because of the
  coercion mechanism, Gospel often transforms equalities involving a
  boolean into a double implication. For example: `b =3D Sequence.mem
  t.contents a' is transformed into `b =3D true <-> Sequence.mem
  t.contents a'. (For the curious, this is because `Sequence.mem'
  returns a `prop', not a `bool', and we don't have equality on
  `prop'). `Ortac/QCheck-STM' now explores more patterns, including the
  double implication one, to try to find a suitable description of the
  returned value to use in the bug report.

  Secondly, and more importantly, the Gospel specification language
  supports partial functions (`Sequence.hd' is *not* defined on the
  empty sequence for example). When we translate calls to such function
  to OCaml, we raise an exception when the call is out of the function's
  domain. Now, that exception was captured by QCheck at runtime, making
  the test a failure as expected. But the Ortac runtime was then stopped
  before being able to build and send the bug report to QCheck for
  display to the user. That was sad, so I've fixed it. We can now make
  use of Gospel partial functions when writing specifications and enjoy
  the bug report computed by `Ortac/QCheck-STM'!

  You can install Ortac/QCheck-STM via opam (we also advise installing
  and using Ortac/Dune):

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 $ opam install ortac-qcheck-stm ortac-dune
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  You'll find more information in [Ortac/QCheck-STM documentation] and
  in The [Ortac/Dune readme].

  If you have any questions, please don't hesitate to ping me :-)

  Next release should be about making Ortac/QCheck-STM generate tests of
  a library in a parallel context (this is, after all, one of the
  *raison d'=C3=AAtre* of the fantastic QCheck-STM test framework!).

  Happy testing!


[QCheck-STM] <https://github.com/ocaml-multicore/multicoretests>

[Gospel] <https://github.com/ocaml-gospel/gospel>

[Ortac/QCheck-STM documentation]
<https://ocaml-gospel.github.io/ortac/ortac-qcheck-stm/index.html>

[Ortac/Dune readme]
<https://github.com/ocaml-gospel/ortac/tree/main/plugins/dune-rules#dune-ru=
les-plugin-for-ortac>


Dune Developer Preview Updates
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-dune-developer-preview-updates/15160/57>


Leandro Ostera announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hello everyone! :waving_hand: Hope you had a great end of 2024 and
  your 2025 is starting well too :D

  We've been hard at work at Tarides to improve the Dune Developer
  Preview, and we'd love to learn more about what your adoption hurdles
  have been, so here's a very short form you can fill to let us know
  what's up.

  Happy hacking! :two_hump_camel:

  <https://forms.gle/piaw12XBYUeaCmg56>


ppxlib.0.36.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-ppxlib-0-36-0/16241/1>


Patrick Ferris announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  The ppxlib team is happy to announce the release of `ppxlib.0.36.0'!

  A full account of the changes can be found [on the 0.36.0 release].


[on the 0.36.0 release]
<https://github.com/ocaml-ppx/ppxlib/releases/tag/0.36.0>

OCaml 5.2 Internal AST
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  The main change in this release is that the internal AST used in
  ppxlib is now the same as OCaml 5.2's AST. Previously it was
  4.14.0. The internal AST dictates what features your ppx can and
  cannot generate. To avoid confusion, this does _not_ mean ppxlib only
  supports OCaml 5.2 and greater. Ppxlib still supports compilers
  starting at 4.08.0.

  *The bump to 5.2 has caused a lot of reverse dependencies to break* as
   the 5.2 AST represents functions differently ([see the Syntactic
   Function Arity RFC]). Many patches have already been sent to users of
   ppxlib in the past few months, but quite a few still remain.

  :warning: Ppx authors are advised to read [the wiki entry for
  upgrading to ppxlib.0.36.0]. :warning:

  Please do not hesitate to reach out if you need any help upgrading to
  `ppxlib.0.36.0'.


[see the Syntactic Function Arity RFC]
<https://github.com/ocaml/RFCs/pull/32>

[the wiki entry for upgrading to ppxlib.0.36.0]
<https://github.com/ocaml-ppx/ppxlib/wiki/Upgrading-to-ppxlib-0.36.0>


Other Changes
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  =E2=80=A2 Change `Location.none' to match the compiler's `Location.none' =
as of
    OCaml 4.08.
  =E2=80=A2 New ways to create context free rules using floating expansions=
 =E2=80=93
    see [#560] for the details.
  =E2=80=A2 Add a `-raise-embedded-errors' flag to the driver. Setting this=
 flag
    raises the first `ocaml.error' embedded in the final AST.
  =E2=80=A2 Export `Ast_pattern.fail' making it easier to write new
    pattern-matchers.
  =E2=80=A2 Improvements to `Ast_traverse.sexp_of' to be more concise.

  Do read the changes entry/release for all of the acknowledgments =E2=80=93
  thank you to everyone who contributed to this release of ppxlib! A
  special thanks from me to @NathanReb who has been a massive help
  getting this work over the line.

  Thank you to Tarides and Jane Street for funding my time on this
  release of ppxlib.


[#560] <https://github.com/ocaml-ppx/ppxlib/pull/560>


I created an OCaml grammar for ANTLR4 (Earley parser compatible)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/i-created-an-ocaml-grammar-for-antlr4-earley=
-parser-compatible/16246/1>


ao wang announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

  Hi everyone,

  I=E2=80=99ve created an ANTLR4 grammar for OCaml that supports Earley par=
sing.
  Feel free to use it, and any feedback or contributions are welcome!

  GitHub Repository:
  <https://github.com/WangAo0311/Antlr4-ocaml-earley-parser-grammar>


Melange 5.0
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-melange-5-0/16247/1>


Antonio Nuno Monteiro announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Dear OCaml users,

  I'm proud to announce the release of Melange 5.0

  Melange is a backend for the OCaml compiler that emits
  JavaScript. This release features improvements across a few areas,
  mostly targeting OCaml 5.3 support and JavaScript expressivity:

  =E2=80=A2 OCaml version support: we=E2=80=99re releasing Melange 5 with f=
ull support
    across a few OCaml versions: 4.14, 5.1, 5.2 and the recently
    released 5.3
    =E2=80=A3 Melange uses a versioning scheme similar to Merlin=E2=80=99s:=
 releases are
      suffixed with the OCaml version they support, e.g. 5.0.1-414,
      5.0.1-53, etc.
  =E2=80=A2 We're introducing build system-aware, type-safe support for
    JavaScript's [dynamic import], allowing to code split
    Melange-generated JavaScript bundles without sacrificing
    type-safety.
  =E2=80=A2 Melange can now express [discriminated unions], a JavaScript pa=
ttern
    that

  The [release announcement] blog post covers the changes in a lot more
  detail. Please give it a read.

  I'm excited to count on the support of our financial sponsors [Ahrefs]
  and the [OCaml Software Foundation], without which this release would
  not have been possible.


[dynamic import]
<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operator=
s/import>

[discriminated unions]
<https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.=
html#discriminated-unions>

[release announcement]
<https://melange.re/blog/posts/announcing-melange-5>

[Ahrefs] <https://ahrefs.com/jobs>

[OCaml Software Foundation] <https://ocaml-sf.org/>


Other OCaml News
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

From the ocaml.org blog
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here are links from many OCaml blogs aggregated at [the ocaml.org
  blog].

  =E2=80=A2 [OpenAI and structured outputs from OCaml]
  =E2=80=A2 [Feature Parity Series: Statmemprof Returns!]
  =E2=80=A2 [Announcing Melange 5]
  =E2=80=A2 [Learning OCaml: Functions without Parameters]


[the ocaml.org blog] <https://ocaml.org/blog/>

[OpenAI and structured outputs from OCaml]
<https://tech.ahrefs.com/openai-and-structured-outputs-from-ocaml-b198fcf70=
1ca?source=3Drss----303662d88bae--ocaml>

[Feature Parity Series: Statmemprof Returns!]
<https://tarides.com/blog/2025-03-06-feature-parity-series-statmemprof-retu=
rns>

[Announcing Melange 5]
<https://melange.re/blog/posts/announcing-melange-5>

[Learning OCaml: Functions without Parameters]
<https://batsov.com/articles/2025/03/02/learning-ocaml-functions-without-pa=
rameters/>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  to the [caml-list].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[caml-list] <https://sympa.inria.fr/sympa/info/caml-list>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2025-03-11 Tue 15:59 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org Mode" />
<style type=3D"text/css">
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
</head>
<body>
<div id=3D"content" class=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2025.03.04.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2025.03.18.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of March 04 to 11, 2025.
</p>

<div id=3D"table-of-contents" role=3D"doc-toc">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents" role=3D"doc-toc">
<ul>
<li><a href=3D"#1">OCaml projects utilizing Category theory</a></li>
<li><a href=3D"#2">Docker base images and OCaml-CI support for OCaml &lt; 4=
.08</a></li>
<li><a href=3D"#3">ocamlmig, a tool to rewrite ocaml code, and complement <=
code>[@@deprecated]</code></a></li>
<li><a href=3D"#4">Ortac 0.6.0 improve bug reporting</a></li>
<li><a href=3D"#5">Dune Developer Preview Updates</a></li>
<li><a href=3D"#6">ppxlib.0.36.0</a></li>
<li><a href=3D"#7">I created an OCaml grammar for ANTLR4 (Earley parser com=
patible)</a></li>
<li><a href=3D"#8">Melange 5.0</a></li>
<li><a href=3D"#9">Other OCaml News</a></li>
<li><a href=3D"#orgab6a7c9">Old CWN</a></li>
</ul>
</div>
</div>
<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">OCaml projects utilizing Category theory</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ocaml-projects-utilizing-ca=
tegory-theory/16206/5">https://discuss.ocaml.org/t/ocaml-projects-utilizing=
-category-theory/16206/5</a>
</p>
</div>
<div id=3D"outline-container-org9f12395" class=3D"outline-3">
<h3 id=3D"org9f12395">Deep in this thread, Dmitrii Kovanikov announced</h3>
<div class=3D"outline-text-3" id=3D"text-org9f12395">
<p>
I started writing <a href=3D"https://chshersh.com/blog/2024-07-30-pragmatic=
-category-theory-part-01.html">a series of articles about Pragmatic Categor=
y Theory</a> in OCaml, and there's a repository with examples:
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://github.com/chshersh/pragmatic-category-theory">https=
://github.com/chshersh/pragmatic-category-theory</a></li>
</ul>

<p>
If you're interested in a complete project, I made <b>CCL: Categorical Conf=
iguration Language</b> which leverages multiple Category Theory concepts:
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://chshersh.com/blog/2025-01-06-the-most-elegant-config=
uration-language.html">The Most Elegant Configuration Language by @chshersh=
</a></li>
</ul>

<p>
I'm currently working on a <a href=3D"https://github.com/chshersh/github-tu=
i">GitHub TUI</a> project in OCaml but the usage of CT concepts is not that=
 crazy there. For now, I only use Semigroup and Monoids (which some people =
don't even consider part of CT but just Abstract Algebra).
</p>
</div>
</div>
</div>
<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">Docker base images and OCaml-CI support for OCaml &lt; 4.08</h=
2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/docker-base-images-and-ocam=
l-ci-support-for-ocaml-4-08/16229/1">https://discuss.ocaml.org/t/docker-bas=
e-images-and-ocaml-ci-support-for-ocaml-4-08/16229/1</a>
</p>
</div>
<div id=3D"outline-container-org433d037" class=3D"outline-3">
<h3 id=3D"org433d037">Mark Elvers announced</h3>
<div class=3D"outline-text-3" id=3D"text-org433d037">
<p>
The <a href=3D"https://discuss.ocaml.org/t/opam-repository-archival-phase-2=
-ocaml-4-08-is-the-lower-bound/15965">opam repository archival</a> process =
has set the minimum supported OCaml version to 4.08 <span class=3D"underlin=
e">for opam repository</span>.  It logically follows that opam-repo-ci shou=
ld only test against OCaml &gt;=3D 4.08.
</p>

<p>
The purpose of this post is to get a sense of whether the rest of the OCaml=
 infrastructure should also adopt the same lower bound.  The current lower =
bound is 4.02.
</p>

<p>
Specific examples include OCaml-CI.  Individual projects can already opt ou=
t of testing on older platforms by adding a lower bound in the opam file.
</p>

<p>
Docker base images are built for all versions of OCaml used in the CI syste=
ms. These images are published weekly on Docker Hub.  We know that these im=
ages are also used by the community, but the pull counter is not broken dow=
n by individual tag.  Potentially only the latest OCaml versions are being =
used.
</p>

<p>
Users impacted by packages which have been archived from opam repository ca=
n easily restore the packages by adding the archive repository to the opam =
switch.  This only needs to be done once.  Users can build their own Docker=
 base images, but they would need to be rebuilt periodically to keep them u=
p to date.
</p>

<p>
Would removing testing on &lt; 4.08 in OCaml CI or removing the Docker base=
 images &lt; 4.08 impact you?
</p>
</div>
</div>
</div>
<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">ocamlmig, a tool to rewrite ocaml code, and complement <code>[=
@@deprecated]</code></h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ocamlmig-a-tool-to-rewr=
ite-ocaml-code-and-complement-deprecated/16090/10">https://discuss.ocaml.or=
g/t/ann-ocamlmig-a-tool-to-rewrite-ocaml-code-and-complement-deprecated/160=
90/10</a>
</p>
</div>
<div id=3D"outline-container-org7d93fcd" class=3D"outline-3">
<h3 id=3D"org7d93fcd">v-gb announced</h3>
<div class=3D"outline-text-3" id=3D"text-org7d93fcd">
<p>
Hi,
</p>

<p>
I released a new version of ocamlmig in opam, whose main change is to avoid=
 reformatting everything in codebases that don't use ocamlformat. Instead, =
only subexpressions touched by a rewrite are reformatted.
It also requalifies identifier in more places to preserve their meaning (e.=
g. when replacing <code>string_of_int</code> by <code>Int.to_string</code>,=
 there might be an <code>Int</code> module in scope that's not <code>Stdlib=
.Int</code>. In such case, ocamlmig would more often replace <code>string_o=
f_int</code> by <code>Stdlib.Int.to_string</code>).
</p>

<p>
Separately, I've thought about the recent addition of let+ operators in Cmd=
liner, and how one might migrate from the use of <code>$</code> to them. Co=
ncretetely, given:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a7601f;">bistro</span> () (<span sty=
le=3D"color: #242521; background-color: #fcf7ef;">`Dry_run</span> <span sty=
le=3D"color: #007a9f;">dry_run</span>) (<span style=3D"color: #242521; back=
ground-color: #fcf7ef;">`Package_names</span> <span style=3D"color: #007a9f=
;">pkg_names</span>) ... =3D the code
<span style=3D"color: #000000; font-weight: bold;">open </span><span style=
=3D"color: #444fcf;">Cmdliner</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">term</span> =3D <span style=3D"color: #444fcf;">Term.<=
/span>(const bistro <span style=3D"color: #a52a2a;">$</span> <span style=3D=
"color: #444fcf;">Cli.</span>setup <span style=3D"color: #a52a2a;">$</span>=
 <span style=3D"color: #444fcf;">Cli.</span>dry_run <span style=3D"color: #=
a52a2a;">$</span> ...)
</pre>
</div>

<p>
you'd want to have instead:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">open </span><span style=3D"color: #444fcf;">Cmdliner</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">term</span> =3D
  <span style=3D"color: #444fcf;">Term.</span>(<span style=3D"color: #444fc=
f;">Syntax.</span>(
    <span style=3D"color: #000000; font-weight: bold;">let+</span> () =3D <=
span style=3D"color: #444fcf;">Cli.</span>setup
    <span style=3D"color: #000000; font-weight: bold;">and+</span> (<span s=
tyle=3D"color: #242521; background-color: #fcf7ef;">`Dry_run</span> <span s=
tyle=3D"color: #007a9f;">dry_run</span>) =3D <span style=3D"color: #444fcf;=
">Cli.</span>dry_run
    <span style=3D"color: #000000; font-weight: bold;">and+</span> (<span s=
tyle=3D"color: #242521; background-color: #fcf7ef;">`Package_names</span> <=
span style=3D"color: #007a9f;">pkg_names</span>) =3D ...
    ...
    <span style=3D"color: #000000; font-weight: bold;">in</span>
    the code))
</pre>
</div>

<p>
ocamlmig can now transform code this way, at the tip of the ocamlmig repo (=
not the last release). You can see it <a href=3D"https://github.com/tarides=
/dune-release/pull/503/commits">in the second commit in this branch</a> (an=
d further mechanical cleanups in the commits with "&#x2026;" bubbles), but =
to explain a bit:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">let</span> <span style=3D"color: #a7601f;">bistro</span> () (<span sty=
le=3D"color: #242521; background-color: #fcf7ef;">`Dry_run</span> <span sty=
le=3D"color: #007a9f;">dry_run</span>) (<span style=3D"color: #242521; back=
ground-color: #fcf7ef;">`Package_names</span> <span style=3D"color: #007a9f=
;">pkg_names</span>) ... =3D the code
<span style=3D"color: #000000; font-weight: bold;">open </span><span style=
=3D"color: #444fcf;">Cmdliner</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">term</span> =3D <span style=3D"color: #444fcf;">Term.<=
/span>(const bistro <span style=3D"color: #a52a2a;">$</span> <span style=3D=
"color: #444fcf;">Cli.</span>setup <span style=3D"color: #a52a2a;">$</span>=
 <span style=3D"color: #444fcf;">Cli.</span>dry_run <span style=3D"color: #=
a52a2a;">$</span> ...)
</pre>
</div>

<p>
is first turned into:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">open </span><span style=3D"color: #444fcf;">Cmdliner</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">term</span> =3D <span style=3D"color: #444fcf;">Term.<=
/span>(const (<span style=3D"color: #006f00; font-weight: bold;">fun</span>=
 () (<span style=3D"color: #242521; background-color: #fcf7ef;">`Dry_run</s=
pan> <span style=3D"color: #007a9f;">dry_run</span>) (<span style=3D"color:=
 #242521; background-color: #fcf7ef;">`Package_names</span> <span style=3D"=
color: #007a9f;">pkg_names</span>) ... -&gt; the code)
                 <span style=3D"color: #a52a2a;">$</span> <span style=3D"co=
lor: #444fcf;">Cli.</span>setup <span style=3D"color: #a52a2a;">$</span> <s=
pan style=3D"color: #444fcf;">Cli.</span>dry_run <span style=3D"color: #a52=
a2a;">$</span> ...)
</pre>
</div>

<p>
which is then turned into the final code:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><span style=3D"color: #000000; font-weight: bo=
ld;">open </span><span style=3D"color: #444fcf;">Cmdliner</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">term</span> =3D
  <span style=3D"color: #444fcf;">Term.</span>(<span style=3D"color: #444fc=
f;">Syntax.</span>(
    <span style=3D"color: #000000; font-weight: bold;">let+</span> () =3D <=
span style=3D"color: #444fcf;">Cli.</span>setup
    <span style=3D"color: #000000; font-weight: bold;">and+</span> (<span s=
tyle=3D"color: #242521; background-color: #fcf7ef;">`Dry_run</span> <span s=
tyle=3D"color: #007a9f;">dry_run</span>) =3D <span style=3D"color: #444fcf;=
">Cli.</span>dry_run
    <span style=3D"color: #000000; font-weight: bold;">and+</span> (<span s=
tyle=3D"color: #242521; background-color: #fcf7ef;">`Package_names</span> <=
span style=3D"color: #007a9f;">pkg_names</span>) =3D ...
    ...
    <span style=3D"color: #000000; font-weight: bold;">in</span>
    the code))
</pre>
</div>

<p>
The first step is done using <code>ocamlmig replace -w -e 'const [%move_def=
 __f] /// const __f'</code>. In short, what this does is anytime it sees <c=
ode>const some-identifier</code>, it tries to inline the definition of the =
identifier. In details, the left side of the <code>///</code> specifies the=
 code to search for, and the right side what to replace it with. <code>cons=
t ...</code> searches for literally <code>const</code> applied to one argum=
ent. <code>[%move_def __f]</code> is trickier: it matches identifiers that =
are let-bound somewhere in the current file, removes said let binding, and =
recursively matches the right hand side of the binding against <code>__f</c=
ode>. Variables that start with two underscores name a term for use in the =
replacement expression.
</p>

<p>
The second step is done with:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-shell">ocamlmig replace -w <span style=3D"color: #ca3=
400;">\</span>
  -e <span style=3D"color: #ca3400;">'const (fun __p1 __p2 __p3 -&gt; __bod=
y) $ __e1 $ __e2 $ __e3</span>
<span style=3D"color: #ca3400;">      /// let open Syntax in let+ __p1 =3D =
__e1 and+ __p2 =3D __e2 and+ __p3 =3D __e3 in __body'</span>
</pre>
</div>

<p>
This is longer, but given the previous explanation, it's hopefully fairly c=
lear what this does. The only twist is that ocamlmig generalizes this searc=
h/replace for three elements into an n-ary version (implicitly, although pe=
rhaps it should be explicit).
</p>

<p>
And that's it. So this is the full command that I used:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-shell">ocamlmig replace -w <span style=3D"color: #ca3=
400;">\</span>
  -e <span style=3D"color: #ca3400;">'const [%move_def __f] /// const __f'<=
/span> <span style=3D"color: #ca3400;">\</span>
  -e <span style=3D"color: #ca3400;">'const (fun __p1 __p2 __p3 -&gt; __bod=
y) $ __e1 $ __e2 $ __e3</span>
<span style=3D"color: #ca3400;">      /// let open Syntax in let+ __p1 =3D =
__e1 and+ __p2 =3D __e2 and+ __p3 =3D __e3 in __body'</span>
</pre>
</div>

<p>
which seems pretty reasonable considering the rewrite is somewhat sophistic=
ated.
</p>

<p>
In general, mechanizing a change can reduce the chance of accidentally modi=
fying something, but in this specific case, ocamlmig also detects shadowing=
 when moving code with <code>[%move_def]</code>. Shadowing would likely cau=
se type errors or tests errors, but if it didn't, it'd be quite hard to cat=
ch during code review.
</p>

<p>
Finally, if you want to try this out on your code, I'll note that <code>oca=
mlmig replace</code> is in flux, and that while the commands above work, ob=
vious variations of them may not.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">Ortac 0.6.0 improve bug reporting</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ortac-0-6-0-improve-bug=
-reporting/16232/1">https://discuss.ocaml.org/t/ann-ortac-0-6-0-improve-bug=
-reporting/16232/1</a>
</p>
</div>
<div id=3D"outline-container-orgc35fda9" class=3D"outline-3">
<h3 id=3D"orgc35fda9">Nicolas Osborne announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc35fda9">
<p>
Hi everyone!
</p>

<p>
We - at Tarides - are very pleased to announce the release of the Ortac-0.6=
.0 packages for specification-driven testing!
</p>

<p>
Ortac/QCheck-STM is a test generator based on the <a href=3D"https://github=
.com/ocaml-multicore/multicoretests">QCheck-STM</a> model-based testing fra=
mework and the <a href=3D"https://github.com/ocaml-gospel/gospel">Gospel</a=
> specification language for OCaml.
</p>

<p>
In addition to generating QCheck-STM tests based on the Gospel specificatio=
ns, <code>Ortac/QCheck-STM</code> computes and display a bug report in case=
 of test failure.
</p>

<p>
This report contains the piece of Gospel specification that has been violat=
ed, a runnable scenario to reproduce the bug and the expected returned valu=
e (if there is enough information in the specification to compute it).
</p>

<p>
This release improves the reporting in two ways.
</p>

<p>
First, the way we need to formulate the description of the expected returne=
d value has been made more flexible (and fixed). The main limitation was ab=
out functions returning a boolean. Because of the coercion mechanism, Gospe=
l often transforms equalities involving a boolean into a double implication=
. For example: <code>b =3D Sequence.mem t.contents a</code> is transformed =
into <code>b =3D true &lt;-&gt; Sequence.mem t.contents a</code>. (For the =
curious, this is because <code>Sequence.mem</code> returns a <code>prop</co=
de>, not a <code>bool</code>, and we don't have equality on <code>prop</cod=
e>). <code>Ortac/QCheck-STM</code> now explores more patterns, including th=
e double implication one, to try to find a suitable description of the retu=
rned value to use in the bug report.
</p>

<p>
Secondly, and more importantly, the Gospel specification language supports =
partial functions (<code>Sequence.hd</code> is <b>not</b> defined on the em=
pty sequence for example). When we translate calls to such function to OCam=
l, we raise an exception when the call is out of the function's domain. Now=
, that exception was captured by QCheck at runtime, making the test a failu=
re as expected. But the Ortac runtime was then stopped before being able to=
 build and send the bug report to QCheck for display to the user. That was =
sad, so I've fixed it. We can now make use of Gospel partial functions when=
 writing specifications and enjoy the bug report computed by <code>Ortac/QC=
heck-STM</code>!
</p>

<p>
You can install Ortac/QCheck-STM via opam (we also advise installing and us=
ing Ortac/Dune):
</p>

<pre class=3D"example" id=3D"org4c4632b">
$ opam install ortac-qcheck-stm ortac-dune
</pre>

<p>
You'll find more information in <a href=3D"https://ocaml-gospel.github.io/o=
rtac/ortac-qcheck-stm/index.html">Ortac/QCheck-STM documentation</a> and in=
 The <a href=3D"https://github.com/ocaml-gospel/ortac/tree/main/plugins/dun=
e-rules#dune-rules-plugin-for-ortac">Ortac/Dune readme</a>.
</p>

<p>
If you have any questions, please don't hesitate to ping me :-)
</p>

<p>
Next release should be about making Ortac/QCheck-STM generate tests of a li=
brary in a parallel context (this is, after all, one of the <b>raison d'=C3=
=AAtre</b> of the fantastic QCheck-STM test framework!).
</p>

<p>
Happy testing!
</p>
</div>
</div>
</div>
<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">Dune Developer Preview Updates</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-dune-developer-preview-=
updates/15160/57">https://discuss.ocaml.org/t/ann-dune-developer-preview-up=
dates/15160/57</a>
</p>
</div>
<div id=3D"outline-container-orgc232b0f" class=3D"outline-3">
<h3 id=3D"orgc232b0f">Leandro Ostera announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgc232b0f">
<p>
Hello everyone! :waving_hand: Hope you had a great end of 2024 and your 202=
5 is starting well too :D=20
</p>

<p>
We've been hard at work at Tarides to improve the Dune Developer Preview, a=
nd we'd love to learn more about what your adoption hurdles have been, so h=
ere's a very short form you can fill to let us know what's up.
</p>

<p>
Happy hacking! :two_hump_camel:=20
</p>

<p>
<a href=3D"https://forms.gle/piaw12XBYUeaCmg56">https://forms.gle/piaw12XBY=
UeaCmg56</a>
</p>
</div>
</div>
</div>
<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">ppxlib.0.36.0</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ppxlib-0-36-0/16241/1">=
https://discuss.ocaml.org/t/ann-ppxlib-0-36-0/16241/1</a>
</p>
</div>
<div id=3D"outline-container-orgfdec847" class=3D"outline-3">
<h3 id=3D"orgfdec847">Patrick Ferris announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgfdec847">
<p>
The ppxlib team is happy to announce the release of <code>ppxlib.0.36.0</co=
de>!=20
</p>

<p>
A full account of the changes can be found <a href=3D"https://github.com/oc=
aml-ppx/ppxlib/releases/tag/0.36.0">on the 0.36.0 release</a>.
</p>
</div>
<div id=3D"outline-container-orgd84a94f" class=3D"outline-4">
<h4 id=3D"orgd84a94f">OCaml 5.2 Internal AST</h4>
<div class=3D"outline-text-4" id=3D"text-orgd84a94f">
<p>
The main change in this release is that the internal AST used in ppxlib is =
now the same as OCaml 5.2's AST. Previously it was 4.14.0. The internal AST=
 dictates what features your ppx can and cannot generate. To avoid confusio=
n, this does <span class=3D"underline">not</span> mean ppxlib only supports=
 OCaml 5.2 and greater. Ppxlib still supports compilers starting at 4.08.0.
</p>

<p>
<b>The bump to 5.2 has caused a lot of reverse dependencies to break</b> as=
 the 5.2 AST represents functions differently (<a href=3D"https://github.co=
m/ocaml/RFCs/pull/32">see the Syntactic Function Arity RFC</a>). Many patch=
es have already been sent to users of ppxlib in the past few months, but qu=
ite a few still remain.=20
</p>

<p>
:warning: Ppx authors are advised to read <a href=3D"https://github.com/oca=
ml-ppx/ppxlib/wiki/Upgrading-to-ppxlib-0.36.0">the wiki entry for upgrading=
 to ppxlib.0.36.0</a>. :warning:=20
</p>

<p>
Please do not hesitate to reach out if you need any help upgrading to <code=
>ppxlib.0.36.0</code>.
</p>
</div>
</div>
<div id=3D"outline-container-org4be588f" class=3D"outline-4">
<h4 id=3D"org4be588f">Other Changes</h4>
<div class=3D"outline-text-4" id=3D"text-org4be588f">
<ul class=3D"org-ul">
<li>Change <code>Location.none</code> to match the compiler's <code>Locatio=
n.none</code> as of OCaml 4.08.</li>
<li>New ways to create context free rules using floating expansions &#x2013=
; see <a href=3D"https://github.com/ocaml-ppx/ppxlib/pull/560">#560</a> for=
 the details.</li>
<li>Add a <code>-raise-embedded-errors</code> flag to the driver. Setting t=
his flag raises the first <code>ocaml.error</code> embedded in the final AS=
T.</li>
<li>Export <code>Ast_pattern.fail</code> making it easier to write new patt=
ern-matchers.</li>
<li>Improvements to <code>Ast_traverse.sexp_of</code> to be more concise.</=
li>
</ul>

<p>
Do read the changes entry/release for all of the acknowledgments &#x2013; t=
hank you to everyone who contributed to this release of ppxlib! A special t=
hanks from me to @NathanReb who has been a massive help getting this work o=
ver the line.
</p>

<p>
Thank you to Tarides and Jane Street for funding my time on this release of=
 ppxlib.
</p>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">I created an OCaml grammar for ANTLR4 (Earley parser compatibl=
e)</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/i-created-an-ocaml-grammar-=
for-antlr4-earley-parser-compatible/16246/1">https://discuss.ocaml.org/t/i-=
created-an-ocaml-grammar-for-antlr4-earley-parser-compatible/16246/1</a>
</p>
</div>
<div id=3D"outline-container-org0e41043" class=3D"outline-3">
<h3 id=3D"org0e41043">ao wang announced</h3>
<div class=3D"outline-text-3" id=3D"text-org0e41043">
<p>
Hi everyone,
</p>

<p>
I=E2=80=99ve created an ANTLR4 grammar for OCaml that supports Earley parsi=
ng.=20=20
Feel free to use it, and any feedback or contributions are welcome!
</p>

<p>
GitHub Repository:
<a href=3D"https://github.com/WangAo0311/Antlr4-ocaml-earley-parser-grammar=
">https://github.com/WangAo0311/Antlr4-ocaml-earley-parser-grammar</a>
</p>
</div>
</div>
</div>
<div id=3D"outline-container-8" class=3D"outline-2">
<h2 id=3D"8">Melange 5.0</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-melange-5-0/16247/1">ht=
tps://discuss.ocaml.org/t/ann-melange-5-0/16247/1</a>
</p>
</div>
<div id=3D"outline-container-org9a577c7" class=3D"outline-3">
<h3 id=3D"org9a577c7">Antonio Nuno Monteiro announced</h3>
<div class=3D"outline-text-3" id=3D"text-org9a577c7">
<p>
Dear OCaml users,
</p>

<p>
I'm proud to announce the release of Melange 5.0
</p>

<p>
Melange is a backend for the OCaml compiler that emits JavaScript. This rel=
ease features improvements across a few areas, mostly targeting OCaml 5.3 s=
upport and JavaScript expressivity:
</p>

<ul class=3D"org-ul">
<li>OCaml version support: we=E2=80=99re releasing Melange 5 with full supp=
ort across a few OCaml versions: 4.14, 5.1, 5.2 and the recently released 5=
.3
<ul class=3D"org-ul">
<li>Melange uses a versioning scheme similar to Merlin=E2=80=99s: releases =
are suffixed with the OCaml version they support, e.g. 5.0.1-414, 5.0.1-53,=
 etc.</li>
</ul></li>
<li>We're introducing build system-aware, type-safe support for JavaScript'=
s <a href=3D"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Refere=
nce/Operators/import">dynamic import</a>, allowing to code split Melange-ge=
nerated JavaScript bundles without sacrificing type-safety.</li>
<li>Melange can now express <a href=3D"https://www.typescriptlang.org/docs/=
handbook/typescript-in-5-minutes-func.html#discriminated-unions">discrimina=
ted unions</a>, a JavaScript pattern that</li>
</ul>

<p>
The <a href=3D"https://melange.re/blog/posts/announcing-melange-5">release =
announcement</a> blog post covers the changes in a lot more detail. Please =
give it a read.
</p>

<p>
I'm excited to count on the support of our financial sponsors <a href=3D"ht=
tps://ahrefs.com/jobs">Ahrefs</a> and the <a href=3D"https://ocaml-sf.org/"=
>OCaml Software Foundation</a>, without which this release would not have b=
een possible.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-9" class=3D"outline-2">
<h2 id=3D"9">Other OCaml News</h2>
<div class=3D"outline-text-2" id=3D"text-9">
</div>
<div id=3D"outline-container-org7de0162" class=3D"outline-3">
<h3 id=3D"org7de0162">From the ocaml.org blog</h3>
<div class=3D"outline-text-3" id=3D"text-org7de0162">
<p>
Here are links from many OCaml blogs aggregated at <a href=3D"https://ocaml=
.org/blog/">the ocaml.org blog</a>.
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://tech.ahrefs.com/openai-and-structured-outputs-from-o=
caml-b198fcf701ca?source=3Drss----303662d88bae--ocaml">OpenAI and structure=
d outputs from OCaml</a></li>
<li><a href=3D"https://tarides.com/blog/2025-03-06-feature-parity-series-st=
atmemprof-returns">Feature Parity Series: Statmemprof Returns!</a></li>
<li><a href=3D"https://melange.re/blog/posts/announcing-melange-5">Announci=
ng Melange 5</a></li>
<li><a href=3D"https://batsov.com/articles/2025/03/02/learning-ocaml-functi=
ons-without-parameters/">Learning OCaml: Functions without Parameters</a></=
li>
</ul>
</div>
</div>
</div>
<div id=3D"outline-container-orgab6a7c9" class=3D"outline-2">
<h2 id=3D"orgab6a7c9">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-orgab6a7c9">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe to the=
 <a href=3D"https://sympa.inria.fr/sympa/info/caml-list">caml-list</a>.
</p>

<div class=3D"authorname" id=3D"orgd7c5538">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--
