Return-Path: <caml-list-owner@inria.fr>
Authentication-Results: plum.tunbury.org;
	dkim=pass (1024-bit key; unprotected) header.d=inria.fr header.i=@inria.fr header.a=rsa-sha256 header.s=dc header.b=SVA7XF6G;
	dkim-atps=neutral
Received-SPF: Pass (mailfrom) identity=mailfrom; client-ip=192.134.164.83; helo=mail2-relais-roc.national.inria.fr; envelope-from=caml-list-owner@inria.fr; receiver=tunbury.org 
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by plum.tunbury.org (Postfix) with ESMTPS id D284B400A0
	for <caml-list@tunbury.org>; Tue, 23 Sep 2025 13:24:02 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=inria.fr; s=dc;
  h=from:to:date:message-id:mime-version:subject:reply-to:
   sender:list-id:list-help:list-subscribe:list-unsubscribe:
   list-post:list-owner:list-archive;
  bh=IuSAF+pps0QraGiLoc4O2Ox9MZABalKtqgoNALikCU4=;
  b=SVA7XF6Gk//s35xuX29Eb6ScTgyrTdEn/XVE+bCtNngd74k3ksQr0iFg
   Lpu4hRmI5v6z1KxYptQXas+zoHVBkxww1TQZp2H1wyEgBl2T8m1Av+84K
   40bOEUaAiykYUIZt0MhirvxLy7ce+rSgpvdrPYMOFGx4xbg0uWb+qtMTg
   k=;
X-CSE-ConnectionGUID: GwBITAjbQcSpYpxpHTG/5w==
X-CSE-MsgGUID: jbvQ+oiHSoi0k3JuRIuIxA==
Authentication-Results: mail2-relais-roc.national.inria.fr; dkim=none (message not signed) header.i=none; spf=Pass smtp.mailfrom=caml-list-owner@inria.fr; spf=None smtp.helo=postmaster@sympa.inria.fr
Received-SPF: Pass (mail2-relais-roc.national.inria.fr: domain of
  caml-list-owner@inria.fr designates 128.93.162.160 as
  permitted sender) identity=mailfrom;
  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="caml-list-owner@inria.fr"; x-conformance=spf_only;
  x-record-type="v=spf1"; x-record-text="v=spf1
  include:mailout.safebrands.com a:basic-mail.safebrands.com
  a:basic-mail01.safebrands.com a:basic-mail02.safebrands.com
  ip4:128.93.142.0/24 ip4:192.134.164.0/24 ip4:128.93.162.160
  ip4:128.93.162.3 ip4:128.93.162.88 ip4:89.107.174.7 mx ~all"
Received-SPF: None (mail2-relais-roc.national.inria.fr: no sender
  authenticity information available from domain of
  postmaster@sympa.inria.fr) identity=helo;
  client-ip=128.93.162.160;
  receiver=mail2-relais-roc.national.inria.fr;
  envelope-from="caml-list-owner@inria.fr";
  x-sender="postmaster@sympa.inria.fr"; x-conformance=spf_only
X-IronPort-AV: E=Sophos;i="6.18,288,1751234400"; 
   d="scan'208,217";a="240635494"
Received: from prod-listesu18.inria.fr (HELO sympa.inria.fr) ([128.93.162.160])
  by mail2-relais-roc.national.inria.fr with ESMTP; 23 Sep 2025 15:24:02 +0200
Received: by sympa.inria.fr (Postfix, from userid 20132)
	id 54083E0C55; Tue, 23 Sep 2025 15:24:02 +0200 (CEST)
Received: from mail2-relais-roc.national.inria.fr (mail2-relais-roc.national.inria.fr [192.134.164.83])
	by sympa.inria.fr (Postfix) with ESMTPS id 864AFE0171
	for <caml-list@sympa.inria.fr>; Tue, 23 Sep 2025 15:23:59 +0200 (CEST)
X-CSE-ConnectionGUID: 4advLFN+RISAvD712mXtGw==
X-CSE-MsgGUID: PH84EIYHQP+sX+lKC5LM1w==
X-IronPort-AV: E=Sophos;i="6.18,288,1751234400"; 
   d="scan'208,217";a="240635463"
Received: from mac-03220211.irisa.fr ([131.254.21.249])
  by mail2-relais-roc.national.inria.fr with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 23 Sep 2025 15:23:59 +0200
From: Alan Schmitt <alan.schmitt@polytechnique.org>
To: "lwn" <lwn@lwn.net>, caml-list@inria.fr
Date: Tue, 23 Sep 2025 15:23:59 +0200
Message-ID: <m2jz1puwsw.fsf@mac-03220211.irisa.fr>
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="=-=-="
Subject: [Caml-list] Attn: Development Editor, Latest OCaml Weekly News
Reply-To: Alan Schmitt <alan.schmitt@polytechnique.org>
X-Loop: caml-list@inria.fr
X-Sequence: 19379
Errors-To: caml-list-owner@inria.fr
Precedence: list
Precedence: bulk
Sender: caml-list-request@inria.fr
X-no-archive: yes
List-Id: <caml-list.inria.fr>
List-Help: <mailto:sympa_inria@inria.fr?subject=help>
List-Subscribe: <mailto:sympa_inria@inria.fr?subject=subscribe%20caml-list>
List-Unsubscribe: <mailto:sympa_inria@inria.fr?subject=unsubscribe%20caml-list>
List-Post: <mailto:caml-list@inria.fr>
List-Owner: <mailto:caml-list-request@inria.fr>
List-Archive: <https://sympa.inria.fr/sympa/arc/caml-list>
Archived-At: <https://sympa.inria.fr/sympa/arcsearch_id/caml-list/2025-09/m2jz1puwsw.fsf%40mac-03220211.irisa.fr>

--=-=-=
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hello

Here is the latest OCaml Weekly News, for the week of September 16 to
23, 2025.

Table of Contents
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80

Introduction to the Dune build system, by OCamlPro
memprof-limits (first official release): Memory limits, allocation limits, =
and thread cancellation, with interrupt-safe resources
mlfront-shell - reference implementation of a build system
Zanuda =E2=80=93 OCaml linter experiment
YOCaml, a framework for static site generator
Lwt.6.0.0~beta (direct-style, multi-domain parallelism)
schm-ocaml
detri cmd
seven ocaml tutorials
Ortac/Wrapper: a new plugin for specification driven unit testing
Other OCaml News
Old CWN


Introduction to the Dune build system, by OCamlPro
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/blog-introduction-to-the-dune-build-system-b=
y-ocamlpro/17279/1>


OCamlPro announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80

  *Greetings Cameleers,*

  We=E2=80=99ve just released a new blog post: [OCaml Onboarding: Introduct=
ion
  to the Dune build system]

  This is a practical, compact guide for those starting their OCaml and
  Dune journey =E2=80=94 or helping others do so. Instead of diving into
  internals, we focus on what you need to know to get up and running
  with Dune confidently.

  We walk through:
  =E2=80=A2 How Dune thinks about builds and directories
  =E2=80=A2 The role of dune files and static declarations
  =E2=80=A2 The tooling one interacts with day-to-day

  The post keeps things hands-on and beginner-focused, with just enough
  theory to make the practical bits stick. We end by circling back to
  `dune init' =E2=80=94 showing how understanding the basics makes the
  scaffolding tool far more intuitive.

  =F0=9F=93=9D Read it on the [OCamlPro Blog]

  Perfect for sharing with colleagues or newcomers dipping their toes
  into OCaml and Dune.

  As always, feedback welcome!  Until next time, =E2=80=94 The OCamlPro Team


[OCaml Onboarding: Introduction to the Dune build system]
<https://ocamlpro.com/blog/2025_07_29_ocaml_onboarding_introduction_to_dune=
/>

[OCamlPro Blog] <https://ocamlpro.com/blog/>


memprof-limits (first official release): Memory limits, allocation limits, =
and thread cancellation, with interrupt-safe resources
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-memprof-limits-first-official-release-me=
mory-limits-allocation-limits-and-thread-cancellation-with-interrupt-safe-r=
esources/8135/3>


Guillaume Munch-Maccagnoni announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80

  I am pleased to announce the version `0.3.0' of the package
  `memprof-limits'. The main contribution of this release is the
  *support for OCaml 5 with multiple parallel domains*.

  Memprof-limits can henceforth be used to conveniently interrupt
  (CPU-bound) domains in your parallel computations, using /cancellation
  tokens/, with the support of features to ensure interrupt-safety and
  resource-safety.

  As example of uses, plans are underway to use memprof-limits to ensure
  the resource-safety of user interrupts in the Rocq prover (eliminating
  a class of bugs) and to add tactics for portable timeouts (that count
  allocations rather than elapsed time).

  =E2=80=A2 Read more:
    <https://guillaume.munch.name/software/ocaml/memprof-limits.0.3.0/>
  =E2=80=A2 Report bugs and suggestions:
    <https://gitlab.com/gadmm/memprof-limits>


mlfront-shell - reference implementation of a build system
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-mlfront-shell-reference-implementation-o=
f-a-build-system/17186/2>


jbeckford announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80

  There have been many improvements since the last update. Here are some
  of them:

  1. The trace store (needed to not rebuild everything from scratch) has
     been implemented.
  2. Build file ASTs are parsed, marshalled and put into a key-value
     directory (which can be shared or cached in CI).
  3. Build keys are generated and used to protect sharing of the parsed
     AST.
  4. A full walkthrough of =E2=80=9Cbuilding=E2=80=9D the 7zip executable f=
rom 7zip
     binary assets (it is more complicated than it sounds) is on the
     [documentation page]
  5. An `=E2=80=93autofix' option to update build files with checksums, and
     allowing SHA1 checksum for local files (both are for eventual
     support of Meta=E2=80=99s watchman tool)
  6. A new format for the JSON files (many functions versus one). The
     old format is deprecated.
  7. Many many bug fixes, including specification updates.


[documentation page]
<https://github.com/diskuv/dk?tab=3Dreadme-ov-file#using-the-build-tool-to-=
create-a-multi-platform-package>


Zanuda =E2=80=93 OCaml linter experiment
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-zanuda-ocaml-linter-experiment/11784/13>


Continuing this thread, Kakadu announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Zanuda 2.0.0 with OCaml 5.3 support have hit opam.


YOCaml, a framework for static site generator
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-yocaml-a-framework-for-static-site-gener=
ator/15393/9>


Xavier Van de Woestyne announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

Release `2.5.0'
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  We are delighted to present the new release of YOCaml: `2.5.0'!  As
  you can see, there have been a few intermediate versions since our
  last announcement. However, we have reached a new milestone: YOCaml
  can now be used seamlessly with an Applicative API (instead of the
  Arrow one), making many tasks much easier to express!

  We have also finally taken the time to write [a tutorial that explains
  how to use YOCaml to create a complete blog], step by step, and our
  goal is to expand it over time to add more and more guides! (The
  documentation/guide generator (<https://github.com/yocaml/yocaml-www>
  is also written in YOCaml and gives an idea of what can be done fairly
  quickly.)

  =E2=80=A2 [Repository]
  =E2=80=A2 [YOCaml packages]
  =E2=80=A2 [Complete release note]

  We look forward to receiving your feedback! YOCaml is a free and
  collaborative project, so any contributions (including the guide) are
  more than welcome! We would also be DELIGHTED to see your creations
  with YOCaml!

  /Happy Hacking!/


[a tutorial that explains how to use YOCaml to create a complete blog]
<https://yocaml.github.io/tutorial>

[Repository] <https://github.com/xhtmlboi/yocaml>

[YOCaml packages] <https://ocaml.org/packages/search?q=3Dyocaml>

[Complete release note]
<https://github.com/xhtmlboi/yocaml/releases/tag/v2.5.0>


Lwt.6.0.0~beta (direct-style, multi-domain parallelism)
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-lwt-6-0-0-beta-direct-style-multi-domain=
-parallelism/17283/1>


Rapha=C3=ABl Proust announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  After some feedback and some work, I'm happy to announce the release
  of `lwt.6.0.0~beta00' and `lwt_direct.6.0.0~beta00'!
  (<https://github.com/ocaml/opam-repository/pull/28558>)

  major CHANGES are:
  =E2=80=A2 direct style mode (see [alpha release announce]): use `await : =
'a
    Lwt.t -> 'a' to transform any promises into a simple value. This
    allows you to break out of the monad which makes it possible to use
    libraries previously incompatible with Lwt.
  =E2=80=A2 multi-domain support: run separate schedulers in separate domai=
ns
    (some of the more advanced functions on Lwt are now
    domain-dependent, e.g., `run_in_main' becomes `run_in_domain' and
    takes one additional parameter)

  Feedback is very welcome. Happy beta-testing and good luck with the
  parallel-programming!


[alpha release announce]
<https://discuss.ocaml.org/t/ann-lwt-6-0-0-alpha-direct-style/16972/32>


schm-ocaml
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90

  Archive: <https://discuss.ocaml.org/t/ann-schm-ocaml/17293/1>


Florent Monnier announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  schm-ocaml provides a scheme-like syntax.

  schm3 integrates nicely with the rescript-version that provides the
  ocaml syntax.

  schm4 integrates with one of the later ocaml 4 versions, and tries to
  be accessible from .c

  <http://decapode314.free.fr/ocaml2/schm/>

  There is a tutorial:

  <http://decapode314.free.fr/ocaml2/schm/schm-tut.html>

  <http://decapode314.free.fr/ocaml2/schm/dl/schm4-0.03.zip>

  The oo got lost in a computer crash.

  So there is no oo.


detri cmd
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90

  Archive: <https://discuss.ocaml.org/t/ann-detri-cmd/17301/1>


Florent Monnier announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  There is now a fifth variant for detri:

  <http://decapode314.free.fr/ocaml/detris.html>

  This fifth one outputs .html, in-stead of console.

  If you took a previous version for the console, it was already
  something you could do by-yourself easily rewriting the console
  esc-chars to html, but now there is a ready-made one.

  (There is also a small tutorial, but it should be re-written,

  <http://decapode314.free.fr/ocaml/detri/tut/detri-tut.html>

  )


seven ocaml tutorials
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-s-tut-seven-ocaml-tutorials/17302/1>


Florent Monnier announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  You will find seven new ocaml-tutorials on this page that I wrote
  recently:

  <http://decapode314.free.fr/ocaml2/blog/>

  It was not writen with a chat-bot, but you will maybe notice a
  difference in the style of writing, since I=E2=80=99m using a chat-bot.


Ortac/Wrapper: a new plugin for specification driven unit testing
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=
=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  Archive:
  <https://discuss.ocaml.org/t/ann-ortac-wrapper-a-new-plugin-for-specifica=
tion-driven-unit-testing/17304/1>


Charl=C3=A8ne_Gros announced
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Hello everyone,

  We, at Tarides, are excited to announce the release of a new plugin
  for `ortac': [Ortac/Wrapper]!

  This plugin is part of the Gospel project, a contract-based
  behavioural specification language for OCaml. `ortac' is a tool that
  converts an OCaml module interface with [Gospel] specifications into
  code to check those specifications. There are various ways to check
  specifications, all provided by plugins, and this post announces the
  new plugin: Ortac/Wrapper!

  This plugin is designed to generate a wrapped module that exposes the
  same interface as the original module but instruments all function
  calls with assertions corresponding to the Gospel specifications.  The
  main objective is to assist with unit testing. You provide the Gospel
  specification for your file, and Ortac will instrument it. When you
  run the unit tests on the wrapped version, if a specification is
  violated, Ortac will crash with an explicit error, telling you which
  portion of your code is incorrect and which specifications were
  violated.

  This work has been started by Cl=C3=A9ment Pascutto during his PhD at LMF
  and Tarides <https://theses.hal.science/tel-04696708v1>.  I continued
  his work to support some Gospel features such as the `old' operator
  and models.


[Ortac/Wrapper]
<https://github.com/ocaml-gospel/ortac/tree/main/plugins/wrapper>

[Gospel] <https://github.com/ocaml-gospel/gospel>

Installation
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  To install the Wrapper plugin, use the following command: `opam
  install ortac-wrapper'

  This will install the following OPAM packages:

  =E2=80=A2 `ortac-core.opam' which provides the `ortac' command-line tool =
and
    the core functionalities used by all plugins,
  =E2=80=A2 `ortac-runtime.opam' which provides the support library for the=
 code
    generated by the Wrapper Ortac plugin,
  =E2=80=A2 `ortac-wrapper.opam' which provides the Wrapper plugin for the
    `ortac' command-line tool.


=E2=97=8A To automatically generate dune files

  If you need dune rules to integrate Ortac into your project, you can
  install the Dune plugin: `opam install ortac-dune' This will install
  the following OPAM packages:

  =E2=80=A2 `ortac-core.opam' which provides the `ortac' command-line tool =
and
    the core functionalities used by all plugins,
  =E2=80=A2 `ortac-dune.opam' which provides the Dune plugin for the `ortac'
    command-line tool.


Try it!
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  Let=E2=80=99s dive into a mini tutorial to see how the Ortac/Wrapper plug=
in
  can be used to enhance your unit testing with Gospel
  specifications. We=E2=80=99ll walk through creating a simple polymorphic
  container type with limited capacity and see how to specify and test
  its behavior using Gospel.


=E2=97=8A 1- Define the type and models

  First, we define a polymorphic container type `'a t' with Gospel
  specifications. This type will have a fixed capacity and a mutable
  list of contents.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 type 'a t
  =E2=94=82 (*@ model capacity: int
  =E2=94=82         mutable model contents: 'a list
  =E2=94=82         with t
  =E2=94=82         invariant t.capacity > 0
  =E2=94=82         invariant List.length t.contents <=3D t.capacity *)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here, we define two models:

  =E2=80=A2 `capacity': Represents the fixed size of the container.
  =E2=80=A2 `contents': Represents the mutable list of elements currently s=
tored
    in the container.

  The invariants ensure that the capacity is always positive and that
  the contents list never exceeds the declared capacity.


=E2=97=8A 2- Specify function behavior

  Next, we specify the behavior of functions that manipulate the type
  `'a t'. We=E2=80=99ll define a `create' function to initialize the contai=
ner
  and an `add' function to insert elements into the container.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 val create: int -> 'a t
  =E2=94=82 (*@ t =3D create c
  =E2=94=82         requires c > 0
  =E2=94=82         ensures t.capacity =3D c
  =E2=94=82         ensures t.contents =3D [] *)
  =E2=94=82 val add: 'a t -> 'a -> unit
  =E2=94=82 (*@ add t x
  =E2=94=82         modifies t.contents
  =E2=94=82         ensures t.contents =3D x :: (old t.contents) *)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here the functions `create' and `add' are specified in Gospel.

  =E2=80=A2 The `create' function requires the capacity `c' to be strictly
    positive and ensures that the model of the new container has the
    specified capacity and an empty list of contents.
  =E2=80=A2 The `add' function modifies the contents of the container and
    ensures that the new element `x' is added to the list of contents.


=E2=97=8A 3- Define projection functions

  To validate these specifications at runtime, you need to provide
  projection functions that link OCaml values to their Gospel
  models. Projection functions can be defined in two ways.

  =E2=80=A2 Using the same name as the model.
  =E2=80=A2 Using a different name, annotated with the attribute
    `@@projection_for' and the name of its Gospel model.

  For our example, we define the projection functions as follows.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 val capacity : 'a t -> int
  =E2=94=82 val to_list : 'a t -> 'a list [@@projection_for contents]
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Where we encounter the two types of naming.

  =E2=80=A2 The `capacity' function directly corresponds to the `capacity'
    model.
  =E2=80=A2 The `to_seq' function is explicitly declared as the projection =
for
    the `contents' model using the `@@projection_for' attribute.

  These projection functions are mandatory for the Wrapper plugin to
  instrument the specifications. If any projection function is missing,
  nothing will be generated and an error will be printed.


=E2=97=8A 4- Generate the wrapped version

  Once you have both of the interface file annotated with Gospel and
  your implementation, you can start the generation.  If you have
  installed the `ortac-dune' package (which is recommended), you need to
  add the following in the dune file where you want to put the tests.

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 (rule
  =E2=94=82  (alias runtest)
  =E2=94=82  (mode promote)
  =E2=94=82  (action
  =E2=94=82   (with-stdout-to
  =E2=94=82    dune.wrapper.inc
  =E2=94=82    (setenv
  =E2=94=82     ORTAC_ONLY_PLUGIN
  =E2=94=82     dune-rules
  =E2=94=82     (run ortac dune wrapper <path to lib/lib.mli>)))))
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This will generate an additional Dune file called `dune.wrapper.inc'
  that you will need to include once created: `(include
  dune.wrapper.inc)'. Also, add the name of the wrapped module to the
  `libraries' stanza of the test folder.


=E2=97=8A 5- Add unit tests

  In order to test the `Lib' module, we can now simply write a program
  using the wrapped version. No need to specify the expected behaviour
  as the instrumentation will take care of that.

  For example, if you run the following program:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 open Lib_wrapped
  =E2=94=82 let () =3D
  =E2=94=82   let q =3D create 3 in
  =E2=94=82   add q 1;
  =E2=94=82   let q2 =3D create (-1) in
  =E2=94=82   add q2 1;
  =E2=94=82   ()
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  You will obtain the following result:

  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80
  =E2=94=82 File "lib.mli", line 8, characters 0-175:
  =E2=94=82 Runtime error in function ~create'
  =E2=94=82   - the pre-condition
  =E2=94=82       `c > 0'
  =E2=94=82     was violated.
  =E2=94=82 Fatal error: exception Ortac_runtime.Error(_)
  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  This process helps ensure that your code adheres to the specified
  behavior, making your unit tests more robust and informative.


Feel free to report
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=
=8C=E2=95=8C=E2=95=8C

  For more information here is the link of the [dedicated README].  If
  you encounter any bugs or misunderstandings, please feel free to
  report them as an issue on [GitHub].

  We hope this plugin will be useful to you and look forward to your
  feedback!


[dedicated README]
<https://github.com/ocaml-gospel/ortac/blob/main/plugins/wrapper/README.md>

[GitHub] <https://github.com/ocaml-gospel/ortac/issues>


Acknowledgments
=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=
=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C=E2=95=8C

  This work is partly founded by the ANR grant ANR-22-CE48-0013.


Other OCaml News
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=
=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

From the ocaml.org blog
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=
=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=
=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80

  Here are links from many OCaml blogs aggregated at [the ocaml.org
  blog].

  =E2=80=A2 [Upcoming OCaml Events]
  =E2=80=A2 [Database Testing in OCaml: From CRUD to Connection Pool Stress
    Testing]
  =E2=80=A2 [Vulkan graphics in OCaml vs C]
  =E2=80=A2 [Apache Parquet Files]
  =E2=80=A2 [Optimising Data Access in Parquet Files]
  =E2=80=A2 [FreeBSD unionfs deadlock]
  =E2=80=A2 [A first foray into agentic coding]
  =E2=80=A2 [Auto-configuration of MirageOS unikernels]


[the ocaml.org blog] <https://ocaml.org/blog/>

[Upcoming OCaml Events] <https://ocaml.org/events>

[Database Testing in OCaml: From CRUD to Connection Pool Stress Testing]
<https://fearful-odds.rocks/blog/database-testing-for-chaufr>

[Vulkan graphics in OCaml vs C]
<https://roscidus.com/blog/blog/2025/09/20/ocaml-vulkan/>

[Apache Parquet Files]
<https://www.tunbury.org/2025/09/17/parquet-files/>

[Optimising Data Access in Parquet Files]
<https://www.tunbury.org/2025/09/17/optimising-parquet-files/>

[FreeBSD unionfs deadlock]
<https://www.tunbury.org/2025/09/17/freebsd-unionfs/>

[A first foray into agentic coding]
<https://www.dra27.uk/blog/platform/2025/09/17/late-to-the-party.html>

[Auto-configuration of MirageOS unikernels]
<https://blog.robur.coop/articles/mollymawk-autoconfig.html>


Old CWN
=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90=E2=95=90

  If you happen to miss a CWN, you can [send me a message] and I'll mail
  it to you, or go take a look at [the archive] or the [RSS feed of the
  archives].

  If you also wish to receive it every week by mail, you may subscribe
  to the [caml-list].

  [Alan Schmitt]


[send me a message] <mailto:alan.schmitt@polytechnique.org>

[the archive] <https://alan.petitepomme.net/cwn/>

[RSS feed of the archives] <https://alan.petitepomme.net/cwn/cwn.rss>

[caml-list] <https://sympa.inria.fr/sympa/info/caml-list>

[Alan Schmitt] <https://alan.petitepomme.net/>


--=-=-=
Content-Type: text/html; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"en" xml:lang=3D"en">
<head>
<!-- 2025-09-23 Tue 15:22 -->
<meta http-equiv=3D"Content-Type" content=3D"text/html;charset=3Dutf-8" />
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"=
 />
<title>OCaml Weekly News</title>
<meta name=3D"generator" content=3D"Org Mode" />
<style type=3D"text/css">
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'JavaScript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<style type=3D"text/css">#table-of-contents h2 { display: none } .title { d=
isplay: none } .authorname { text-align: right }</style>
<style type=3D"text/css">.outline-2 {border-top: 1px solid black;}</style>
</head>
<body>
<div id=3D"content" class=3D"content">
<h1 class=3D"title">OCaml Weekly News</h1>
<p>
<a href=3D"https://alan.petitepomme.net/cwn/2025.09.16.html">Previous Week<=
/a> <a href=3D"https://alan.petitepomme.net/cwn/index.html">Up</a> <a href=
=3D"https://alan.petitepomme.net/cwn/2025.09.30.html">Next Week</a>
</p>

<p>
Hello
</p>

<p>
Here is the latest OCaml Weekly News, for the week of September 16 to 23, 2=
025.
</p>

<div id=3D"table-of-contents" role=3D"doc-toc">
<h2>Table of Contents</h2>
<div id=3D"text-table-of-contents" role=3D"doc-toc">
<ul>
<li><a href=3D"#1">Introduction to the Dune build system, by OCamlPro</a></=
li>
<li><a href=3D"#2">memprof-limits (first official release): Memory limits, =
allocation limits, and thread cancellation, with interrupt-safe resources</=
a></li>
<li><a href=3D"#3">mlfront-shell - reference implementation of a build syst=
em</a></li>
<li><a href=3D"#4">Zanuda &ndash; OCaml linter experiment</a></li>
<li><a href=3D"#5">YOCaml, a framework for static site generator</a></li>
<li><a href=3D"#6">Lwt.6.0.0~beta (direct-style, multi-domain parallelism)<=
/a></li>
<li><a href=3D"#7">schm-ocaml</a></li>
<li><a href=3D"#8">detri cmd</a></li>
<li><a href=3D"#9">seven ocaml tutorials</a></li>
<li><a href=3D"#10">Ortac/Wrapper: a new plugin for specification driven un=
it testing</a></li>
<li><a href=3D"#11">Other OCaml News</a></li>
<li><a href=3D"#org71b44a4">Old CWN</a></li>
</ul>
</div>
</div>
<div id=3D"outline-container-1" class=3D"outline-2">
<h2 id=3D"1">Introduction to the Dune build system, by OCamlPro</h2>
<div class=3D"outline-text-2" id=3D"text-1">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/blog-introduction-to-the-du=
ne-build-system-by-ocamlpro/17279/1">https://discuss.ocaml.org/t/blog-intro=
duction-to-the-dune-build-system-by-ocamlpro/17279/1</a>
</p>
</div>
<div id=3D"outline-container-org4586377" class=3D"outline-3">
<h3 id=3D"org4586377">OCamlPro announced</h3>
<div class=3D"outline-text-3" id=3D"text-org4586377">
<p>
<b>Greetings Cameleers,</b>
</p>

<p>
We=E2=80=99ve just released a new blog post: <a href=3D"https://ocamlpro.co=
m/blog/2025_07_29_ocaml_onboarding_introduction_to_dune/">OCaml Onboarding:=
 Introduction to the Dune build system</a>
</p>

<p>
This is a practical, compact guide for those starting their OCaml and Dune =
journey =E2=80=94 or helping others do so. Instead of diving into internals=
, we focus on what you need to know to get up and running with Dune confide=
ntly.
</p>

<p>
We walk through:
</p>
<ul class=3D"org-ul">
<li>How Dune thinks about builds and directories</li>
<li>The role of dune files and static declarations</li>
<li>The tooling one interacts with day-to-day</li>
</ul>

<p>
The post keeps things hands-on and beginner-focused, with just enough theor=
y to make the practical bits stick. We end by circling back to <code>dune i=
nit</code> =E2=80=94 showing how understanding the basics makes the scaffol=
ding tool far more intuitive.
</p>

<p>
=F0=9F=93=9D Read it on the <a href=3D"https://ocamlpro.com/blog/">OCamlPro=
 Blog</a>
</p>

<p>
Perfect for sharing with colleagues or newcomers dipping their toes into OC=
aml and Dune.
</p>

<p>
As always, feedback welcome!
Until next time,
=E2=80=94 The OCamlPro Team
</p>
</div>
</div>
</div>
<div id=3D"outline-container-2" class=3D"outline-2">
<h2 id=3D"2">memprof-limits (first official release): Memory limits, alloca=
tion limits, and thread cancellation, with interrupt-safe resources</h2>
<div class=3D"outline-text-2" id=3D"text-2">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-memprof-limits-first-of=
ficial-release-memory-limits-allocation-limits-and-thread-cancellation-with=
-interrupt-safe-resources/8135/3">https://discuss.ocaml.org/t/ann-memprof-l=
imits-first-official-release-memory-limits-allocation-limits-and-thread-can=
cellation-with-interrupt-safe-resources/8135/3</a>
</p>
</div>
<div id=3D"outline-container-orgfb84bb7" class=3D"outline-3">
<h3 id=3D"orgfb84bb7">Guillaume Munch-Maccagnoni announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgfb84bb7">
<p>
I am pleased to announce the version <code>0.3.0</code> of the package <cod=
e>memprof-limits</code>. The main contribution of this release is the <b>su=
pport for OCaml 5 with multiple parallel domains</b>.
</p>

<p>
Memprof-limits can henceforth be used to conveniently interrupt (CPU-bound)=
 domains in your parallel computations, using <i>cancellation tokens</i>, w=
ith the support of features to ensure interrupt-safety and resource-safety.
</p>

<p>
As example of uses, plans are underway to use memprof-limits to ensure the =
resource-safety of user interrupts in the Rocq prover (eliminating a class =
of bugs) and to add tactics for portable timeouts (that count allocations r=
ather than elapsed time).
</p>

<ul class=3D"org-ul">
<li>Read more: <a href=3D"https://guillaume.munch.name/software/ocaml/mempr=
of-limits.0.3.0/">https://guillaume.munch.name/software/ocaml/memprof-limit=
s.0.3.0/</a></li>
<li>Report bugs and suggestions: <a href=3D"https://gitlab.com/gadmm/mempro=
f-limits">https://gitlab.com/gadmm/memprof-limits</a></li>
</ul>
</div>
</div>
</div>
<div id=3D"outline-container-3" class=3D"outline-2">
<h2 id=3D"3">mlfront-shell - reference implementation of a build system</h2>
<div class=3D"outline-text-2" id=3D"text-3">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-mlfront-shell-reference=
-implementation-of-a-build-system/17186/2">https://discuss.ocaml.org/t/ann-=
mlfront-shell-reference-implementation-of-a-build-system/17186/2</a>
</p>
</div>
<div id=3D"outline-container-orgb7d4988" class=3D"outline-3">
<h3 id=3D"orgb7d4988">jbeckford announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgb7d4988">
<p>
There have been many improvements since the last update. Here are some of t=
hem:
</p>

<ol class=3D"org-ol">
<li>The trace store (needed to not rebuild everything from scratch) has bee=
n implemented.</li>
<li>Build file ASTs are parsed, marshalled and put into a key-value directo=
ry (which can be shared or cached in CI).</li>
<li>Build keys are generated and used to protect sharing of the parsed AST.=
</li>
<li>A full walkthrough of =E2=80=9Cbuilding=E2=80=9D the 7zip executable fr=
om 7zip binary assets (it is more complicated than it sounds) is on the <a =
href=3D"https://github.com/diskuv/dk?tab=3Dreadme-ov-file#using-the-build-t=
ool-to-create-a-multi-platform-package">documentation page</a></li>
<li>An <code>=E2=80=93autofix</code> option to update build files with chec=
ksums, and allowing SHA1 checksum for local files (both are for eventual su=
pport of Meta=E2=80=99s watchman tool)</li>
<li>A new format for the JSON files (many functions versus one). The old fo=
rmat is deprecated.</li>
<li>Many many bug fixes, including specification updates.</li>
</ol>
</div>
</div>
</div>
<div id=3D"outline-container-4" class=3D"outline-2">
<h2 id=3D"4">Zanuda &ndash; OCaml linter experiment</h2>
<div class=3D"outline-text-2" id=3D"text-4">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-zanuda-ocaml-linter-exp=
eriment/11784/13">https://discuss.ocaml.org/t/ann-zanuda-ocaml-linter-exper=
iment/11784/13</a>
</p>
</div>
<div id=3D"outline-container-org93f3d0a" class=3D"outline-3">
<h3 id=3D"org93f3d0a">Continuing this thread, Kakadu announced</h3>
<div class=3D"outline-text-3" id=3D"text-org93f3d0a">
<p>
Zanuda 2.0.0 with OCaml 5.3 support have hit opam.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-5" class=3D"outline-2">
<h2 id=3D"5">YOCaml, a framework for static site generator</h2>
<div class=3D"outline-text-2" id=3D"text-5">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-yocaml-a-framework-for-=
static-site-generator/15393/9">https://discuss.ocaml.org/t/ann-yocaml-a-fra=
mework-for-static-site-generator/15393/9</a>
</p>
</div>
<div id=3D"outline-container-org4543f3f" class=3D"outline-3">
<h3 id=3D"org4543f3f">Xavier Van de Woestyne announced</h3>
<div class=3D"outline-text-3" id=3D"text-org4543f3f">
</div>
<div id=3D"outline-container-orga502aae" class=3D"outline-4">
<h4 id=3D"orga502aae">Release <code>2.5.0</code></h4>
<div class=3D"outline-text-4" id=3D"text-orga502aae">
<p>
We are delighted to present the new release of YOCaml: <code>2.5.0</code>!
As you can see, there have been a few intermediate versions since our last =
announcement. However, we have reached a new milestone: YOCaml can now be u=
sed seamlessly with an Applicative API (instead of the Arrow one), making m=
any tasks much easier to express!
</p>

<p>
We have also finally taken the time to write <a href=3D"https://yocaml.gith=
ub.io/tutorial">a tutorial that explains how to use YOCaml to create a comp=
lete blog</a>, step by step, and our goal is to expand it over time to add =
more and more guides! (The documentation/guide generator (<a href=3D"https:=
//github.com/yocaml/yocaml-www">https://github.com/yocaml/yocaml-www</a> is=
 also written in YOCaml and gives an idea of what can be done fairly quickl=
y.)
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://github.com/xhtmlboi/yocaml">Repository</a></li>
<li><a href=3D"https://ocaml.org/packages/search?q=3Dyocaml">YOCaml package=
s</a></li>
<li><a href=3D"https://github.com/xhtmlboi/yocaml/releases/tag/v2.5.0">Comp=
lete release note</a></li>
</ul>

<p>
We look forward to receiving your feedback! YOCaml is a free and collaborat=
ive project, so any contributions (including the guide) are more than welco=
me! We would also be DELIGHTED to see your creations with YOCaml!=20=20
</p>

<p>
<i>Happy Hacking!</i>
</p>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-6" class=3D"outline-2">
<h2 id=3D"6">Lwt.6.0.0~beta (direct-style, multi-domain parallelism)</h2>
<div class=3D"outline-text-2" id=3D"text-6">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-lwt-6-0-0-beta-direct-s=
tyle-multi-domain-parallelism/17283/1">https://discuss.ocaml.org/t/ann-lwt-=
6-0-0-beta-direct-style-multi-domain-parallelism/17283/1</a>
</p>
</div>
<div id=3D"outline-container-org320e0f9" class=3D"outline-3">
<h3 id=3D"org320e0f9">Rapha=C3=ABl Proust announced</h3>
<div class=3D"outline-text-3" id=3D"text-org320e0f9">
<p>
After some feedback and some work, I'm happy to announce the release of <co=
de>lwt.6.0.0~beta00</code> and <code>lwt_direct.6.0.0~beta00</code>! (<a hr=
ef=3D"https://github.com/ocaml/opam-repository/pull/28558">https://github.c=
om/ocaml/opam-repository/pull/28558</a>)
</p>

<p>
major CHANGES are:
</p>
<ul class=3D"org-ul">
<li>direct style mode (see <a href=3D"https://discuss.ocaml.org/t/ann-lwt-6=
-0-0-alpha-direct-style/16972/32">alpha release announce</a>): use <code>aw=
ait : 'a Lwt.t -&gt; 'a</code> to transform any promises into a simple valu=
e. This allows you to break out of the monad which makes it possible to use=
 libraries previously incompatible with Lwt.</li>
<li>multi-domain support: run separate schedulers in separate domains (some=
 of the more advanced functions on Lwt are now domain-dependent, e.g., <cod=
e>run_in_main</code> becomes <code>run_in_domain</code> and takes one addit=
ional parameter)</li>
</ul>

<p>
Feedback is very welcome. Happy beta-testing and good luck with the paralle=
l-programming!
</p>
</div>
</div>
</div>
<div id=3D"outline-container-7" class=3D"outline-2">
<h2 id=3D"7">schm-ocaml</h2>
<div class=3D"outline-text-2" id=3D"text-7">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-schm-ocaml/17293/1">htt=
ps://discuss.ocaml.org/t/ann-schm-ocaml/17293/1</a>
</p>
</div>
<div id=3D"outline-container-org83b785f" class=3D"outline-3">
<h3 id=3D"org83b785f">Florent Monnier announced</h3>
<div class=3D"outline-text-3" id=3D"text-org83b785f">
<p>
schm-ocaml provides a scheme-like syntax.
</p>

<p>
schm3 integrates nicely with the rescript-version that provides the ocaml s=
yntax.
</p>

<p>
schm4 integrates with one of the later ocaml 4 versions, and tries to be ac=
cessible from .c
</p>

<p>
<a href=3D"http://decapode314.free.fr/ocaml2/schm/">http://decapode314.free=
.fr/ocaml2/schm/</a>
</p>

<p>
There is a tutorial:
</p>

<p>
<a href=3D"http://decapode314.free.fr/ocaml2/schm/schm-tut.html">http://dec=
apode314.free.fr/ocaml2/schm/schm-tut.html</a>
</p>

<p>
<a href=3D"http://decapode314.free.fr/ocaml2/schm/dl/schm4-0.03.zip">http:/=
/decapode314.free.fr/ocaml2/schm/dl/schm4-0.03.zip</a>
</p>

<p>
The oo got lost in a computer crash.
</p>

<p>
So there is no oo.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-8" class=3D"outline-2">
<h2 id=3D"8">detri cmd</h2>
<div class=3D"outline-text-2" id=3D"text-8">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-detri-cmd/17301/1">http=
s://discuss.ocaml.org/t/ann-detri-cmd/17301/1</a>
</p>
</div>
<div id=3D"outline-container-org521af53" class=3D"outline-3">
<h3 id=3D"org521af53">Florent Monnier announced</h3>
<div class=3D"outline-text-3" id=3D"text-org521af53">
<p>
There is now a fifth variant for detri:
</p>

<p>
<a href=3D"http://decapode314.free.fr/ocaml/detris.html">http://decapode314=
.free.fr/ocaml/detris.html</a>
</p>

<p>
This fifth one outputs .html, in-stead of console.
</p>

<p>
If you took a previous version for the console, it was already something yo=
u could do by-yourself easily rewriting the console esc-chars to html, but =
now there is a ready-made one.
</p>

<p>
(There is also a small tutorial, but it should be re-written,
</p>

<p>
<a href=3D"http://decapode314.free.fr/ocaml/detri/tut/detri-tut.html">http:=
//decapode314.free.fr/ocaml/detri/tut/detri-tut.html</a>
</p>

<p>
)
</p>
</div>
</div>
</div>
<div id=3D"outline-container-9" class=3D"outline-2">
<h2 id=3D"9">seven ocaml tutorials</h2>
<div class=3D"outline-text-2" id=3D"text-9">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-s-tut-seven-ocaml-tutor=
ials/17302/1">https://discuss.ocaml.org/t/ann-s-tut-seven-ocaml-tutorials/1=
7302/1</a>
</p>
</div>
<div id=3D"outline-container-orgdf96c88" class=3D"outline-3">
<h3 id=3D"orgdf96c88">Florent Monnier announced</h3>
<div class=3D"outline-text-3" id=3D"text-orgdf96c88">
<p>
You will find seven new ocaml-tutorials on this page that I wrote recently:
</p>

<p>
<a href=3D"http://decapode314.free.fr/ocaml2/blog/">http://decapode314.free=
.fr/ocaml2/blog/</a>
</p>

<p>
It was not writen with a chat-bot, but you will maybe notice a difference i=
n the style of writing, since I=E2=80=99m using a chat-bot.
</p>
</div>
</div>
</div>
<div id=3D"outline-container-10" class=3D"outline-2">
<h2 id=3D"10">Ortac/Wrapper: a new plugin for specification driven unit tes=
ting</h2>
<div class=3D"outline-text-2" id=3D"text-10">
<p>
Archive: <a href=3D"https://discuss.ocaml.org/t/ann-ortac-wrapper-a-new-plu=
gin-for-specification-driven-unit-testing/17304/1">https://discuss.ocaml.or=
g/t/ann-ortac-wrapper-a-new-plugin-for-specification-driven-unit-testing/17=
304/1</a>
</p>
</div>
<div id=3D"outline-container-org3a79691" class=3D"outline-3">
<h3 id=3D"org3a79691">Charl=C3=A8ne_Gros announced</h3>
<div class=3D"outline-text-3" id=3D"text-org3a79691">
<p>
Hello everyone,
</p>

<p>
We, at Tarides, are excited to announce the release of a new plugin for <co=
de>ortac</code>: <a href=3D"https://github.com/ocaml-gospel/ortac/tree/main=
/plugins/wrapper">Ortac/Wrapper</a>!
</p>

<p>
This plugin is part of the Gospel project, a contract-based behavioural spe=
cification language for OCaml. <code>ortac</code> is a tool that converts a=
n OCaml module interface with <a href=3D"https://github.com/ocaml-gospel/go=
spel">Gospel</a> specifications into code to check those specifications. Th=
ere are various ways to check specifications, all provided by plugins, and =
this post announces the new plugin: Ortac/Wrapper!
</p>

<p>
This plugin is designed to generate a wrapped module that exposes the same =
interface as the original module but instruments all function calls with as=
sertions corresponding to the Gospel specifications.
The main objective is to assist with unit testing. You provide the Gospel s=
pecification for your file, and Ortac will instrument it. When you run the =
unit tests on the wrapped version, if a specification is violated, Ortac wi=
ll crash with an explicit error, telling you which portion of your code is =
incorrect and which specifications were violated.
</p>

<p>
This work has been started by Cl=C3=A9ment Pascutto during his PhD at LMF a=
nd Tarides <a href=3D"https://theses.hal.science/tel-04696708v1">https://th=
eses.hal.science/tel-04696708v1</a>.
I continued his work to support some Gospel features such as the <code>old<=
/code> operator and models.
</p>
</div>
<div id=3D"outline-container-org56b3bd5" class=3D"outline-4">
<h4 id=3D"org56b3bd5">Installation</h4>
<div class=3D"outline-text-4" id=3D"text-org56b3bd5">
<p>
To install the Wrapper plugin, use the following command:
<code>opam install ortac-wrapper</code>
</p>

<p>
This will install the following OPAM packages:
</p>

<ul class=3D"org-ul">
<li><code>ortac-core.opam</code> which provides the <code>ortac</code> comm=
and-line tool and the core functionalities used by all plugins,</li>
<li><code>ortac-runtime.opam</code> which provides the support library for =
the code generated by the Wrapper Ortac plugin,</li>
<li><code>ortac-wrapper.opam</code> which provides the Wrapper plugin for t=
he <code>ortac</code> command-line tool.</li>
</ul>
</div>
<ul class=3D"org-ul">
<li><a id=3D"org09dcbdb"></a>To automatically generate dune files<br />
<div class=3D"outline-text-5" id=3D"text-org09dcbdb">
<p>
If you need dune rules to integrate Ortac into your project, you can instal=
l the Dune plugin:
<code>opam install ortac-dune</code>
This will install the following OPAM packages:
</p>

<ul class=3D"org-ul">
<li><code>ortac-core.opam</code> which provides the <code>ortac</code> comm=
and-line tool and the core functionalities used by all plugins,</li>
<li><code>ortac-dune.opam</code> which provides the Dune plugin for the <co=
de>ortac</code> command-line tool.</li>
</ul>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-org16a3731" class=3D"outline-4">
<h4 id=3D"org16a3731">Try it!</h4>
<div class=3D"outline-text-4" id=3D"text-org16a3731">
<p>
Let=E2=80=99s dive into a mini tutorial to see how the Ortac/Wrapper plugin=
 can be used to enhance your unit testing with Gospel specifications. We=E2=
=80=99ll walk through creating a simple polymorphic container type with lim=
ited capacity and see how to specify and test its behavior using Gospel.
</p>
</div>
<ul class=3D"org-ul">
<li><a id=3D"org0b861c6"></a>1- Define the type and models<br />
<div class=3D"outline-text-5" id=3D"text-org0b861c6">
<p>
First, we define a polymorphic container type <code>'a t</code> with Gospel=
 specifications. This type will have a fixed capacity and a mutable list of=
 contents.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><code><span style=3D"color: #000000; font-weig=
ht: bold;">type</span> <span style=3D"color: #444fcf;">'a t</span>
<span style=3D"color: #8f6f4a; font-style: italic;">(*</span><span style=3D=
"color: #8f6f4a; font-style: italic;">@ model capacity: int
        mutable model contents: 'a list
        with t
        invariant t.capacity &gt; 0
        invariant List.length t.contents &lt;=3D t.capacity</span><span sty=
le=3D"color: #8f6f4a; font-style: italic;"> *)</span>
</code></pre>
</div>

<p>
Here, we define two models:
</p>

<ul class=3D"org-ul">
<li><code>capacity</code>: Represents the fixed size of the container.</li>
<li><code>contents</code>: Represents the mutable list of elements currentl=
y stored in the container.</li>
</ul>

<p>
The invariants ensure that the capacity is always positive and that the con=
tents list never exceeds the declared capacity.
</p>
</div>
</li>
<li><a id=3D"org5e61b23"></a>2- Specify function behavior<br />
<div class=3D"outline-text-5" id=3D"text-org5e61b23">
<p>
Next, we specify the behavior of functions that manipulate the type <code>'=
a t</code>. We=E2=80=99ll define a <code>create</code> function to initiali=
ze the container and an <code>add</code> function to insert elements into t=
he container.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><code><span style=3D"color: #000000; font-weig=
ht: bold;">val</span> <span style=3D"color: #a7601f;">create</span>: int -&=
gt; 'a t
<span style=3D"color: #8f6f4a; font-style: italic;">(*</span><span style=3D=
"color: #8f6f4a; font-style: italic;">@ t =3D create c
        requires c &gt; 0
        ensures t.capacity =3D c
        ensures t.contents =3D []</span><span style=3D"color: #8f6f4a; font=
-style: italic;"> *)</span>
<span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #a7601f;">add</span>: 'a t -&gt; 'a -&gt; unit
<span style=3D"color: #8f6f4a; font-style: italic;">(*</span><span style=3D=
"color: #8f6f4a; font-style: italic;">@ add t x
        modifies t.contents
        ensures t.contents =3D x :: (old t.contents)</span><span style=3D"c=
olor: #8f6f4a; font-style: italic;"> *)</span>
</code></pre>
</div>

<p>
Here the functions <code>create</code> and <code>add</code> are specified i=
n Gospel.
</p>

<ul class=3D"org-ul">
<li>The <code>create</code> function requires the capacity <code>c</code> t=
o be strictly positive and ensures that the model of the new container has =
the specified capacity and an empty list of contents.</li>
<li>The <code>add</code> function modifies the contents of the container an=
d ensures that the new element <code>x</code> is added to the list of conte=
nts.</li>
</ul>
</div>
</li>
<li><a id=3D"org02bfcaf"></a>3- Define projection functions<br />
<div class=3D"outline-text-5" id=3D"text-org02bfcaf">
<p>
To validate these specifications at runtime, you need to provide projection=
 functions that link OCaml values to their Gospel models. Projection functi=
ons can be defined in two ways.
</p>

<ul class=3D"org-ul">
<li>Using the same name as the model.</li>
<li>Using a different name, annotated with the attribute <code>@@projection=
_for</code> and the name of its Gospel model.</li>
</ul>

<p>
For our example, we define the projection functions as follows.
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><code><span style=3D"color: #000000; font-weig=
ht: bold;">val</span> <span style=3D"color: #a7601f;">capacity</span> : 'a =
t -&gt; int
<span style=3D"color: #000000; font-weight: bold;">val</span> <span style=
=3D"color: #a7601f;">to_list</span> : 'a t -&gt; 'a list <span style=3D"col=
or: #9f0d0f;">[@@projection_for contents]</span>
</code></pre>
</div>

<p>
Where we encounter the two types of naming.
</p>

<ul class=3D"org-ul">
<li>The <code>capacity</code> function directly corresponds to the <code>ca=
pacity</code> model.</li>
<li>The <code>to_seq</code> function is explicitly declared as the projecti=
on for the <code>contents</code> model using the <code>@@projection_for</co=
de> attribute.</li>
</ul>

<p>
These projection functions are mandatory for the Wrapper plugin to instrume=
nt the specifications. If any projection function is missing, nothing will =
be generated and an error will be printed.
</p>
</div>
</li>
<li><a id=3D"org4811287"></a>4- Generate the wrapped version<br />
<div class=3D"outline-text-5" id=3D"text-org4811287">
<p>
Once you have both of the interface file annotated with Gospel and your imp=
lementation, you can start the generation.
If you have installed the <code>ortac-dune</code> package (which is recomme=
nded), you need to add the following in the dune file where you want to put=
 the tests.
</p>

<pre class=3D"example" id=3D"orgb6d50da">
(rule
 (alias runtest)
 (mode promote)
 (action
  (with-stdout-to
   dune.wrapper.inc
   (setenv
    ORTAC_ONLY_PLUGIN
    dune-rules
    (run ortac dune wrapper &lt;path to lib/lib.mli&gt;)))))
</pre>

<p>
This will generate an additional Dune file called <code>dune.wrapper.inc</c=
ode> that you will need to include once created: <code>(include dune.wrappe=
r.inc)</code>. Also, add the name of the wrapped module to the <code>librar=
ies</code> stanza of the test folder.
</p>
</div>
</li>
<li><a id=3D"org03b08c0"></a>5- Add unit tests<br />
<div class=3D"outline-text-5" id=3D"text-org03b08c0">
<p>
In order to test the <code>Lib</code> module, we can now simply write a pro=
gram using the wrapped version. No need to specify the expected behaviour a=
s the instrumentation will take care of that.
</p>

<p>
For example, if you run the following program:
</p>

<div class=3D"org-src-container">
<pre class=3D"src src-ocaml"><code><span style=3D"color: #000000; font-weig=
ht: bold;">open </span><span style=3D"color: #444fcf;">Lib_wrapped</span>
<span style=3D"color: #000000; font-weight: bold;">let</span> () =3D
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">q</span> =3D create 3 <span style=3D"color: #000000; f=
ont-weight: bold;">in</span>
  add q 1;
  <span style=3D"color: #000000; font-weight: bold;">let</span> <span style=
=3D"color: #007a9f;">q2</span> =3D create (-1) <span style=3D"color: #00000=
0; font-weight: bold;">in</span>
  add q2 1;
  ()
</code></pre>
</div>

<p>
You will obtain the following result:
</p>

<pre class=3D"example" id=3D"orgeb3cac0">
File "lib.mli", line 8, characters 0-175:
Runtime error in function ~create'
  - the pre-condition
      `c &gt; 0'
    was violated.
Fatal error: exception Ortac_runtime.Error(_)
</pre>

<p>
This process helps ensure that your code adheres to the specified behavior,=
 making your unit tests more robust and informative.
</p>
</div>
</li>
</ul>
</div>
<div id=3D"outline-container-orgcb43363" class=3D"outline-4">
<h4 id=3D"orgcb43363">Feel free to report</h4>
<div class=3D"outline-text-4" id=3D"text-orgcb43363">
<p>
For more information here is the link of the <a href=3D"https://github.com/=
ocaml-gospel/ortac/blob/main/plugins/wrapper/README.md">dedicated README</a=
>.
If you encounter any bugs or misunderstandings, please feel free to report =
them as an issue on <a href=3D"https://github.com/ocaml-gospel/ortac/issues=
">GitHub</a>.
</p>

<p>
We hope this plugin will be useful to you and look forward to your feedback!
</p>
</div>
</div>
<div id=3D"outline-container-orgb112803" class=3D"outline-4">
<h4 id=3D"orgb112803">Acknowledgments</h4>
<div class=3D"outline-text-4" id=3D"text-orgb112803">
<p>
This work is partly founded by the ANR grant ANR-22-CE48-0013.
</p>
</div>
</div>
</div>
</div>
<div id=3D"outline-container-11" class=3D"outline-2">
<h2 id=3D"11">Other OCaml News</h2>
<div class=3D"outline-text-2" id=3D"text-11">
</div>
<div id=3D"outline-container-org02c7422" class=3D"outline-3">
<h3 id=3D"org02c7422">From the ocaml.org blog</h3>
<div class=3D"outline-text-3" id=3D"text-org02c7422">
<p>
Here are links from many OCaml blogs aggregated at <a href=3D"https://ocaml=
.org/blog/">the ocaml.org blog</a>.
</p>

<ul class=3D"org-ul">
<li><a href=3D"https://ocaml.org/events">Upcoming OCaml Events</a></li>
<li><a href=3D"https://fearful-odds.rocks/blog/database-testing-for-chaufr"=
>Database Testing in OCaml: From CRUD to Connection Pool Stress Testing</a>=
</li>
<li><a href=3D"https://roscidus.com/blog/blog/2025/09/20/ocaml-vulkan/">Vul=
kan graphics in OCaml vs C</a></li>
<li><a href=3D"https://www.tunbury.org/2025/09/17/parquet-files/">Apache Pa=
rquet Files</a></li>
<li><a href=3D"https://www.tunbury.org/2025/09/17/optimising-parquet-files/=
">Optimising Data Access in Parquet Files</a></li>
<li><a href=3D"https://www.tunbury.org/2025/09/17/freebsd-unionfs/">FreeBSD=
 unionfs deadlock</a></li>
<li><a href=3D"https://www.dra27.uk/blog/platform/2025/09/17/late-to-the-pa=
rty.html">A first foray into agentic coding</a></li>
<li><a href=3D"https://blog.robur.coop/articles/mollymawk-autoconfig.html">=
Auto-configuration of MirageOS unikernels</a></li>
</ul>
</div>
</div>
</div>
<div id=3D"outline-container-org71b44a4" class=3D"outline-2">
<h2 id=3D"org71b44a4">Old CWN</h2>
<div class=3D"outline-text-2" id=3D"text-org71b44a4">
<p>
If you happen to miss a CWN, you can <a href=3D"mailto:alan.schmitt@polytec=
hnique.org">send me a message</a> and I'll mail it to you, or go take a loo=
k at <a href=3D"https://alan.petitepomme.net/cwn/">the archive</a> or the <=
a href=3D"https://alan.petitepomme.net/cwn/cwn.rss">RSS feed of the archive=
s</a>.
</p>

<p>
If you also wish to receive it every week by mail, you may subscribe to the=
 <a href=3D"https://sympa.inria.fr/sympa/info/caml-list">caml-list</a>.
</p>

<div class=3D"authorname" id=3D"org47ff3e9">
<p>
<a href=3D"https://alan.petitepomme.net/">Alan Schmitt</a>
</p>

</div>
</div>
</div>
</div>
</body>
</html>


--=-=-=--
